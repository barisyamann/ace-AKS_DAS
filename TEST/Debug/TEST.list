
TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001239c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c4  080125a0  080125a0  000135a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012f64  08012f64  000141ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012f64  08012f64  00013f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012f6c  08012f6c  000141ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012f6c  08012f6c  00013f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012f70  08012f70  00013f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08012f74  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000599c  200001ec  08013160  000141ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005b88  08013160  00014b88  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000141ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022932  00000000  00000000  0001421a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c61  00000000  00000000  00036b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c10  00000000  00000000  0003b7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000159f  00000000  00000000  0003d3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007810  00000000  00000000  0003e95f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025269  00000000  00000000  0004616f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ce12  00000000  00000000  0006b3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001781ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089b4  00000000  00000000  00178230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00180be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001ec 	.word	0x200001ec
 800021c:	00000000 	.word	0x00000000
 8000220:	08012584 	.word	0x08012584

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f0 	.word	0x200001f0
 800023c:	08012584 	.word	0x08012584

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9c0 	b.w	8000a00 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	468e      	mov	lr, r1
 8000710:	4604      	mov	r4, r0
 8000712:	4688      	mov	r8, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d962      	bls.n	80007e4 <__udivmoddi4+0xdc>
 800071e:	fab2 f682 	clz	r6, r2
 8000722:	b14e      	cbz	r6, 8000738 <__udivmoddi4+0x30>
 8000724:	f1c6 0320 	rsb	r3, r6, #32
 8000728:	fa01 f806 	lsl.w	r8, r1, r6
 800072c:	fa20 f303 	lsr.w	r3, r0, r3
 8000730:	40b7      	lsls	r7, r6
 8000732:	ea43 0808 	orr.w	r8, r3, r8
 8000736:	40b4      	lsls	r4, r6
 8000738:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800073c:	fa1f fc87 	uxth.w	ip, r7
 8000740:	fbb8 f1fe 	udiv	r1, r8, lr
 8000744:	0c23      	lsrs	r3, r4, #16
 8000746:	fb0e 8811 	mls	r8, lr, r1, r8
 800074a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800074e:	fb01 f20c 	mul.w	r2, r1, ip
 8000752:	429a      	cmp	r2, r3
 8000754:	d909      	bls.n	800076a <__udivmoddi4+0x62>
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	f101 30ff 	add.w	r0, r1, #4294967295
 800075c:	f080 80ea 	bcs.w	8000934 <__udivmoddi4+0x22c>
 8000760:	429a      	cmp	r2, r3
 8000762:	f240 80e7 	bls.w	8000934 <__udivmoddi4+0x22c>
 8000766:	3902      	subs	r1, #2
 8000768:	443b      	add	r3, r7
 800076a:	1a9a      	subs	r2, r3, r2
 800076c:	b2a3      	uxth	r3, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800077a:	fb00 fc0c 	mul.w	ip, r0, ip
 800077e:	459c      	cmp	ip, r3
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0x8e>
 8000782:	18fb      	adds	r3, r7, r3
 8000784:	f100 32ff 	add.w	r2, r0, #4294967295
 8000788:	f080 80d6 	bcs.w	8000938 <__udivmoddi4+0x230>
 800078c:	459c      	cmp	ip, r3
 800078e:	f240 80d3 	bls.w	8000938 <__udivmoddi4+0x230>
 8000792:	443b      	add	r3, r7
 8000794:	3802      	subs	r0, #2
 8000796:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079a:	eba3 030c 	sub.w	r3, r3, ip
 800079e:	2100      	movs	r1, #0
 80007a0:	b11d      	cbz	r5, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40f3      	lsrs	r3, r6
 80007a4:	2200      	movs	r2, #0
 80007a6:	e9c5 3200 	strd	r3, r2, [r5]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d905      	bls.n	80007be <__udivmoddi4+0xb6>
 80007b2:	b10d      	cbz	r5, 80007b8 <__udivmoddi4+0xb0>
 80007b4:	e9c5 0100 	strd	r0, r1, [r5]
 80007b8:	2100      	movs	r1, #0
 80007ba:	4608      	mov	r0, r1
 80007bc:	e7f5      	b.n	80007aa <__udivmoddi4+0xa2>
 80007be:	fab3 f183 	clz	r1, r3
 80007c2:	2900      	cmp	r1, #0
 80007c4:	d146      	bne.n	8000854 <__udivmoddi4+0x14c>
 80007c6:	4573      	cmp	r3, lr
 80007c8:	d302      	bcc.n	80007d0 <__udivmoddi4+0xc8>
 80007ca:	4282      	cmp	r2, r0
 80007cc:	f200 8105 	bhi.w	80009da <__udivmoddi4+0x2d2>
 80007d0:	1a84      	subs	r4, r0, r2
 80007d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80007d6:	2001      	movs	r0, #1
 80007d8:	4690      	mov	r8, r2
 80007da:	2d00      	cmp	r5, #0
 80007dc:	d0e5      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007de:	e9c5 4800 	strd	r4, r8, [r5]
 80007e2:	e7e2      	b.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	f000 8090 	beq.w	800090a <__udivmoddi4+0x202>
 80007ea:	fab2 f682 	clz	r6, r2
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	f040 80a4 	bne.w	800093c <__udivmoddi4+0x234>
 80007f4:	1a8a      	subs	r2, r1, r2
 80007f6:	0c03      	lsrs	r3, r0, #16
 80007f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007fc:	b280      	uxth	r0, r0
 80007fe:	b2bc      	uxth	r4, r7
 8000800:	2101      	movs	r1, #1
 8000802:	fbb2 fcfe 	udiv	ip, r2, lr
 8000806:	fb0e 221c 	mls	r2, lr, ip, r2
 800080a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800080e:	fb04 f20c 	mul.w	r2, r4, ip
 8000812:	429a      	cmp	r2, r3
 8000814:	d907      	bls.n	8000826 <__udivmoddi4+0x11e>
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	f10c 38ff 	add.w	r8, ip, #4294967295
 800081c:	d202      	bcs.n	8000824 <__udivmoddi4+0x11c>
 800081e:	429a      	cmp	r2, r3
 8000820:	f200 80e0 	bhi.w	80009e4 <__udivmoddi4+0x2dc>
 8000824:	46c4      	mov	ip, r8
 8000826:	1a9b      	subs	r3, r3, r2
 8000828:	fbb3 f2fe 	udiv	r2, r3, lr
 800082c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000830:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000834:	fb02 f404 	mul.w	r4, r2, r4
 8000838:	429c      	cmp	r4, r3
 800083a:	d907      	bls.n	800084c <__udivmoddi4+0x144>
 800083c:	18fb      	adds	r3, r7, r3
 800083e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000842:	d202      	bcs.n	800084a <__udivmoddi4+0x142>
 8000844:	429c      	cmp	r4, r3
 8000846:	f200 80ca 	bhi.w	80009de <__udivmoddi4+0x2d6>
 800084a:	4602      	mov	r2, r0
 800084c:	1b1b      	subs	r3, r3, r4
 800084e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000852:	e7a5      	b.n	80007a0 <__udivmoddi4+0x98>
 8000854:	f1c1 0620 	rsb	r6, r1, #32
 8000858:	408b      	lsls	r3, r1
 800085a:	fa22 f706 	lsr.w	r7, r2, r6
 800085e:	431f      	orrs	r7, r3
 8000860:	fa0e f401 	lsl.w	r4, lr, r1
 8000864:	fa20 f306 	lsr.w	r3, r0, r6
 8000868:	fa2e fe06 	lsr.w	lr, lr, r6
 800086c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000870:	4323      	orrs	r3, r4
 8000872:	fa00 f801 	lsl.w	r8, r0, r1
 8000876:	fa1f fc87 	uxth.w	ip, r7
 800087a:	fbbe f0f9 	udiv	r0, lr, r9
 800087e:	0c1c      	lsrs	r4, r3, #16
 8000880:	fb09 ee10 	mls	lr, r9, r0, lr
 8000884:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000888:	fb00 fe0c 	mul.w	lr, r0, ip
 800088c:	45a6      	cmp	lr, r4
 800088e:	fa02 f201 	lsl.w	r2, r2, r1
 8000892:	d909      	bls.n	80008a8 <__udivmoddi4+0x1a0>
 8000894:	193c      	adds	r4, r7, r4
 8000896:	f100 3aff 	add.w	sl, r0, #4294967295
 800089a:	f080 809c 	bcs.w	80009d6 <__udivmoddi4+0x2ce>
 800089e:	45a6      	cmp	lr, r4
 80008a0:	f240 8099 	bls.w	80009d6 <__udivmoddi4+0x2ce>
 80008a4:	3802      	subs	r0, #2
 80008a6:	443c      	add	r4, r7
 80008a8:	eba4 040e 	sub.w	r4, r4, lr
 80008ac:	fa1f fe83 	uxth.w	lr, r3
 80008b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80008b4:	fb09 4413 	mls	r4, r9, r3, r4
 80008b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80008bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80008c0:	45a4      	cmp	ip, r4
 80008c2:	d908      	bls.n	80008d6 <__udivmoddi4+0x1ce>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80008ca:	f080 8082 	bcs.w	80009d2 <__udivmoddi4+0x2ca>
 80008ce:	45a4      	cmp	ip, r4
 80008d0:	d97f      	bls.n	80009d2 <__udivmoddi4+0x2ca>
 80008d2:	3b02      	subs	r3, #2
 80008d4:	443c      	add	r4, r7
 80008d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80008da:	eba4 040c 	sub.w	r4, r4, ip
 80008de:	fba0 ec02 	umull	lr, ip, r0, r2
 80008e2:	4564      	cmp	r4, ip
 80008e4:	4673      	mov	r3, lr
 80008e6:	46e1      	mov	r9, ip
 80008e8:	d362      	bcc.n	80009b0 <__udivmoddi4+0x2a8>
 80008ea:	d05f      	beq.n	80009ac <__udivmoddi4+0x2a4>
 80008ec:	b15d      	cbz	r5, 8000906 <__udivmoddi4+0x1fe>
 80008ee:	ebb8 0203 	subs.w	r2, r8, r3
 80008f2:	eb64 0409 	sbc.w	r4, r4, r9
 80008f6:	fa04 f606 	lsl.w	r6, r4, r6
 80008fa:	fa22 f301 	lsr.w	r3, r2, r1
 80008fe:	431e      	orrs	r6, r3
 8000900:	40cc      	lsrs	r4, r1
 8000902:	e9c5 6400 	strd	r6, r4, [r5]
 8000906:	2100      	movs	r1, #0
 8000908:	e74f      	b.n	80007aa <__udivmoddi4+0xa2>
 800090a:	fbb1 fcf2 	udiv	ip, r1, r2
 800090e:	0c01      	lsrs	r1, r0, #16
 8000910:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000914:	b280      	uxth	r0, r0
 8000916:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800091a:	463b      	mov	r3, r7
 800091c:	4638      	mov	r0, r7
 800091e:	463c      	mov	r4, r7
 8000920:	46b8      	mov	r8, r7
 8000922:	46be      	mov	lr, r7
 8000924:	2620      	movs	r6, #32
 8000926:	fbb1 f1f7 	udiv	r1, r1, r7
 800092a:	eba2 0208 	sub.w	r2, r2, r8
 800092e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000932:	e766      	b.n	8000802 <__udivmoddi4+0xfa>
 8000934:	4601      	mov	r1, r0
 8000936:	e718      	b.n	800076a <__udivmoddi4+0x62>
 8000938:	4610      	mov	r0, r2
 800093a:	e72c      	b.n	8000796 <__udivmoddi4+0x8e>
 800093c:	f1c6 0220 	rsb	r2, r6, #32
 8000940:	fa2e f302 	lsr.w	r3, lr, r2
 8000944:	40b7      	lsls	r7, r6
 8000946:	40b1      	lsls	r1, r6
 8000948:	fa20 f202 	lsr.w	r2, r0, r2
 800094c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000950:	430a      	orrs	r2, r1
 8000952:	fbb3 f8fe 	udiv	r8, r3, lr
 8000956:	b2bc      	uxth	r4, r7
 8000958:	fb0e 3318 	mls	r3, lr, r8, r3
 800095c:	0c11      	lsrs	r1, r2, #16
 800095e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000962:	fb08 f904 	mul.w	r9, r8, r4
 8000966:	40b0      	lsls	r0, r6
 8000968:	4589      	cmp	r9, r1
 800096a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800096e:	b280      	uxth	r0, r0
 8000970:	d93e      	bls.n	80009f0 <__udivmoddi4+0x2e8>
 8000972:	1879      	adds	r1, r7, r1
 8000974:	f108 3cff 	add.w	ip, r8, #4294967295
 8000978:	d201      	bcs.n	800097e <__udivmoddi4+0x276>
 800097a:	4589      	cmp	r9, r1
 800097c:	d81f      	bhi.n	80009be <__udivmoddi4+0x2b6>
 800097e:	eba1 0109 	sub.w	r1, r1, r9
 8000982:	fbb1 f9fe 	udiv	r9, r1, lr
 8000986:	fb09 f804 	mul.w	r8, r9, r4
 800098a:	fb0e 1119 	mls	r1, lr, r9, r1
 800098e:	b292      	uxth	r2, r2
 8000990:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000994:	4542      	cmp	r2, r8
 8000996:	d229      	bcs.n	80009ec <__udivmoddi4+0x2e4>
 8000998:	18ba      	adds	r2, r7, r2
 800099a:	f109 31ff 	add.w	r1, r9, #4294967295
 800099e:	d2c4      	bcs.n	800092a <__udivmoddi4+0x222>
 80009a0:	4542      	cmp	r2, r8
 80009a2:	d2c2      	bcs.n	800092a <__udivmoddi4+0x222>
 80009a4:	f1a9 0102 	sub.w	r1, r9, #2
 80009a8:	443a      	add	r2, r7
 80009aa:	e7be      	b.n	800092a <__udivmoddi4+0x222>
 80009ac:	45f0      	cmp	r8, lr
 80009ae:	d29d      	bcs.n	80008ec <__udivmoddi4+0x1e4>
 80009b0:	ebbe 0302 	subs.w	r3, lr, r2
 80009b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80009b8:	3801      	subs	r0, #1
 80009ba:	46e1      	mov	r9, ip
 80009bc:	e796      	b.n	80008ec <__udivmoddi4+0x1e4>
 80009be:	eba7 0909 	sub.w	r9, r7, r9
 80009c2:	4449      	add	r1, r9
 80009c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80009c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80009cc:	fb09 f804 	mul.w	r8, r9, r4
 80009d0:	e7db      	b.n	800098a <__udivmoddi4+0x282>
 80009d2:	4673      	mov	r3, lr
 80009d4:	e77f      	b.n	80008d6 <__udivmoddi4+0x1ce>
 80009d6:	4650      	mov	r0, sl
 80009d8:	e766      	b.n	80008a8 <__udivmoddi4+0x1a0>
 80009da:	4608      	mov	r0, r1
 80009dc:	e6fd      	b.n	80007da <__udivmoddi4+0xd2>
 80009de:	443b      	add	r3, r7
 80009e0:	3a02      	subs	r2, #2
 80009e2:	e733      	b.n	800084c <__udivmoddi4+0x144>
 80009e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009e8:	443b      	add	r3, r7
 80009ea:	e71c      	b.n	8000826 <__udivmoddi4+0x11e>
 80009ec:	4649      	mov	r1, r9
 80009ee:	e79c      	b.n	800092a <__udivmoddi4+0x222>
 80009f0:	eba1 0109 	sub.w	r1, r1, r9
 80009f4:	46c4      	mov	ip, r8
 80009f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009fa:	fb09 f804 	mul.w	r8, r9, r4
 80009fe:	e7c4      	b.n	800098a <__udivmoddi4+0x282>

08000a00 <__aeabi_idiv0>:
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <Emergency_Stop_System>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Emergency_Stop_System(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
    CANMessage_t emergency_msg;

    printf("🚨 EMERGENCY STOP! SYSTEM SHUTDOWN! 🚨\r\n");
 8000a0a:	4818      	ldr	r0, [pc, #96]	@ (8000a6c <Emergency_Stop_System+0x68>)
 8000a0c:	f00e f9fa 	bl	800ee04 <puts>

    /* BMS'e acil durdurma komutu gönder */
    emergency_msg.id = BMS_EMERGENCY_STOP_ID;
 8000a10:	f240 3307 	movw	r3, #775	@ 0x307
 8000a14:	603b      	str	r3, [r7, #0]
    emergency_msg.dlc = 2;
 8000a16:	2302      	movs	r3, #2
 8000a18:	733b      	strb	r3, [r7, #12]
    emergency_msg.data[0] = 0xFF;  // Emergency Stop Flag
 8000a1a:	23ff      	movs	r3, #255	@ 0xff
 8000a1c:	713b      	strb	r3, [r7, #4]
    emergency_msg.data[1] = 0x00;  // Reserved
 8000a1e:	2300      	movs	r3, #0
 8000a20:	717b      	strb	r3, [r7, #5]

    /* Mesajı derhal gönder */
    xQueueSendToFront(xCanTxQueue, &emergency_msg, 0);
 8000a22:	4b13      	ldr	r3, [pc, #76]	@ (8000a70 <Emergency_Stop_System+0x6c>)
 8000a24:	6818      	ldr	r0, [r3, #0]
 8000a26:	4639      	mov	r1, r7
 8000a28:	2301      	movs	r3, #1
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f00a fb18 	bl	800b060 <xQueueGenericSend>

    /* Hız kontrolünü kapat */
    speed_control.target_speed = 0;
 8000a30:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <Emergency_Stop_System+0x70>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	801a      	strh	r2, [r3, #0]
    speed_control.speed_control_active = 0;
 8000a36:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <Emergency_Stop_System+0x70>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	709a      	strb	r2, [r3, #2]

    /* LED'leri yak - görsel uyarı */
    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2101      	movs	r1, #1
 8000a40:	480d      	ldr	r0, [pc, #52]	@ (8000a78 <Emergency_Stop_System+0x74>)
 8000a42:	f003 ffdf 	bl	8004a04 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000a46:	2201      	movs	r2, #1
 8000a48:	2180      	movs	r1, #128	@ 0x80
 8000a4a:	480b      	ldr	r0, [pc, #44]	@ (8000a78 <Emergency_Stop_System+0x74>)
 8000a4c:	f003 ffda 	bl	8004a04 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a56:	4808      	ldr	r0, [pc, #32]	@ (8000a78 <Emergency_Stop_System+0x74>)
 8000a58:	f003 ffd4 	bl	8004a04 <HAL_GPIO_WritePin>

    printf("BMS Emergency Stop Command Sent!\r\n");
 8000a5c:	4807      	ldr	r0, [pc, #28]	@ (8000a7c <Emergency_Stop_System+0x78>)
 8000a5e:	f00e f9d1 	bl	800ee04 <puts>
}
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	080125ac 	.word	0x080125ac
 8000a70:	20000b6c 	.word	0x20000b6c
 8000a74:	20000a38 	.word	0x20000a38
 8000a78:	40020400 	.word	0x40020400
 8000a7c:	080125d8 	.word	0x080125d8

08000a80 <Check_Emergency_Conditions>:

/* Kritik Durumları Kontrol Et - vSafetyFaultTask içinde kullan */
void Check_Emergency_Conditions(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
    uint8_t emergency_needed = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	71fb      	strb	r3, [r7, #7]

    /* 1. Kritik Sıcaklık Kontrolü */
    if (bms_data.battery_temp > CRITICAL_TEMP_THRESHOLD) {
 8000a8a:	4b27      	ldr	r3, [pc, #156]	@ (8000b28 <Check_Emergency_Conditions+0xa8>)
 8000a8c:	791b      	ldrb	r3, [r3, #4]
 8000a8e:	2b46      	cmp	r3, #70	@ 0x46
 8000a90:	d908      	bls.n	8000aa4 <Check_Emergency_Conditions+0x24>
        printf("🔥 CRITICAL TEMPERATURE: %d°C (Max: %d°C)\r\n",
               bms_data.battery_temp, CRITICAL_TEMP_THRESHOLD);
 8000a92:	4b25      	ldr	r3, [pc, #148]	@ (8000b28 <Check_Emergency_Conditions+0xa8>)
 8000a94:	791b      	ldrb	r3, [r3, #4]
        printf("🔥 CRITICAL TEMPERATURE: %d°C (Max: %d°C)\r\n",
 8000a96:	2246      	movs	r2, #70	@ 0x46
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4824      	ldr	r0, [pc, #144]	@ (8000b2c <Check_Emergency_Conditions+0xac>)
 8000a9c:	f00e f94a 	bl	800ed34 <iprintf>
        emergency_needed = 1;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	71fb      	strb	r3, [r7, #7]
    }

    /* ADC sıcaklıkları da kontrol et */
    for (int i = 0; i < ADC_CHANNELS_COUNT; i++) {
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	e013      	b.n	8000ad2 <Check_Emergency_Conditions+0x52>
        if (temperature_data.adc_temp_values[i] > CRITICAL_TEMP_THRESHOLD) {
 8000aaa:	4a21      	ldr	r2, [pc, #132]	@ (8000b30 <Check_Emergency_Conditions+0xb0>)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ab2:	2b46      	cmp	r3, #70	@ 0x46
 8000ab4:	d90a      	bls.n	8000acc <Check_Emergency_Conditions+0x4c>
            printf("🔥 CRITICAL ADC TEMP[%d]: %d°C\r\n",
                   i, temperature_data.adc_temp_values[i]);
 8000ab6:	4a1e      	ldr	r2, [pc, #120]	@ (8000b30 <Check_Emergency_Conditions+0xb0>)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
            printf("🔥 CRITICAL ADC TEMP[%d]: %d°C\r\n",
 8000abe:	461a      	mov	r2, r3
 8000ac0:	6839      	ldr	r1, [r7, #0]
 8000ac2:	481c      	ldr	r0, [pc, #112]	@ (8000b34 <Check_Emergency_Conditions+0xb4>)
 8000ac4:	f00e f936 	bl	800ed34 <iprintf>
            emergency_needed = 1;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < ADC_CHANNELS_COUNT; i++) {
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	dde8      	ble.n	8000aaa <Check_Emergency_Conditions+0x2a>
        }
    }

    /* 2. Kritik Gerilim Kontrolü */
    if (bms_data.cell_voltage_mv < CRITICAL_CELL_VOLTAGE_MIN) {
 8000ad8:	4b13      	ldr	r3, [pc, #76]	@ (8000b28 <Check_Emergency_Conditions+0xa8>)
 8000ada:	88db      	ldrh	r3, [r3, #6]
 8000adc:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8000ae0:	d209      	bcs.n	8000af6 <Check_Emergency_Conditions+0x76>
        printf("⚡ CRITICAL LOW VOLTAGE: %dmV (Min: %dmV)\r\n",
               bms_data.cell_voltage_mv, CRITICAL_CELL_VOLTAGE_MIN);
 8000ae2:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <Check_Emergency_Conditions+0xa8>)
 8000ae4:	88db      	ldrh	r3, [r3, #6]
        printf("⚡ CRITICAL LOW VOLTAGE: %dmV (Min: %dmV)\r\n",
 8000ae6:	f44f 622f 	mov.w	r2, #2800	@ 0xaf0
 8000aea:	4619      	mov	r1, r3
 8000aec:	4812      	ldr	r0, [pc, #72]	@ (8000b38 <Check_Emergency_Conditions+0xb8>)
 8000aee:	f00e f921 	bl	800ed34 <iprintf>
        emergency_needed = 1;
 8000af2:	2301      	movs	r3, #1
 8000af4:	71fb      	strb	r3, [r7, #7]
    }

    if (bms_data.cell_voltage_mv > CRITICAL_CELL_VOLTAGE_MAX) {
 8000af6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <Check_Emergency_Conditions+0xa8>)
 8000af8:	88db      	ldrh	r3, [r3, #6]
 8000afa:	f241 02cc 	movw	r2, #4300	@ 0x10cc
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d909      	bls.n	8000b16 <Check_Emergency_Conditions+0x96>
        printf("⚡ CRITICAL HIGH VOLTAGE: %dmV (Max: %dmV)\r\n",
               bms_data.cell_voltage_mv, CRITICAL_CELL_VOLTAGE_MAX);
 8000b02:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <Check_Emergency_Conditions+0xa8>)
 8000b04:	88db      	ldrh	r3, [r3, #6]
        printf("⚡ CRITICAL HIGH VOLTAGE: %dmV (Max: %dmV)\r\n",
 8000b06:	f241 02cc 	movw	r2, #4300	@ 0x10cc
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480b      	ldr	r0, [pc, #44]	@ (8000b3c <Check_Emergency_Conditions+0xbc>)
 8000b0e:	f00e f911 	bl	800ed34 <iprintf>
        emergency_needed = 1;
 8000b12:	2301      	movs	r3, #1
 8000b14:	71fb      	strb	r3, [r7, #7]
    }

    /* 3. Eğer kritik durum varsa - DERHAL DURDUR */
    if (emergency_needed) {
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <Check_Emergency_Conditions+0xa0>
        Emergency_Stop_System();
 8000b1c:	f7ff ff72 	bl	8000a04 <Emergency_Stop_System>
    }
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000a3c 	.word	0x20000a3c
 8000b2c:	080125fc 	.word	0x080125fc
 8000b30:	20000a88 	.word	0x20000a88
 8000b34:	0801262c 	.word	0x0801262c
 8000b38:	08012650 	.word	0x08012650
 8000b3c:	08012680 	.word	0x08012680

08000b40 <_write>:

/* Printf redirect için UART */
int _write(int file, char *ptr, int len)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart4, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	f04f 33ff 	mov.w	r3, #4294967295
 8000b54:	68b9      	ldr	r1, [r7, #8]
 8000b56:	4804      	ldr	r0, [pc, #16]	@ (8000b68 <_write+0x28>)
 8000b58:	f005 fafd 	bl	8006156 <HAL_UART_Transmit>
    return len;
 8000b5c:	687b      	ldr	r3, [r7, #4]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000324 	.word	0x20000324

08000b6c <vLightDetectTask>:

void vLightDetectTask(void *pvParameters)
{
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b08b      	sub	sp, #44	@ 0x2c
 8000b70:	af02      	add	r7, sp, #8
 8000b72:	6078      	str	r0, [r7, #4]
    LightData_t temp_light_data;
    uint8_t previous_darkness_state = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	77fb      	strb	r3, [r7, #31]

    /* Initialize light data */
    light_data.darkness_threshold = DARKNESS_THRESHOLD_DEFAULT;
 8000b78:	4b55      	ldr	r3, [pc, #340]	@ (8000cd0 <vLightDetectTask+0x164>)
 8000b7a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000b7e:	609a      	str	r2, [r3, #8]
    light_data.darkness_detected = 0;
 8000b80:	4b53      	ldr	r3, [pc, #332]	@ (8000cd0 <vLightDetectTask+0x164>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	719a      	strb	r2, [r3, #6]

    /* PE5 pinini başlangıçta kapalı tut */
    HAL_GPIO_WritePin(DARKNESS_PIN_GPIO_Port, DARKNESS_PIN_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2120      	movs	r1, #32
 8000b8a:	4852      	ldr	r0, [pc, #328]	@ (8000cd4 <vLightDetectTask+0x168>)
 8000b8c:	f003 ff3a 	bl	8004a04 <HAL_GPIO_WritePin>

    for(;;) {
        /* TEMT6000 sensörlerini oku */
        temp_light_data.temt6000_1_value = Read_Light_Sensor(TEMT6000_1_CHANNEL);
 8000b90:	2006      	movs	r0, #6
 8000b92:	f000 f8b3 	bl	8000cfc <Read_Light_Sensor>
 8000b96:	4603      	mov	r3, r0
 8000b98:	81bb      	strh	r3, [r7, #12]
        temp_light_data.temt6000_2_value = Read_Light_Sensor(TEMT6000_2_CHANNEL);
 8000b9a:	2007      	movs	r0, #7
 8000b9c:	f000 f8ae 	bl	8000cfc <Read_Light_Sensor>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	81fb      	strh	r3, [r7, #14]

        /* Ortalama ışık değerini hesapla */
        temp_light_data.average_light_value = (temp_light_data.temt6000_1_value +
 8000ba4:	89bb      	ldrh	r3, [r7, #12]
 8000ba6:	461a      	mov	r2, r3
                                               temp_light_data.temt6000_2_value) / 2;
 8000ba8:	89fb      	ldrh	r3, [r7, #14]
        temp_light_data.average_light_value = (temp_light_data.temt6000_1_value +
 8000baa:	4413      	add	r3, r2
                                               temp_light_data.temt6000_2_value) / 2;
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	da00      	bge.n	8000bb2 <vLightDetectTask+0x46>
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	105b      	asrs	r3, r3, #1
        temp_light_data.average_light_value = (temp_light_data.temt6000_1_value +
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	823b      	strh	r3, [r7, #16]

        temp_light_data.timestamp = HAL_GetTick();
 8000bb8:	f002 fb0a 	bl	80031d0 <HAL_GetTick>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	61bb      	str	r3, [r7, #24]

        /* Karanlık algılama (histerezis ile) */
        if (!light_data.darkness_detected) {
 8000bc0:	4b43      	ldr	r3, [pc, #268]	@ (8000cd0 <vLightDetectTask+0x164>)
 8000bc2:	799b      	ldrb	r3, [r3, #6]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d108      	bne.n	8000bda <vLightDetectTask+0x6e>
            /* Karanlık değilken, eşik değerinin altına düşerse karanlık olarak algıla */
            if (temp_light_data.average_light_value < light_data.darkness_threshold) {
 8000bc8:	8a3b      	ldrh	r3, [r7, #16]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4b40      	ldr	r3, [pc, #256]	@ (8000cd0 <vLightDetectTask+0x164>)
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d20b      	bcs.n	8000bec <vLightDetectTask+0x80>
                temp_light_data.darkness_detected = 1;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	74bb      	strb	r3, [r7, #18]
 8000bd8:	e008      	b.n	8000bec <vLightDetectTask+0x80>
            }
        } else {
            /* Karanlıkken, eşik + histerezis değerinin üstüne çıkarsa aydınlık olarak algıla */
            if (temp_light_data.average_light_value > (light_data.darkness_threshold + LIGHT_HYSTERESIS)) {
 8000bda:	8a3b      	ldrh	r3, [r7, #16]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b3c      	ldr	r3, [pc, #240]	@ (8000cd0 <vLightDetectTask+0x164>)
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	3364      	adds	r3, #100	@ 0x64
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d901      	bls.n	8000bec <vLightDetectTask+0x80>
                temp_light_data.darkness_detected = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	74bb      	strb	r3, [r7, #18]
            }
        }

        /* Durum değişimi kontrolü */
        if (temp_light_data.darkness_detected != previous_darkness_state) {
 8000bec:	7cbb      	ldrb	r3, [r7, #18]
 8000bee:	7ffa      	ldrb	r2, [r7, #31]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d029      	beq.n	8000c48 <vLightDetectTask+0xdc>

            /* PE5 pinini güncelle */
            if (temp_light_data.darkness_detected) {
 8000bf4:	7cbb      	ldrb	r3, [r7, #18]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d012      	beq.n	8000c20 <vLightDetectTask+0xb4>
                /* Karanlık algılandı - PE5'i aktif et */
                HAL_GPIO_WritePin(DARKNESS_PIN_GPIO_Port, DARKNESS_PIN_Pin, GPIO_PIN_SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2120      	movs	r1, #32
 8000bfe:	4835      	ldr	r0, [pc, #212]	@ (8000cd4 <vLightDetectTask+0x168>)
 8000c00:	f003 ff00 	bl	8004a04 <HAL_GPIO_WritePin>

                printf("Darkness detected! Light level: %d (T1:%d, T2:%d)\r\n",
                       temp_light_data.average_light_value,
 8000c04:	8a3b      	ldrh	r3, [r7, #16]
                printf("Darkness detected! Light level: %d (T1:%d, T2:%d)\r\n",
 8000c06:	4619      	mov	r1, r3
                       temp_light_data.temt6000_1_value,
 8000c08:	89bb      	ldrh	r3, [r7, #12]
                printf("Darkness detected! Light level: %d (T1:%d, T2:%d)\r\n",
 8000c0a:	461a      	mov	r2, r3
                       temp_light_data.temt6000_2_value);
 8000c0c:	89fb      	ldrh	r3, [r7, #14]
                printf("Darkness detected! Light level: %d (T1:%d, T2:%d)\r\n",
 8000c0e:	4832      	ldr	r0, [pc, #200]	@ (8000cd8 <vLightDetectTask+0x16c>)
 8000c10:	f00e f890 	bl	800ed34 <iprintf>

                /* LED'leri yak (opsiyonel - görsel feedback) */
                HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	2101      	movs	r1, #1
 8000c18:	4830      	ldr	r0, [pc, #192]	@ (8000cdc <vLightDetectTask+0x170>)
 8000c1a:	f003 fef3 	bl	8004a04 <HAL_GPIO_WritePin>
 8000c1e:	e011      	b.n	8000c44 <vLightDetectTask+0xd8>

            } else {
                /* Aydınlık algılandı - PE5'i deaktif et */
                HAL_GPIO_WritePin(DARKNESS_PIN_GPIO_Port, DARKNESS_PIN_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2120      	movs	r1, #32
 8000c24:	482b      	ldr	r0, [pc, #172]	@ (8000cd4 <vLightDetectTask+0x168>)
 8000c26:	f003 feed 	bl	8004a04 <HAL_GPIO_WritePin>

                printf("Light detected! Light level: %d (T1:%d, T2:%d)\r\n",
                       temp_light_data.average_light_value,
 8000c2a:	8a3b      	ldrh	r3, [r7, #16]
                printf("Light detected! Light level: %d (T1:%d, T2:%d)\r\n",
 8000c2c:	4619      	mov	r1, r3
                       temp_light_data.temt6000_1_value,
 8000c2e:	89bb      	ldrh	r3, [r7, #12]
                printf("Light detected! Light level: %d (T1:%d, T2:%d)\r\n",
 8000c30:	461a      	mov	r2, r3
                       temp_light_data.temt6000_2_value);
 8000c32:	89fb      	ldrh	r3, [r7, #14]
                printf("Light detected! Light level: %d (T1:%d, T2:%d)\r\n",
 8000c34:	482a      	ldr	r0, [pc, #168]	@ (8000ce0 <vLightDetectTask+0x174>)
 8000c36:	f00e f87d 	bl	800ed34 <iprintf>

                /* LED'leri söndür (opsiyonel) */
                HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	4827      	ldr	r0, [pc, #156]	@ (8000cdc <vLightDetectTask+0x170>)
 8000c40:	f003 fee0 	bl	8004a04 <HAL_GPIO_WritePin>
            }

            previous_darkness_state = temp_light_data.darkness_detected;
 8000c44:	7cbb      	ldrb	r3, [r7, #18]
 8000c46:	77fb      	strb	r3, [r7, #31]
        }

        /* Global light data'yı güncelle */
        if (xSemaphoreTake(xVehicleDataMutex, pdMS_TO_TICKS(50)) == pdPASS) {
 8000c48:	4b26      	ldr	r3, [pc, #152]	@ (8000ce4 <vLightDetectTask+0x178>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2132      	movs	r1, #50	@ 0x32
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f00a fd34 	bl	800b6bc <xQueueSemaphoreTake>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d10d      	bne.n	8000c76 <vLightDetectTask+0x10a>
            memcpy(&light_data, &temp_light_data, sizeof(LightData_t));
 8000c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <vLightDetectTask+0x164>)
 8000c5c:	461c      	mov	r4, r3
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            xSemaphoreGive(xVehicleDataMutex);
 8000c68:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce4 <vLightDetectTask+0x178>)
 8000c6a:	6818      	ldr	r0, [r3, #0]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	f00a f9f5 	bl	800b060 <xQueueGenericSend>
        }

        /* Light data'yı queue'ya gönder (diğer task'lar için) */
        xQueueOverwrite(xLightDataQueue, &temp_light_data);
 8000c76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce8 <vLightDetectTask+0x17c>)
 8000c78:	6818      	ldr	r0, [r3, #0]
 8000c7a:	f107 010c 	add.w	r1, r7, #12
 8000c7e:	2302      	movs	r3, #2
 8000c80:	2200      	movs	r2, #0
 8000c82:	f00a f9ed 	bl	800b060 <xQueueGenericSend>

        /* Her 10 saniyede bir debug çıktısı */
        static uint32_t last_debug_time = 0;
        if ((HAL_GetTick() - last_debug_time) > 10000) {
 8000c86:	f002 faa3 	bl	80031d0 <HAL_GetTick>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <vLightDetectTask+0x180>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d915      	bls.n	8000cc6 <vLightDetectTask+0x15a>
            printf("Light Status - Avg:%d, T1:%d, T2:%d, Dark:%s\r\n",
                   temp_light_data.average_light_value,
 8000c9a:	8a3b      	ldrh	r3, [r7, #16]
            printf("Light Status - Avg:%d, T1:%d, T2:%d, Dark:%s\r\n",
 8000c9c:	4619      	mov	r1, r3
                   temp_light_data.temt6000_1_value,
 8000c9e:	89bb      	ldrh	r3, [r7, #12]
            printf("Light Status - Avg:%d, T1:%d, T2:%d, Dark:%s\r\n",
 8000ca0:	461a      	mov	r2, r3
                   temp_light_data.temt6000_2_value,
 8000ca2:	89fb      	ldrh	r3, [r7, #14]
            printf("Light Status - Avg:%d, T1:%d, T2:%d, Dark:%s\r\n",
 8000ca4:	4618      	mov	r0, r3
                   temp_light_data.darkness_detected ? "YES" : "NO");
 8000ca6:	7cbb      	ldrb	r3, [r7, #18]
            printf("Light Status - Avg:%d, T1:%d, T2:%d, Dark:%s\r\n",
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <vLightDetectTask+0x144>
 8000cac:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <vLightDetectTask+0x184>)
 8000cae:	e000      	b.n	8000cb2 <vLightDetectTask+0x146>
 8000cb0:	4b10      	ldr	r3, [pc, #64]	@ (8000cf4 <vLightDetectTask+0x188>)
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	4810      	ldr	r0, [pc, #64]	@ (8000cf8 <vLightDetectTask+0x18c>)
 8000cb8:	f00e f83c 	bl	800ed34 <iprintf>
            last_debug_time = HAL_GetTick();
 8000cbc:	f002 fa88 	bl	80031d0 <HAL_GetTick>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cec <vLightDetectTask+0x180>)
 8000cc4:	6013      	str	r3, [r2, #0]
        }

        /* 2 saniye bekle - Işık algılama yavaş bir işlem olabilir */
        vTaskDelay(pdMS_TO_TICKS(2000));
 8000cc6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000cca:	f00b fa1b 	bl	800c104 <vTaskDelay>
    for(;;) {
 8000cce:	e75f      	b.n	8000b90 <vLightDetectTask+0x24>
 8000cd0:	20001090 	.word	0x20001090
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	080126b0 	.word	0x080126b0
 8000cdc:	40020400 	.word	0x40020400
 8000ce0:	080126e4 	.word	0x080126e4
 8000ce4:	20000b98 	.word	0x20000b98
 8000ce8:	20000b94 	.word	0x20000b94
 8000cec:	200010a0 	.word	0x200010a0
 8000cf0:	08012718 	.word	0x08012718
 8000cf4:	0801271c 	.word	0x0801271c
 8000cf8:	08012720 	.word	0x08012720

08000cfc <Read_Light_Sensor>:




uint16_t Read_Light_Sensor(uint32_t channel)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
    uint32_t adc_value = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]

    /* Configure the selected ADC channel */
    sConfig.Channel = channel;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = 1;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000d1e:	2307      	movs	r3, #7
 8000d20:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	4619      	mov	r1, r3
 8000d28:	4811      	ldr	r0, [pc, #68]	@ (8000d70 <Read_Light_Sensor+0x74>)
 8000d2a:	f002 fc5f 	bl	80035ec <HAL_ADC_ConfigChannel>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <Read_Light_Sensor+0x3c>
        return 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	e017      	b.n	8000d68 <Read_Light_Sensor+0x6c>
    }

    /* Start ADC conversion */
    HAL_ADC_Start(&hadc1);
 8000d38:	480d      	ldr	r0, [pc, #52]	@ (8000d70 <Read_Light_Sensor+0x74>)
 8000d3a:	f002 fabd 	bl	80032b8 <HAL_ADC_Start>

    /* Wait for conversion to complete */
    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8000d3e:	2164      	movs	r1, #100	@ 0x64
 8000d40:	480b      	ldr	r0, [pc, #44]	@ (8000d70 <Read_Light_Sensor+0x74>)
 8000d42:	f002 fbbb 	bl	80034bc <HAL_ADC_PollForConversion>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d104      	bne.n	8000d56 <Read_Light_Sensor+0x5a>
        adc_value = HAL_ADC_GetValue(&hadc1);
 8000d4c:	4808      	ldr	r0, [pc, #32]	@ (8000d70 <Read_Light_Sensor+0x74>)
 8000d4e:	f002 fc40 	bl	80035d2 <HAL_ADC_GetValue>
 8000d52:	61f8      	str	r0, [r7, #28]
 8000d54:	e003      	b.n	8000d5e <Read_Light_Sensor+0x62>
    } else {
        printf("Light sensor ADC timeout for channel %lu\r\n", channel);
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	4806      	ldr	r0, [pc, #24]	@ (8000d74 <Read_Light_Sensor+0x78>)
 8000d5a:	f00d ffeb 	bl	800ed34 <iprintf>
    }

    HAL_ADC_Stop(&hadc1);
 8000d5e:	4804      	ldr	r0, [pc, #16]	@ (8000d70 <Read_Light_Sensor+0x74>)
 8000d60:	f002 fb78 	bl	8003454 <HAL_ADC_Stop>
    return (uint16_t)adc_value;
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	b29b      	uxth	r3, r3
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3720      	adds	r7, #32
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000208 	.word	0x20000208
 8000d74:	08012750 	.word	0x08012750

08000d78 <Read_ADC_Temperature>:


/* ADC Temperature Reading Function */
uint16_t Read_ADC_Temperature(uint32_t channel)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000d80:	f107 0308 	add.w	r3, r7, #8
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
    uint32_t adc_value;
    uint16_t temperature;

    /* Configure the selected ADC channel */
    switch(channel) {
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d00f      	beq.n	8000db4 <Read_ADC_Temperature+0x3c>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d80f      	bhi.n	8000dba <Read_ADC_Temperature+0x42>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d003      	beq.n	8000da8 <Read_ADC_Temperature+0x30>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d003      	beq.n	8000dae <Read_ADC_Temperature+0x36>
 8000da6:	e008      	b.n	8000dba <Read_ADC_Temperature+0x42>
        case 0: // PC0 → ADC_CHANNEL_10
            sConfig.Channel = ADC_CHANNEL_10;
 8000da8:	230a      	movs	r3, #10
 8000daa:	60bb      	str	r3, [r7, #8]
            break;
 8000dac:	e007      	b.n	8000dbe <Read_ADC_Temperature+0x46>
        case 1: // PC2 → ADC_CHANNEL_12
            sConfig.Channel = ADC_CHANNEL_12;
 8000dae:	230c      	movs	r3, #12
 8000db0:	60bb      	str	r3, [r7, #8]
            break;
 8000db2:	e004      	b.n	8000dbe <Read_ADC_Temperature+0x46>
        case 2: // PA0 → ADC_CHANNEL_0
            sConfig.Channel = ADC_CHANNEL_0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
            break;
 8000db8:	e001      	b.n	8000dbe <Read_ADC_Temperature+0x46>
        default:
            return 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e031      	b.n	8000e22 <Read_ADC_Temperature+0xaa>
    }

    sConfig.Rank = 1;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000dc2:	2307      	movs	r3, #7
 8000dc4:	613b      	str	r3, [r7, #16]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000dc6:	f107 0308 	add.w	r3, r7, #8
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4817      	ldr	r0, [pc, #92]	@ (8000e2c <Read_ADC_Temperature+0xb4>)
 8000dce:	f002 fc0d 	bl	80035ec <HAL_ADC_ConfigChannel>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <Read_ADC_Temperature+0x64>
        return 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	e022      	b.n	8000e22 <Read_ADC_Temperature+0xaa>
    }

    /* Start ADC conversion */
    HAL_ADC_Start(&hadc1);
 8000ddc:	4813      	ldr	r0, [pc, #76]	@ (8000e2c <Read_ADC_Temperature+0xb4>)
 8000dde:	f002 fa6b 	bl	80032b8 <HAL_ADC_Start>

    /* Wait for conversion to complete */
    if (HAL_ADC_PollForConversion(&hadc1, 200) == HAL_OK) {
 8000de2:	21c8      	movs	r1, #200	@ 0xc8
 8000de4:	4811      	ldr	r0, [pc, #68]	@ (8000e2c <Read_ADC_Temperature+0xb4>)
 8000de6:	f002 fb69 	bl	80034bc <HAL_ADC_PollForConversion>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d10e      	bne.n	8000e0e <Read_ADC_Temperature+0x96>
        adc_value = HAL_ADC_GetValue(&hadc1);
 8000df0:	480e      	ldr	r0, [pc, #56]	@ (8000e2c <Read_ADC_Temperature+0xb4>)
 8000df2:	f002 fbee 	bl	80035d2 <HAL_ADC_GetValue>
 8000df6:	61b8      	str	r0, [r7, #24]

        /* Convert ADC value to temperature */
        /* For LM35: Vout = 10mV/°C, VREF = 3.3V, ADC = 12-bit */
        temperature = (adc_value * 3300) / (4096 * 10);
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000dfe:	fb02 f303 	mul.w	r3, r2, r3
 8000e02:	4a0b      	ldr	r2, [pc, #44]	@ (8000e30 <Read_ADC_Temperature+0xb8>)
 8000e04:	fba2 2303 	umull	r2, r3, r2, r3
 8000e08:	0bdb      	lsrs	r3, r3, #15
 8000e0a:	83fb      	strh	r3, [r7, #30]
 8000e0c:	e005      	b.n	8000e1a <Read_ADC_Temperature+0xa2>

    } else {
        temperature = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	83fb      	strh	r3, [r7, #30]
        printf("ADC Conversion timeout for channel %lu\r\n", channel);
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	4807      	ldr	r0, [pc, #28]	@ (8000e34 <Read_ADC_Temperature+0xbc>)
 8000e16:	f00d ff8d 	bl	800ed34 <iprintf>
    }

    HAL_ADC_Stop(&hadc1);
 8000e1a:	4804      	ldr	r0, [pc, #16]	@ (8000e2c <Read_ADC_Temperature+0xb4>)
 8000e1c:	f002 fb1a 	bl	8003454 <HAL_ADC_Stop>
    return temperature;
 8000e20:	8bfb      	ldrh	r3, [r7, #30]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3720      	adds	r7, #32
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000208 	.word	0x20000208
 8000e30:	cccccccd 	.word	0xcccccccd
 8000e34:	0801277c 	.word	0x0801277c

08000e38 <HAL_UART_RxCpltCallback>:
    }
}

/* UART7 RX Interrupt Callback */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b089      	sub	sp, #36	@ 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
    if(huart->Instance == UART7)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a1e      	ldr	r2, [pc, #120]	@ (8000ec0 <HAL_UART_RxCpltCallback+0x88>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d135      	bne.n	8000eb6 <HAL_UART_RxCpltCallback+0x7e>
    {
        uart7_rx_index++;
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec4 <HAL_UART_RxCpltCallback+0x8c>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	3301      	adds	r3, #1
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec4 <HAL_UART_RxCpltCallback+0x8c>)
 8000e56:	701a      	strb	r2, [r3, #0]

        /* Tam paket alındı mı kontrol et */
        if(uart7_rx_index >= GPS_PACKET_SIZE)
 8000e58:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <HAL_UART_RxCpltCallback+0x8c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b0f      	cmp	r3, #15
 8000e60:	d91e      	bls.n	8000ea0 <HAL_UART_RxCpltCallback+0x68>
        {
            UART7_GPSPacket_t gps_packet;
            BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]

            /* Buffer'dan paketi kopyala */
            memcpy(&gps_packet, uart7_rx_buffer, GPS_PACKET_SIZE);
 8000e66:	4b18      	ldr	r3, [pc, #96]	@ (8000ec8 <HAL_UART_RxCpltCallback+0x90>)
 8000e68:	f107 0410 	add.w	r4, r7, #16
 8000e6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

            /* Queue'ya gönder (interrupt'tan) */
            xQueueSendFromISR(xUART7GPSQueue, &gps_packet, &xHigherPriorityTaskWoken);
 8000e72:	4b16      	ldr	r3, [pc, #88]	@ (8000ecc <HAL_UART_RxCpltCallback+0x94>)
 8000e74:	6818      	ldr	r0, [r3, #0]
 8000e76:	f107 020c 	add.w	r2, r7, #12
 8000e7a:	f107 0110 	add.w	r1, r7, #16
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f00a f9f8 	bl	800b274 <xQueueGenericSendFromISR>

            /* Buffer'ı sıfırla */
            uart7_rx_index = 0;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <HAL_UART_RxCpltCallback+0x8c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	701a      	strb	r2, [r3, #0]

            /* Task switch gerekirse yap */
            portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d007      	beq.n	8000ea0 <HAL_UART_RxCpltCallback+0x68>
 8000e90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <HAL_UART_RxCpltCallback+0x98>)
 8000e92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	f3bf 8f4f 	dsb	sy
 8000e9c:	f3bf 8f6f 	isb	sy
        }

        /* Bir sonraki byte için RX'i yeniden başlat */
        HAL_UART_Receive_IT(&huart7, &uart7_rx_buffer[uart7_rx_index], 1);
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <HAL_UART_RxCpltCallback+0x8c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <HAL_UART_RxCpltCallback+0x90>)
 8000eaa:	4413      	add	r3, r2
 8000eac:	2201      	movs	r2, #1
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4808      	ldr	r0, [pc, #32]	@ (8000ed4 <HAL_UART_RxCpltCallback+0x9c>)
 8000eb2:	f005 f9d9 	bl	8006268 <HAL_UART_Receive_IT>
    }
}
 8000eb6:	bf00      	nop
 8000eb8:	3724      	adds	r7, #36	@ 0x24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd90      	pop	{r4, r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40007800 	.word	0x40007800
 8000ec4:	20000b40 	.word	0x20000b40
 8000ec8:	20000ac0 	.word	0x20000ac0
 8000ecc:	20000b90 	.word	0x20000b90
 8000ed0:	e000ed04 	.word	0xe000ed04
 8000ed4:	20000434 	.word	0x20000434

08000ed8 <HAL_UART_ErrorCallback>:

/* UART7 Error Callback */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
    if(huart->Instance == UART7)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a16      	ldr	r2, [pc, #88]	@ (8000f40 <HAL_UART_ErrorCallback+0x68>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d125      	bne.n	8000f36 <HAL_UART_ErrorCallback+0x5e>
    {
        /* Hata durumunda RX'i yeniden başlat */
        uart7_rx_index = 0;
 8000eea:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <HAL_UART_ErrorCallback+0x6c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart7, &uart7_rx_buffer[uart7_rx_index], 1);
 8000ef0:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <HAL_UART_ErrorCallback+0x6c>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <HAL_UART_ErrorCallback+0x70>)
 8000efa:	4413      	add	r3, r2
 8000efc:	2201      	movs	r2, #1
 8000efe:	4619      	mov	r1, r3
 8000f00:	4812      	ldr	r0, [pc, #72]	@ (8000f4c <HAL_UART_ErrorCallback+0x74>)
 8000f02:	f005 f9b1 	bl	8006268 <HAL_UART_Receive_IT>

        /* Hata sayacı */
        static uint32_t uart7_error_count = 0;
        uart7_error_count++;
 8000f06:	4b12      	ldr	r3, [pc, #72]	@ (8000f50 <HAL_UART_ErrorCallback+0x78>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	4a10      	ldr	r2, [pc, #64]	@ (8000f50 <HAL_UART_ErrorCallback+0x78>)
 8000f0e:	6013      	str	r3, [r2, #0]

        if ((uart7_error_count % 10) == 0) {
 8000f10:	4b0f      	ldr	r3, [pc, #60]	@ (8000f50 <HAL_UART_ErrorCallback+0x78>)
 8000f12:	6819      	ldr	r1, [r3, #0]
 8000f14:	4b0f      	ldr	r3, [pc, #60]	@ (8000f54 <HAL_UART_ErrorCallback+0x7c>)
 8000f16:	fba3 2301 	umull	r2, r3, r3, r1
 8000f1a:	08da      	lsrs	r2, r3, #3
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	1aca      	subs	r2, r1, r3
 8000f26:	2a00      	cmp	r2, #0
 8000f28:	d105      	bne.n	8000f36 <HAL_UART_ErrorCallback+0x5e>
            printf("UART7 Error Count: %lu\r\n", uart7_error_count);
 8000f2a:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <HAL_UART_ErrorCallback+0x78>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4809      	ldr	r0, [pc, #36]	@ (8000f58 <HAL_UART_ErrorCallback+0x80>)
 8000f32:	f00d feff 	bl	800ed34 <iprintf>
        }
    }
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40007800 	.word	0x40007800
 8000f44:	20000b40 	.word	0x20000b40
 8000f48:	20000ac0 	.word	0x20000ac0
 8000f4c:	20000434 	.word	0x20000434
 8000f50:	200010a4 	.word	0x200010a4
 8000f54:	cccccccd 	.word	0xcccccccd
 8000f58:	080127a8 	.word	0x080127a8

08000f5c <vUART7TelemetryTask>:

/* ======= UART7 TELEMETRİ TASK (Basitleştirilmiş) ======= */
void vUART7TelemetryTask(void *pvParameters)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b089      	sub	sp, #36	@ 0x24
 8000f60:	af02      	add	r7, sp, #8
 8000f62:	6078      	str	r0, [r7, #4]
    UART7_TelemetryPacket_t telemetry_packet;

    for(;;) {
        /* Telemetri verilerini hazırla */
        if (xSemaphoreTake(xVehicleDataMutex, pdMS_TO_TICKS(100)) == pdPASS) {
 8000f64:	4b29      	ldr	r3, [pc, #164]	@ (800100c <vUART7TelemetryTask+0xb0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2164      	movs	r1, #100	@ 0x64
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f00a fba6 	bl	800b6bc <xQueueSemaphoreTake>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d117      	bne.n	8000fa6 <vUART7TelemetryTask+0x4a>

            /* Telemetri paketini doldur */
            telemetry_packet.zaman_ms = HAL_GetTick();
 8000f76:	f002 f92b 	bl	80031d0 <HAL_GetTick>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	60bb      	str	r3, [r7, #8]
            telemetry_packet.hiz_kmh = telemetry_data.current_speed_kmh;
 8000f7e:	4b24      	ldr	r3, [pc, #144]	@ (8001010 <vUART7TelemetryTask+0xb4>)
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	81bb      	strh	r3, [r7, #12]
            telemetry_packet.T_bat_C = bms_data.battery_temp;
 8000f84:	4b23      	ldr	r3, [pc, #140]	@ (8001014 <vUART7TelemetryTask+0xb8>)
 8000f86:	791b      	ldrb	r3, [r3, #4]
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	81fb      	strh	r3, [r7, #14]
            telemetry_packet.V_bat_mV = bms_data.battery_voltage_mv;
 8000f8c:	4b21      	ldr	r3, [pc, #132]	@ (8001014 <vUART7TelemetryTask+0xb8>)
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	823b      	strh	r3, [r7, #16]
            telemetry_packet.kalan_enerji_wh = telemetry_data.remaining_energy_wh;
 8000f92:	4b1f      	ldr	r3, [pc, #124]	@ (8001010 <vUART7TelemetryTask+0xb4>)
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	617b      	str	r3, [r7, #20]

            xSemaphoreGive(xVehicleDataMutex);
 8000f98:	4b1c      	ldr	r3, [pc, #112]	@ (800100c <vUART7TelemetryTask+0xb0>)
 8000f9a:	6818      	ldr	r0, [r3, #0]
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	f00a f85d 	bl	800b060 <xQueueGenericSend>
        }

        /* UART7 TX mutex'ini al */
        if (xSemaphoreTake(xUART7TxMutex, pdMS_TO_TICKS(50)) == pdPASS) {
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001018 <vUART7TelemetryTask+0xbc>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2132      	movs	r1, #50	@ 0x32
 8000fac:	4618      	mov	r0, r3
 8000fae:	f00a fb85 	bl	800b6bc <xQueueSemaphoreTake>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d124      	bne.n	8001002 <vUART7TelemetryTask+0xa6>
            /* UART7 üzerinden telemetri paketini gönder */
            if (HAL_UART_Transmit(&huart7, (uint8_t*)&telemetry_packet,
 8000fb8:	f107 0108 	add.w	r1, r7, #8
 8000fbc:	2364      	movs	r3, #100	@ 0x64
 8000fbe:	2210      	movs	r2, #16
 8000fc0:	4816      	ldr	r0, [pc, #88]	@ (800101c <vUART7TelemetryTask+0xc0>)
 8000fc2:	f005 f8c8 	bl	8006156 <HAL_UART_Transmit>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <vUART7TelemetryTask+0x78>
                                 sizeof(UART7_TelemetryPacket_t), 100) != HAL_OK) {
                printf("UART7 Telemetry transmission failed!\r\n");
 8000fcc:	4814      	ldr	r0, [pc, #80]	@ (8001020 <vUART7TelemetryTask+0xc4>)
 8000fce:	f00d ff19 	bl	800ee04 <puts>
 8000fd2:	e00f      	b.n	8000ff4 <vUART7TelemetryTask+0x98>
            } else {
                printf("UART7 Tel sent: T=%lu, S=%d, Tmp=%d, V=%d, E=%lu\r\n",
 8000fd4:	68b9      	ldr	r1, [r7, #8]
                       telemetry_packet.zaman_ms,
                       telemetry_packet.hiz_kmh,
 8000fd6:	89bb      	ldrh	r3, [r7, #12]
                printf("UART7 Tel sent: T=%lu, S=%d, Tmp=%d, V=%d, E=%lu\r\n",
 8000fd8:	4618      	mov	r0, r3
                       telemetry_packet.T_bat_C,
 8000fda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
                printf("UART7 Tel sent: T=%lu, S=%d, Tmp=%d, V=%d, E=%lu\r\n",
 8000fde:	461c      	mov	r4, r3
                       telemetry_packet.V_bat_mV,
 8000fe0:	8a3b      	ldrh	r3, [r7, #16]
                printf("UART7 Tel sent: T=%lu, S=%d, Tmp=%d, V=%d, E=%lu\r\n",
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	9200      	str	r2, [sp, #0]
 8000fea:	4623      	mov	r3, r4
 8000fec:	4602      	mov	r2, r0
 8000fee:	480d      	ldr	r0, [pc, #52]	@ (8001024 <vUART7TelemetryTask+0xc8>)
 8000ff0:	f00d fea0 	bl	800ed34 <iprintf>
                       telemetry_packet.kalan_enerji_wh);
            }
            xSemaphoreGive(xUART7TxMutex);
 8000ff4:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <vUART7TelemetryTask+0xbc>)
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	f00a f82f 	bl	800b060 <xQueueGenericSend>
        }

        /* 1 saniye bekle (1Hz telemetri frekansı) */
        vTaskDelay(pdMS_TO_TICKS(1000));
 8001002:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001006:	f00b f87d 	bl	800c104 <vTaskDelay>
        if (xSemaphoreTake(xVehicleDataMutex, pdMS_TO_TICKS(100)) == pdPASS) {
 800100a:	e7ab      	b.n	8000f64 <vUART7TelemetryTask+0x8>
 800100c:	20000b98 	.word	0x20000b98
 8001010:	20000a94 	.word	0x20000a94
 8001014:	20000a3c 	.word	0x20000a3c
 8001018:	20000b9c 	.word	0x20000b9c
 800101c:	20000434 	.word	0x20000434
 8001020:	080127c4 	.word	0x080127c4
 8001024:	080127ec 	.word	0x080127ec

08001028 <vUART7GPSTask>:
    }
}

/* ======= UART7 GPS TASK (Basitleştirilmiş) ======= */
void vUART7GPSTask(void *pvParameters)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08c      	sub	sp, #48	@ 0x30
 800102c:	af04      	add	r7, sp, #16
 800102e:	6078      	str	r0, [r7, #4]
    UART7_GPSPacket_t gps_packet;
    uint32_t last_receive_time = HAL_GetTick();
 8001030:	f002 f8ce 	bl	80031d0 <HAL_GetTick>
 8001034:	61f8      	str	r0, [r7, #28]

    /* UART7 RX interrupt'ı başlat */
    HAL_UART_Receive_IT(&huart7, &uart7_rx_buffer[uart7_rx_index], 1);
 8001036:	4b42      	ldr	r3, [pc, #264]	@ (8001140 <vUART7GPSTask+0x118>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	4b41      	ldr	r3, [pc, #260]	@ (8001144 <vUART7GPSTask+0x11c>)
 8001040:	4413      	add	r3, r2
 8001042:	2201      	movs	r2, #1
 8001044:	4619      	mov	r1, r3
 8001046:	4840      	ldr	r0, [pc, #256]	@ (8001148 <vUART7GPSTask+0x120>)
 8001048:	f005 f90e 	bl	8006268 <HAL_UART_Receive_IT>

    for(;;) {
        /* GPS queue'dan veri kontrol et */
        if (xQueueReceive(xUART7GPSQueue, &gps_packet, pdMS_TO_TICKS(100)) == pdTRUE) {
 800104c:	4b3f      	ldr	r3, [pc, #252]	@ (800114c <vUART7GPSTask+0x124>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f107 010c 	add.w	r1, r7, #12
 8001054:	2264      	movs	r2, #100	@ 0x64
 8001056:	4618      	mov	r0, r3
 8001058:	f00a fa48 	bl	800b4ec <xQueueReceive>
 800105c:	4603      	mov	r3, r0
 800105e:	2b01      	cmp	r3, #1
 8001060:	d137      	bne.n	80010d2 <vUART7GPSTask+0xaa>

            /* GPS verilerini güncelle */
            if (xSemaphoreTake(xVehicleDataMutex, pdMS_TO_TICKS(100)) == pdPASS) {
 8001062:	4b3b      	ldr	r3, [pc, #236]	@ (8001150 <vUART7GPSTask+0x128>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2164      	movs	r1, #100	@ 0x64
 8001068:	4618      	mov	r0, r3
 800106a:	f00a fb27 	bl	800b6bc <xQueueSemaphoreTake>
 800106e:	4603      	mov	r3, r0
 8001070:	2b01      	cmp	r3, #1
 8001072:	d12b      	bne.n	80010cc <vUART7GPSTask+0xa4>
                gps_data.latitude = gps_packet.enlem;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4a37      	ldr	r2, [pc, #220]	@ (8001154 <vUART7GPSTask+0x12c>)
 8001078:	6013      	str	r3, [r2, #0]
                gps_data.longitude = gps_packet.boylam;
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	4a35      	ldr	r2, [pc, #212]	@ (8001154 <vUART7GPSTask+0x12c>)
 800107e:	6053      	str	r3, [r2, #4]
                gps_data.connection_problem = gps_packet.sorun_durumu;
 8001080:	7d3a      	ldrb	r2, [r7, #20]
 8001082:	4b34      	ldr	r3, [pc, #208]	@ (8001154 <vUART7GPSTask+0x12c>)
 8001084:	721a      	strb	r2, [r3, #8]
                gps_data.gps_timestamp = gps_packet.gps_zaman;
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	4a32      	ldr	r2, [pc, #200]	@ (8001154 <vUART7GPSTask+0x12c>)
 800108a:	60d3      	str	r3, [r2, #12]
                gps_data.gps_data_valid = 1;
 800108c:	4b31      	ldr	r3, [pc, #196]	@ (8001154 <vUART7GPSTask+0x12c>)
 800108e:	2201      	movs	r2, #1
 8001090:	741a      	strb	r2, [r3, #16]
                gps_data.last_gps_receive_time = HAL_GetTick();
 8001092:	f002 f89d 	bl	80031d0 <HAL_GetTick>
 8001096:	4603      	mov	r3, r0
 8001098:	4a2e      	ldr	r2, [pc, #184]	@ (8001154 <vUART7GPSTask+0x12c>)
 800109a:	6153      	str	r3, [r2, #20]

                xSemaphoreGive(xVehicleDataMutex);
 800109c:	4b2c      	ldr	r3, [pc, #176]	@ (8001150 <vUART7GPSTask+0x128>)
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	2300      	movs	r3, #0
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	f009 ffdb 	bl	800b060 <xQueueGenericSend>

                printf("GPS: Lat=%.6f, Lon=%.6f, Prob=%d\r\n",
                       gps_packet.enlem, gps_packet.boylam, gps_packet.sorun_durumu);
 80010aa:	edd7 7a03 	vldr	s15, [r7, #12]
                printf("GPS: Lat=%.6f, Lon=%.6f, Prob=%d\r\n",
 80010ae:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
                       gps_packet.enlem, gps_packet.boylam, gps_packet.sorun_durumu);
 80010b2:	edd7 7a04 	vldr	s15, [r7, #16]
                printf("GPS: Lat=%.6f, Lon=%.6f, Prob=%d\r\n",
 80010b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                       gps_packet.enlem, gps_packet.boylam, gps_packet.sorun_durumu);
 80010ba:	7d3b      	ldrb	r3, [r7, #20]
                printf("GPS: Lat=%.6f, Lon=%.6f, Prob=%d\r\n",
 80010bc:	9302      	str	r3, [sp, #8]
 80010be:	ed8d 7b00 	vstr	d7, [sp]
 80010c2:	ec53 2b16 	vmov	r2, r3, d6
 80010c6:	4824      	ldr	r0, [pc, #144]	@ (8001158 <vUART7GPSTask+0x130>)
 80010c8:	f00d fe34 	bl	800ed34 <iprintf>
            }

            last_receive_time = HAL_GetTick();
 80010cc:	f002 f880 	bl	80031d0 <HAL_GetTick>
 80010d0:	61f8      	str	r0, [r7, #28]
        }

        /* GPS timeout kontrolü (5 saniye) */
        if ((HAL_GetTick() - last_receive_time) > 5000) {
 80010d2:	f002 f87d 	bl	80031d0 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d927      	bls.n	8001134 <vUART7GPSTask+0x10c>
            if (xSemaphoreTake(xVehicleDataMutex, pdMS_TO_TICKS(50)) == pdPASS) {
 80010e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <vUART7GPSTask+0x128>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2132      	movs	r1, #50	@ 0x32
 80010ea:	4618      	mov	r0, r3
 80010ec:	f00a fae6 	bl	800b6bc <xQueueSemaphoreTake>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d10c      	bne.n	8001110 <vUART7GPSTask+0xe8>
                gps_data.connection_problem = 1;
 80010f6:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <vUART7GPSTask+0x12c>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	721a      	strb	r2, [r3, #8]
                gps_data.gps_data_valid = 0;
 80010fc:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <vUART7GPSTask+0x12c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	741a      	strb	r2, [r3, #16]
                xSemaphoreGive(xVehicleDataMutex);
 8001102:	4b13      	ldr	r3, [pc, #76]	@ (8001150 <vUART7GPSTask+0x128>)
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	2300      	movs	r3, #0
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	f009 ffa8 	bl	800b060 <xQueueGenericSend>
            }

            /* Her 5 saniyede bir timeout mesajı */
            static uint32_t last_timeout_msg = 0;
            if ((HAL_GetTick() - last_timeout_msg) > 5000) {
 8001110:	f002 f85e 	bl	80031d0 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <vUART7GPSTask+0x134>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001120:	4293      	cmp	r3, r2
 8001122:	d907      	bls.n	8001134 <vUART7GPSTask+0x10c>
                printf("GPS Connection timeout!\r\n");
 8001124:	480e      	ldr	r0, [pc, #56]	@ (8001160 <vUART7GPSTask+0x138>)
 8001126:	f00d fe6d 	bl	800ee04 <puts>
                last_timeout_msg = HAL_GetTick();
 800112a:	f002 f851 	bl	80031d0 <HAL_GetTick>
 800112e:	4603      	mov	r3, r0
 8001130:	4a0a      	ldr	r2, [pc, #40]	@ (800115c <vUART7GPSTask+0x134>)
 8001132:	6013      	str	r3, [r2, #0]
            }
        }

        /* 500ms periyot */
        vTaskDelay(pdMS_TO_TICKS(500));
 8001134:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001138:	f00a ffe4 	bl	800c104 <vTaskDelay>
        if (xQueueReceive(xUART7GPSQueue, &gps_packet, pdMS_TO_TICKS(100)) == pdTRUE) {
 800113c:	e786      	b.n	800104c <vUART7GPSTask+0x24>
 800113e:	bf00      	nop
 8001140:	20000b40 	.word	0x20000b40
 8001144:	20000ac0 	.word	0x20000ac0
 8001148:	20000434 	.word	0x20000434
 800114c:	20000b90 	.word	0x20000b90
 8001150:	20000b98 	.word	0x20000b98
 8001154:	20000aa8 	.word	0x20000aa8
 8001158:	08012820 	.word	0x08012820
 800115c:	200010a8 	.word	0x200010a8
 8001160:	08012844 	.word	0x08012844

08001164 <vTelemetryTask>:
    }
}

/* ======= TELEMETRİ TASK ======= */
void vTelemetryTask(void *pvParameters)
{
 8001164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001166:	b0b3      	sub	sp, #204	@ 0xcc
 8001168:	af08      	add	r7, sp, #32
 800116a:	6078      	str	r0, [r7, #4]
    char telemetry_buffer[128];
    TelemetryData_t temp_telemetry;

    for(;;) {
        /* Telemetri verilerini hazırla */
        if (xSemaphoreTake(xVehicleDataMutex, pdMS_TO_TICKS(100)) == pdPASS) {
 800116c:	4b49      	ldr	r3, [pc, #292]	@ (8001294 <vTelemetryTask+0x130>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2164      	movs	r1, #100	@ 0x64
 8001172:	4618      	mov	r0, r3
 8001174:	f00a faa2 	bl	800b6bc <xQueueSemaphoreTake>
 8001178:	4603      	mov	r3, r0
 800117a:	2b01      	cmp	r3, #1
 800117c:	d14e      	bne.n	800121c <vTelemetryTask+0xb8>

            /* Mevcut hız (motor RPM'den km/h'ye çevirme) */
            temp_telemetry.current_speed_kmh = speed_control.target_speed;  // Hedef hız kullan
 800117e:	4b46      	ldr	r3, [pc, #280]	@ (8001298 <vTelemetryTask+0x134>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	81bb      	strh	r3, [r7, #12]

            /* Ortalama sıcaklık hesapla (4 sensör: BMS + 3 ADC) */
            int16_t total_temp = temperature_data.bms_temperature +
 8001184:	4b45      	ldr	r3, [pc, #276]	@ (800129c <vTelemetryTask+0x138>)
 8001186:	88da      	ldrh	r2, [r3, #6]
                                temperature_data.adc_temp_values[0] +
 8001188:	4b44      	ldr	r3, [pc, #272]	@ (800129c <vTelemetryTask+0x138>)
 800118a:	881b      	ldrh	r3, [r3, #0]
            int16_t total_temp = temperature_data.bms_temperature +
 800118c:	4413      	add	r3, r2
 800118e:	b29a      	uxth	r2, r3
                                temperature_data.adc_temp_values[1] +
 8001190:	4b42      	ldr	r3, [pc, #264]	@ (800129c <vTelemetryTask+0x138>)
 8001192:	885b      	ldrh	r3, [r3, #2]
                                temperature_data.adc_temp_values[0] +
 8001194:	4413      	add	r3, r2
 8001196:	b29a      	uxth	r2, r3
                                temperature_data.adc_temp_values[2];
 8001198:	4b40      	ldr	r3, [pc, #256]	@ (800129c <vTelemetryTask+0x138>)
 800119a:	889b      	ldrh	r3, [r3, #4]
                                temperature_data.adc_temp_values[1] +
 800119c:	4413      	add	r3, r2
 800119e:	b29b      	uxth	r3, r3
            int16_t total_temp = temperature_data.bms_temperature +
 80011a0:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
            temp_telemetry.average_temperature_c = total_temp / 4;
 80011a4:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	da00      	bge.n	80011ae <vTelemetryTask+0x4a>
 80011ac:	3303      	adds	r3, #3
 80011ae:	109b      	asrs	r3, r3, #2
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	81fb      	strh	r3, [r7, #14]

            /* Batarya gerilimi */
            temp_telemetry.battery_voltage_mv = bms_data.battery_voltage_mv;
 80011b4:	4b3a      	ldr	r3, [pc, #232]	@ (80012a0 <vTelemetryTask+0x13c>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	823b      	strh	r3, [r7, #16]

            /* Kalan şarj yüzdesi */
            temp_telemetry.battery_soc_percent = bms_data.soc_percent;
 80011ba:	4b39      	ldr	r3, [pc, #228]	@ (80012a0 <vTelemetryTask+0x13c>)
 80011bc:	795b      	ldrb	r3, [r3, #5]
 80011be:	74bb      	strb	r3, [r7, #18]

            /* Kalan enerji hesapla (basit hesaplama: SOC * nominal kapasite) */
            /* Örnek: 50kWh batarya paketi varsayımı */
            temp_telemetry.remaining_energy_wh = (uint32_t)(bms_data.soc_percent * 500);  // 50000Wh * SOC%
 80011c0:	4b37      	ldr	r3, [pc, #220]	@ (80012a0 <vTelemetryTask+0x13c>)
 80011c2:	795b      	ldrb	r3, [r3, #5]
 80011c4:	461a      	mov	r2, r3
 80011c6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80011ca:	fb02 f303 	mul.w	r3, r2, r3
 80011ce:	617b      	str	r3, [r7, #20]

            /* Hata durumu bayrakları */
            temp_telemetry.temperature_fault = safety_fault.temperature_fault_active;
 80011d0:	4b34      	ldr	r3, [pc, #208]	@ (80012a4 <vTelemetryTask+0x140>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	763b      	strb	r3, [r7, #24]
            temp_telemetry.voltage_fault = safety_fault.cell_voltage_fault_active;
 80011d6:	4b33      	ldr	r3, [pc, #204]	@ (80012a4 <vTelemetryTask+0x140>)
 80011d8:	795b      	ldrb	r3, [r3, #5]
 80011da:	767b      	strb	r3, [r7, #25]
            temp_telemetry.energy_low_fault = safety_fault.soc_low_warning_active || safety_fault.soc_critical_warning_active;
 80011dc:	4b31      	ldr	r3, [pc, #196]	@ (80012a4 <vTelemetryTask+0x140>)
 80011de:	799b      	ldrb	r3, [r3, #6]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d103      	bne.n	80011ec <vTelemetryTask+0x88>
 80011e4:	4b2f      	ldr	r3, [pc, #188]	@ (80012a4 <vTelemetryTask+0x140>)
 80011e6:	79db      	ldrb	r3, [r3, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <vTelemetryTask+0x8c>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e000      	b.n	80011f2 <vTelemetryTask+0x8e>
 80011f0:	2300      	movs	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	76bb      	strb	r3, [r7, #26]

            temp_telemetry.timestamp = HAL_GetTick();
 80011f6:	f001 ffeb 	bl	80031d0 <HAL_GetTick>
 80011fa:	4603      	mov	r3, r0
 80011fc:	61fb      	str	r3, [r7, #28]

            /* Global telemetri verilerini güncelle */
            memcpy(&telemetry_data, &temp_telemetry, sizeof(TelemetryData_t));
 80011fe:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <vTelemetryTask+0x144>)
 8001200:	461d      	mov	r5, r3
 8001202:	f107 040c 	add.w	r4, r7, #12
 8001206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800120a:	6823      	ldr	r3, [r4, #0]
 800120c:	602b      	str	r3, [r5, #0]

            xSemaphoreGive(xVehicleDataMutex);
 800120e:	4b21      	ldr	r3, [pc, #132]	@ (8001294 <vTelemetryTask+0x130>)
 8001210:	6818      	ldr	r0, [r3, #0]
 8001212:	2300      	movs	r3, #0
 8001214:	2200      	movs	r2, #0
 8001216:	2100      	movs	r1, #0
 8001218:	f009 ff22 	bl	800b060 <xQueueGenericSend>

        /* UART4 üzerinden telemetri verilerini gönder */
        /* Format: SPEED,TEMP,VOLTAGE,SOC,ENERGY,T_FAULT,V_FAULT,E_FAULT\r\n */
        int len = snprintf(telemetry_buffer, sizeof(telemetry_buffer),
                          "%d,%d,%d,%d,%lu,%d,%d,%d\r\n",
                          temp_telemetry.current_speed_kmh,
 800121c:	89bb      	ldrh	r3, [r7, #12]
        int len = snprintf(telemetry_buffer, sizeof(telemetry_buffer),
 800121e:	469c      	mov	ip, r3
                          temp_telemetry.average_temperature_c,
 8001220:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
        int len = snprintf(telemetry_buffer, sizeof(telemetry_buffer),
 8001224:	461a      	mov	r2, r3
                          temp_telemetry.battery_voltage_mv,
 8001226:	8a3b      	ldrh	r3, [r7, #16]
        int len = snprintf(telemetry_buffer, sizeof(telemetry_buffer),
 8001228:	4619      	mov	r1, r3
                          temp_telemetry.battery_soc_percent,
 800122a:	7cbb      	ldrb	r3, [r7, #18]
        int len = snprintf(telemetry_buffer, sizeof(telemetry_buffer),
 800122c:	461c      	mov	r4, r3
 800122e:	697b      	ldr	r3, [r7, #20]
                          temp_telemetry.remaining_energy_wh,
                          temp_telemetry.temperature_fault,
 8001230:	7e38      	ldrb	r0, [r7, #24]
        int len = snprintf(telemetry_buffer, sizeof(telemetry_buffer),
 8001232:	4605      	mov	r5, r0
                          temp_telemetry.voltage_fault,
 8001234:	7e78      	ldrb	r0, [r7, #25]
        int len = snprintf(telemetry_buffer, sizeof(telemetry_buffer),
 8001236:	4606      	mov	r6, r0
                          temp_telemetry.energy_low_fault);
 8001238:	7eb8      	ldrb	r0, [r7, #26]
        int len = snprintf(telemetry_buffer, sizeof(telemetry_buffer),
 800123a:	f107 0e20 	add.w	lr, r7, #32
 800123e:	9006      	str	r0, [sp, #24]
 8001240:	9605      	str	r6, [sp, #20]
 8001242:	9504      	str	r5, [sp, #16]
 8001244:	9303      	str	r3, [sp, #12]
 8001246:	9402      	str	r4, [sp, #8]
 8001248:	9101      	str	r1, [sp, #4]
 800124a:	9200      	str	r2, [sp, #0]
 800124c:	4663      	mov	r3, ip
 800124e:	4a17      	ldr	r2, [pc, #92]	@ (80012ac <vTelemetryTask+0x148>)
 8001250:	2180      	movs	r1, #128	@ 0x80
 8001252:	4670      	mov	r0, lr
 8001254:	f00d fdde 	bl	800ee14 <sniprintf>
 8001258:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

        /* UART4 ile gönder */
        if (HAL_UART_Transmit(&huart4, (uint8_t*)telemetry_buffer, len, 100) != HAL_OK) {
 800125c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001260:	b29a      	uxth	r2, r3
 8001262:	f107 0120 	add.w	r1, r7, #32
 8001266:	2364      	movs	r3, #100	@ 0x64
 8001268:	4811      	ldr	r0, [pc, #68]	@ (80012b0 <vTelemetryTask+0x14c>)
 800126a:	f004 ff74 	bl	8006156 <HAL_UART_Transmit>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <vTelemetryTask+0x116>
            printf("Telemetry UART4 transmission failed!\r\n");
 8001274:	480f      	ldr	r0, [pc, #60]	@ (80012b4 <vTelemetryTask+0x150>)
 8001276:	f00d fdc5 	bl	800ee04 <puts>
        }

        /* Telemetri queue'ya da gönder (gelecekte kullanım için) */
        xQueueOverwrite(xTelemetryDataQueue, &temp_telemetry);
 800127a:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <vTelemetryTask+0x154>)
 800127c:	6818      	ldr	r0, [r3, #0]
 800127e:	f107 010c 	add.w	r1, r7, #12
 8001282:	2302      	movs	r3, #2
 8001284:	2200      	movs	r2, #0
 8001286:	f009 feeb 	bl	800b060 <xQueueGenericSend>

        /* 1 saniye bekle (1Hz telemetri frekansı) */
        vTaskDelay(pdMS_TO_TICKS(1000));
 800128a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800128e:	f00a ff39 	bl	800c104 <vTaskDelay>
    for(;;) {
 8001292:	e76b      	b.n	800116c <vTelemetryTask+0x8>
 8001294:	20000b98 	.word	0x20000b98
 8001298:	20000a38 	.word	0x20000a38
 800129c:	20000a88 	.word	0x20000a88
 80012a0:	20000a3c 	.word	0x20000a3c
 80012a4:	20000a68 	.word	0x20000a68
 80012a8:	20000a94 	.word	0x20000a94
 80012ac:	08012860 	.word	0x08012860
 80012b0:	20000324 	.word	0x20000324
 80012b4:	0801287c 	.word	0x0801287c
 80012b8:	20000b84 	.word	0x20000b84

080012bc <vSafetyFaultTask>:
    }
}

/* Safety/Fault Task */
void vSafetyFaultTask(void *pvParameters)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b093      	sub	sp, #76	@ 0x4c
 80012c0:	af0a      	add	r7, sp, #40	@ 0x28
 80012c2:	6078      	str	r0, [r7, #4]
    TemperatureData_t temp_data;
    static uint8_t emergency_stopped = 0;  // Bir kez durdur

    for(;;) {
        /* ADC sıcaklık okumalarını yap */
        for (int i = 0; i < ADC_CHANNELS_COUNT; i++) {
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
 80012c8:	e00e      	b.n	80012e8 <vSafetyFaultTask+0x2c>
            temp_data.adc_temp_values[i] = Read_ADC_Temperature(i);
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fd53 	bl	8000d78 <Read_ADC_Temperature>
 80012d2:	4603      	mov	r3, r0
 80012d4:	461a      	mov	r2, r3
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	3320      	adds	r3, #32
 80012dc:	443b      	add	r3, r7
 80012de:	f823 2c18 	strh.w	r2, [r3, #-24]
        for (int i = 0; i < ADC_CHANNELS_COUNT; i++) {
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3301      	adds	r3, #1
 80012e6:	61fb      	str	r3, [r7, #28]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	dded      	ble.n	80012ca <vSafetyFaultTask+0xe>
        }

        /* BMS sıcaklık verisini al */
        if (xSemaphoreTake(xVehicleDataMutex, pdMS_TO_TICKS(50)) == pdPASS) {
 80012ee:	4ba1      	ldr	r3, [pc, #644]	@ (8001574 <vSafetyFaultTask+0x2b8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2132      	movs	r1, #50	@ 0x32
 80012f4:	4618      	mov	r0, r3
 80012f6:	f00a f9e1 	bl	800b6bc <xQueueSemaphoreTake>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d121      	bne.n	8001344 <vSafetyFaultTask+0x88>
        	 temp_data.bms_temperature = bms_data.battery_temp;
 8001300:	4b9d      	ldr	r3, [pc, #628]	@ (8001578 <vSafetyFaultTask+0x2bc>)
 8001302:	791b      	ldrb	r3, [r3, #4]
 8001304:	81fb      	strh	r3, [r7, #14]

        	            /* ===== EMERGENCY CHECK - EN ÖNEMLİ KISIM ===== */
        	 if (!emergency_stopped) {
 8001306:	4b9d      	ldr	r3, [pc, #628]	@ (800157c <vSafetyFaultTask+0x2c0>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d113      	bne.n	8001336 <vSafetyFaultTask+0x7a>
               Check_Emergency_Conditions();
 800130e:	f7ff fbb7 	bl	8000a80 <Check_Emergency_Conditions>
               /* Eğer emergency durumu varsa, bir daha kontrol etme */
             if (bms_data.battery_temp > CRITICAL_TEMP_THRESHOLD ||
 8001312:	4b99      	ldr	r3, [pc, #612]	@ (8001578 <vSafetyFaultTask+0x2bc>)
 8001314:	791b      	ldrb	r3, [r3, #4]
 8001316:	2b46      	cmp	r3, #70	@ 0x46
 8001318:	d80a      	bhi.n	8001330 <vSafetyFaultTask+0x74>
            		 bms_data.cell_voltage_mv < CRITICAL_CELL_VOLTAGE_MIN ||
 800131a:	4b97      	ldr	r3, [pc, #604]	@ (8001578 <vSafetyFaultTask+0x2bc>)
 800131c:	88db      	ldrh	r3, [r3, #6]
             if (bms_data.battery_temp > CRITICAL_TEMP_THRESHOLD ||
 800131e:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8001322:	d305      	bcc.n	8001330 <vSafetyFaultTask+0x74>
					 bms_data.cell_voltage_mv > CRITICAL_CELL_VOLTAGE_MAX) {
 8001324:	4b94      	ldr	r3, [pc, #592]	@ (8001578 <vSafetyFaultTask+0x2bc>)
 8001326:	88db      	ldrh	r3, [r3, #6]
            		 bms_data.cell_voltage_mv < CRITICAL_CELL_VOLTAGE_MIN ||
 8001328:	f241 02cc 	movw	r2, #4300	@ 0x10cc
 800132c:	4293      	cmp	r3, r2
 800132e:	d902      	bls.n	8001336 <vSafetyFaultTask+0x7a>
        	                    emergency_stopped = 1;
 8001330:	4b92      	ldr	r3, [pc, #584]	@ (800157c <vSafetyFaultTask+0x2c0>)
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
        	                }
        	            }

        	            xSemaphoreGive(xVehicleDataMutex);
 8001336:	4b8f      	ldr	r3, [pc, #572]	@ (8001574 <vSafetyFaultTask+0x2b8>)
 8001338:	6818      	ldr	r0, [r3, #0]
 800133a:	2300      	movs	r3, #0
 800133c:	2200      	movs	r2, #0
 800133e:	2100      	movs	r1, #0
 8001340:	f009 fe8e 	bl	800b060 <xQueueGenericSend>
        }

        temp_data.timestamp = HAL_GetTick();
 8001344:	f001 ff44 	bl	80031d0 <HAL_GetTick>
 8001348:	4603      	mov	r3, r0
 800134a:	613b      	str	r3, [r7, #16]

        /* ======= FAULT DETECTION LOGIC ======= */

        /* 1. Temperature Fault Check */
        uint8_t temp_fault_detected = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	76fb      	strb	r3, [r7, #27]
        safety_fault.temperature_fault_active = 0;
 8001350:	4b8b      	ldr	r3, [pc, #556]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]

        /* BMS sıcaklık kontrolü */
        if (temp_data.bms_temperature > safety_fault.temperature_threshold) {
 8001356:	89fa      	ldrh	r2, [r7, #14]
 8001358:	4b89      	ldr	r3, [pc, #548]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 800135a:	8a1b      	ldrh	r3, [r3, #16]
 800135c:	429a      	cmp	r2, r3
 800135e:	d904      	bls.n	800136a <vSafetyFaultTask+0xae>
            safety_fault.temperature_fault_active = 1;
 8001360:	4b87      	ldr	r3, [pc, #540]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 8001362:	2201      	movs	r2, #1
 8001364:	701a      	strb	r2, [r3, #0]
            temp_fault_detected = 1;
 8001366:	2301      	movs	r3, #1
 8001368:	76fb      	strb	r3, [r7, #27]
        }

        /* ADC sıcaklık kontrolleri */
        for (int i = 0; i < ADC_CHANNELS_COUNT; i++) {
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	e011      	b.n	8001394 <vSafetyFaultTask+0xd8>
            if (temp_data.adc_temp_values[i] > safety_fault.temperature_threshold) {
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	3320      	adds	r3, #32
 8001376:	443b      	add	r3, r7
 8001378:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800137c:	4b80      	ldr	r3, [pc, #512]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 800137e:	8a1b      	ldrh	r3, [r3, #16]
 8001380:	429a      	cmp	r2, r3
 8001382:	d904      	bls.n	800138e <vSafetyFaultTask+0xd2>
                safety_fault.temperature_fault_active = 1;
 8001384:	4b7e      	ldr	r3, [pc, #504]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 8001386:	2201      	movs	r2, #1
 8001388:	701a      	strb	r2, [r3, #0]
                temp_fault_detected = 1;
 800138a:	2301      	movs	r3, #1
 800138c:	76fb      	strb	r3, [r7, #27]
        for (int i = 0; i < ADC_CHANNELS_COUNT; i++) {
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	3301      	adds	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	2b02      	cmp	r3, #2
 8001398:	ddea      	ble.n	8001370 <vSafetyFaultTask+0xb4>
            }
        }

        /* 2. Motor Fault Check - Motor data timeout veya anormal değerler */
        if ((HAL_GetTick() - motor_data.timestamp) > 5000) {  // 5 saniye timeout
 800139a:	f001 ff19 	bl	80031d0 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	4b78      	ldr	r3, [pc, #480]	@ (8001584 <vSafetyFaultTask+0x2c8>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d903      	bls.n	80013b6 <vSafetyFaultTask+0xfa>
            safety_fault.motor_fault_active = 1;
 80013ae:	4b74      	ldr	r3, [pc, #464]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	705a      	strb	r2, [r3, #1]
 80013b4:	e002      	b.n	80013bc <vSafetyFaultTask+0x100>
        } else {
            safety_fault.motor_fault_active = 0;
 80013b6:	4b72      	ldr	r3, [pc, #456]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	705a      	strb	r2, [r3, #1]
        }

        /* 3. BMS Fault Check - BMS data timeout */
        if ((HAL_GetTick() - bms_data.timestamp) > 5000) {  // 5 saniye timeout
 80013bc:	f001 ff08 	bl	80031d0 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4b6d      	ldr	r3, [pc, #436]	@ (8001578 <vSafetyFaultTask+0x2bc>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d903      	bls.n	80013d8 <vSafetyFaultTask+0x11c>
            safety_fault.bms_fault_active = 1;
 80013d0:	4b6b      	ldr	r3, [pc, #428]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	709a      	strb	r2, [r3, #2]
 80013d6:	e002      	b.n	80013de <vSafetyFaultTask+0x122>
        } else {
            safety_fault.bms_fault_active = 0;
 80013d8:	4b69      	ldr	r3, [pc, #420]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 80013da:	2200      	movs	r2, #0
 80013dc:	709a      	strb	r2, [r3, #2]
        }

        /* 4. İzolasyon Fault Check - İzolasyon değerleri ve timeout kontrolü */
        if ((HAL_GetTick() - isolation_data.timestamp) > 5000) {  // 5 saniye timeout
 80013de:	f001 fef7 	bl	80031d0 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	4b68      	ldr	r3, [pc, #416]	@ (8001588 <vSafetyFaultTask+0x2cc>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d903      	bls.n	80013fa <vSafetyFaultTask+0x13e>
            safety_fault.isolation_fault_active = 1;
 80013f2:	4b63      	ldr	r3, [pc, #396]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	70da      	strb	r2, [r3, #3]
 80013f8:	e016      	b.n	8001428 <vSafetyFaultTask+0x16c>
        } else {
            /* İzolasyon direnç kontrolü - düşük direnç tehlikeli */
            if (isolation_data.resistance_ohm < safety_fault.isolation_resistance_threshold) {
 80013fa:	4b63      	ldr	r3, [pc, #396]	@ (8001588 <vSafetyFaultTask+0x2cc>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	4b60      	ldr	r3, [pc, #384]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	429a      	cmp	r2, r3
 8001404:	d203      	bcs.n	800140e <vSafetyFaultTask+0x152>
                safety_fault.isolation_fault_active = 1;
 8001406:	4b5e      	ldr	r3, [pc, #376]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 8001408:	2201      	movs	r2, #1
 800140a:	70da      	strb	r2, [r3, #3]
 800140c:	e00c      	b.n	8001428 <vSafetyFaultTask+0x16c>
            }
            /* İzolasyon kapasitans kontrolü - yüksek kapasitans tehlikeli */
            else if (isolation_data.capacitance_nf > safety_fault.isolation_capacitance_threshold) {
 800140e:	4b5e      	ldr	r3, [pc, #376]	@ (8001588 <vSafetyFaultTask+0x2cc>)
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	4b5b      	ldr	r3, [pc, #364]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	429a      	cmp	r2, r3
 8001418:	d903      	bls.n	8001422 <vSafetyFaultTask+0x166>
                safety_fault.isolation_fault_active = 1;
 800141a:	4b59      	ldr	r3, [pc, #356]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 800141c:	2201      	movs	r2, #1
 800141e:	70da      	strb	r2, [r3, #3]
 8001420:	e002      	b.n	8001428 <vSafetyFaultTask+0x16c>
            }
            else {
                safety_fault.isolation_fault_active = 0;
 8001422:	4b57      	ldr	r3, [pc, #348]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 8001424:	2200      	movs	r2, #0
 8001426:	70da      	strb	r2, [r3, #3]
            }
        }

        /* 5. Şarj Cihazı Fault Check - Şarj cihazı data timeout */
        if ((HAL_GetTick() - charger_data.timestamp) > 5000) {  // 5 saniye timeout
 8001428:	f001 fed2 	bl	80031d0 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	4b57      	ldr	r3, [pc, #348]	@ (800158c <vSafetyFaultTask+0x2d0>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001438:	4293      	cmp	r3, r2
 800143a:	d903      	bls.n	8001444 <vSafetyFaultTask+0x188>
            safety_fault.charger_fault_active = 1;
 800143c:	4b50      	ldr	r3, [pc, #320]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 800143e:	2201      	movs	r2, #1
 8001440:	711a      	strb	r2, [r3, #4]
 8001442:	e002      	b.n	800144a <vSafetyFaultTask+0x18e>
        } else {
            safety_fault.charger_fault_active = 0;
 8001444:	4b4e      	ldr	r3, [pc, #312]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 8001446:	2200      	movs	r2, #0
 8001448:	711a      	strb	r2, [r3, #4]
        }

        /* 6. Batarya Hücre Gerilim Kontrolü */
        if (xSemaphoreTake(xVehicleDataMutex, pdMS_TO_TICKS(50)) == pdPASS) {
 800144a:	4b4a      	ldr	r3, [pc, #296]	@ (8001574 <vSafetyFaultTask+0x2b8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2132      	movs	r1, #50	@ 0x32
 8001450:	4618      	mov	r0, r3
 8001452:	f00a f933 	bl	800b6bc <xQueueSemaphoreTake>
 8001456:	4603      	mov	r3, r0
 8001458:	2b01      	cmp	r3, #1
 800145a:	d12e      	bne.n	80014ba <vSafetyFaultTask+0x1fe>
            /* Hücre gerilimi 3.0V - 4.2V aralığında olmalı */
            if (bms_data.cell_voltage_mv < CELL_VOLTAGE_MIN_THRESHOLD ||
 800145c:	4b46      	ldr	r3, [pc, #280]	@ (8001578 <vSafetyFaultTask+0x2bc>)
 800145e:	88db      	ldrh	r3, [r3, #6]
 8001460:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001464:	4293      	cmp	r3, r2
 8001466:	d905      	bls.n	8001474 <vSafetyFaultTask+0x1b8>
                bms_data.cell_voltage_mv > CELL_VOLTAGE_MAX_THRESHOLD) {
 8001468:	4b43      	ldr	r3, [pc, #268]	@ (8001578 <vSafetyFaultTask+0x2bc>)
 800146a:	88db      	ldrh	r3, [r3, #6]
            if (bms_data.cell_voltage_mv < CELL_VOLTAGE_MIN_THRESHOLD ||
 800146c:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001470:	4293      	cmp	r3, r2
 8001472:	d914      	bls.n	800149e <vSafetyFaultTask+0x1e2>

                if (!safety_fault.cell_voltage_fault_active) {
 8001474:	4b42      	ldr	r3, [pc, #264]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 8001476:	795b      	ldrb	r3, [r3, #5]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d117      	bne.n	80014ac <vSafetyFaultTask+0x1f0>
                    safety_fault.cell_voltage_fault_active = 1;
 800147c:	4b40      	ldr	r3, [pc, #256]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 800147e:	2201      	movs	r2, #1
 8001480:	715a      	strb	r2, [r3, #5]

                    /* Hücre gerilim hatası durumunda hızı düşür */
                    if (bms_data.cell_voltage_mv < CELL_VOLTAGE_MIN_THRESHOLD) {
 8001482:	4b3d      	ldr	r3, [pc, #244]	@ (8001578 <vSafetyFaultTask+0x2bc>)
 8001484:	88db      	ldrh	r3, [r3, #6]
 8001486:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800148a:	4293      	cmp	r3, r2
 800148c:	d803      	bhi.n	8001496 <vSafetyFaultTask+0x1da>
                        speed_control.target_speed = 20;  // Düşük gerilim: 20 km/h limit
 800148e:	4b40      	ldr	r3, [pc, #256]	@ (8001590 <vSafetyFaultTask+0x2d4>)
 8001490:	2214      	movs	r2, #20
 8001492:	801a      	strh	r2, [r3, #0]
                if (!safety_fault.cell_voltage_fault_active) {
 8001494:	e00a      	b.n	80014ac <vSafetyFaultTask+0x1f0>
                    } else {
                        speed_control.target_speed = 30;  // Yüksek gerilim: 30 km/h limit
 8001496:	4b3e      	ldr	r3, [pc, #248]	@ (8001590 <vSafetyFaultTask+0x2d4>)
 8001498:	221e      	movs	r2, #30
 800149a:	801a      	strh	r2, [r3, #0]
                if (!safety_fault.cell_voltage_fault_active) {
 800149c:	e006      	b.n	80014ac <vSafetyFaultTask+0x1f0>
                    }
                }
            } else {
                if (safety_fault.cell_voltage_fault_active) {
 800149e:	4b38      	ldr	r3, [pc, #224]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 80014a0:	795b      	ldrb	r3, [r3, #5]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d002      	beq.n	80014ac <vSafetyFaultTask+0x1f0>
                    safety_fault.cell_voltage_fault_active = 0;
 80014a6:	4b36      	ldr	r3, [pc, #216]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	715a      	strb	r2, [r3, #5]
                    /* Normal hız geri yükle (SOC kontrol edilecek) */
                }
            }
            xSemaphoreGive(xVehicleDataMutex);
 80014ac:	4b31      	ldr	r3, [pc, #196]	@ (8001574 <vSafetyFaultTask+0x2b8>)
 80014ae:	6818      	ldr	r0, [r3, #0]
 80014b0:	2300      	movs	r3, #0
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	f009 fdd3 	bl	800b060 <xQueueGenericSend>
        }

        /* 7. SOC (State of Charge) Kontrolü */
        if (xSemaphoreTake(xVehicleDataMutex, pdMS_TO_TICKS(50)) == pdPASS) {
 80014ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001574 <vSafetyFaultTask+0x2b8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2132      	movs	r1, #50	@ 0x32
 80014c0:	4618      	mov	r0, r3
 80014c2:	f00a f8fb 	bl	800b6bc <xQueueSemaphoreTake>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d144      	bne.n	8001556 <vSafetyFaultTask+0x29a>
            /* Kritik SOC kontrolü (<%10) */
            if (bms_data.soc_percent <= safety_fault.soc_critical_threshold) {
 80014cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001578 <vSafetyFaultTask+0x2bc>)
 80014ce:	795a      	ldrb	r2, [r3, #5]
 80014d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 80014d2:	7f5b      	ldrb	r3, [r3, #29]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d80a      	bhi.n	80014ee <vSafetyFaultTask+0x232>
                if (!safety_fault.soc_critical_warning_active) {
 80014d8:	4b29      	ldr	r3, [pc, #164]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 80014da:	79db      	ldrb	r3, [r3, #7]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d133      	bne.n	8001548 <vSafetyFaultTask+0x28c>
                    safety_fault.soc_critical_warning_active = 1;
 80014e0:	4b27      	ldr	r3, [pc, #156]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	71da      	strb	r2, [r3, #7]

                    /* Kritik durum: Çok düşük hız */
                    speed_control.target_speed = 15;
 80014e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001590 <vSafetyFaultTask+0x2d4>)
 80014e8:	220f      	movs	r2, #15
 80014ea:	801a      	strh	r2, [r3, #0]
 80014ec:	e02c      	b.n	8001548 <vSafetyFaultTask+0x28c>
                }
            }
            /* Düşük SOC kontrolü (%10-20 arası) */
            else if (bms_data.soc_percent <= safety_fault.soc_low_threshold) {
 80014ee:	4b22      	ldr	r3, [pc, #136]	@ (8001578 <vSafetyFaultTask+0x2bc>)
 80014f0:	795a      	ldrb	r2, [r3, #5]
 80014f2:	4b23      	ldr	r3, [pc, #140]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 80014f4:	7f1b      	ldrb	r3, [r3, #28]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d811      	bhi.n	800151e <vSafetyFaultTask+0x262>
                if (!safety_fault.soc_low_warning_active) {
 80014fa:	4b21      	ldr	r3, [pc, #132]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 80014fc:	799b      	ldrb	r3, [r3, #6]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d105      	bne.n	800150e <vSafetyFaultTask+0x252>
                    safety_fault.soc_low_warning_active = 1;
 8001502:	4b1f      	ldr	r3, [pc, #124]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 8001504:	2201      	movs	r2, #1
 8001506:	719a      	strb	r2, [r3, #6]

                    /* Düşük SOC: Orta hız limiti */
                    speed_control.target_speed = 35;
 8001508:	4b21      	ldr	r3, [pc, #132]	@ (8001590 <vSafetyFaultTask+0x2d4>)
 800150a:	2223      	movs	r2, #35	@ 0x23
 800150c:	801a      	strh	r2, [r3, #0]
                }
                /* Kritik uyarı temizle */
                if (safety_fault.soc_critical_warning_active) {
 800150e:	4b1c      	ldr	r3, [pc, #112]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 8001510:	79db      	ldrb	r3, [r3, #7]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d018      	beq.n	8001548 <vSafetyFaultTask+0x28c>
                    safety_fault.soc_critical_warning_active = 0;
 8001516:	4b1a      	ldr	r3, [pc, #104]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 8001518:	2200      	movs	r2, #0
 800151a:	71da      	strb	r2, [r3, #7]
 800151c:	e014      	b.n	8001548 <vSafetyFaultTask+0x28c>
                }
            }
            /* Normal SOC seviyesi (>%20) */
            else {
                if (safety_fault.soc_low_warning_active || safety_fault.soc_critical_warning_active) {
 800151e:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 8001520:	799b      	ldrb	r3, [r3, #6]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d103      	bne.n	800152e <vSafetyFaultTask+0x272>
 8001526:	4b16      	ldr	r3, [pc, #88]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 8001528:	79db      	ldrb	r3, [r3, #7]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00c      	beq.n	8001548 <vSafetyFaultTask+0x28c>
                    safety_fault.soc_low_warning_active = 0;
 800152e:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 8001530:	2200      	movs	r2, #0
 8001532:	719a      	strb	r2, [r3, #6]
                    safety_fault.soc_critical_warning_active = 0;
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 8001536:	2200      	movs	r2, #0
 8001538:	71da      	strb	r2, [r3, #7]

                    /* Hücre gerilimi normal ise tam hızı geri yükle */
                    if (!safety_fault.cell_voltage_fault_active) {
 800153a:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 800153c:	795b      	ldrb	r3, [r3, #5]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <vSafetyFaultTask+0x28c>
                        speed_control.target_speed = 50;  // Normal hedef hız
 8001542:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <vSafetyFaultTask+0x2d4>)
 8001544:	2232      	movs	r2, #50	@ 0x32
 8001546:	801a      	strh	r2, [r3, #0]
                    }
                }
            }
            xSemaphoreGive(xVehicleDataMutex);
 8001548:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <vSafetyFaultTask+0x2b8>)
 800154a:	6818      	ldr	r0, [r3, #0]
 800154c:	2300      	movs	r3, #0
 800154e:	2200      	movs	r2, #0
 8001550:	2100      	movs	r1, #0
 8001552:	f009 fd85 	bl	800b060 <xQueueGenericSend>
        }

        /* 8. GPS Bağlantı Fault Check - GPS data timeout */
        if ((HAL_GetTick() - gps_data.last_gps_receive_time) > 10000) {  // 10 saniye timeout
 8001556:	f001 fe3b 	bl	80031d0 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	4b0d      	ldr	r3, [pc, #52]	@ (8001594 <vSafetyFaultTask+0x2d8>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001566:	4293      	cmp	r3, r2
 8001568:	d916      	bls.n	8001598 <vSafetyFaultTask+0x2dc>
            safety_fault.gps_connection_fault_active = 1;
 800156a:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <vSafetyFaultTask+0x2c4>)
 800156c:	2201      	movs	r2, #1
 800156e:	721a      	strb	r2, [r3, #8]
 8001570:	e015      	b.n	800159e <vSafetyFaultTask+0x2e2>
 8001572:	bf00      	nop
 8001574:	20000b98 	.word	0x20000b98
 8001578:	20000a3c 	.word	0x20000a3c
 800157c:	200010ac 	.word	0x200010ac
 8001580:	20000a68 	.word	0x20000a68
 8001584:	20000a28 	.word	0x20000a28
 8001588:	20000a4c 	.word	0x20000a4c
 800158c:	20000a5c 	.word	0x20000a5c
 8001590:	20000a38 	.word	0x20000a38
 8001594:	20000aa8 	.word	0x20000aa8
        } else {
            safety_fault.gps_connection_fault_active = 0;
 8001598:	4b55      	ldr	r3, [pc, #340]	@ (80016f0 <vSafetyFaultTask+0x434>)
 800159a:	2200      	movs	r2, #0
 800159c:	721a      	strb	r2, [r3, #8]
        }

        /* 9. Communication Fault Check - Genel CAN bus sağlığı */
        /* Bu kısım gelecekte CAN error counter'ları ile genişletilebilir */
        safety_fault.communication_fault_active = 0;
 800159e:	4b54      	ldr	r3, [pc, #336]	@ (80016f0 <vSafetyFaultTask+0x434>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	725a      	strb	r2, [r3, #9]

        /* ======= TEMPERATURE FAULT ACTION (SADECE PE11 İÇİN) ======= */

        /* SADECE sıcaklık hatası varsa PE11 pinini aktif et */
       if (temp_fault_detected) {
 80015a4:	7efb      	ldrb	r3, [r7, #27]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d012      	beq.n	80015d0 <vSafetyFaultTask+0x314>
            if (!safety_fault.temp_fault_pin_active) {
 80015aa:	4b51      	ldr	r3, [pc, #324]	@ (80016f0 <vSafetyFaultTask+0x434>)
 80015ac:	7a9b      	ldrb	r3, [r3, #10]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d11b      	bne.n	80015ea <vSafetyFaultTask+0x32e>
            	 HAL_GPIO_WritePin(FAN_CONTROL_PIN_GPIO_Port, FAN_CONTROL_PIN_Pin, GPIO_PIN_SET);
 80015b2:	2201      	movs	r2, #1
 80015b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015b8:	484e      	ldr	r0, [pc, #312]	@ (80016f4 <vSafetyFaultTask+0x438>)
 80015ba:	f003 fa23 	bl	8004a04 <HAL_GPIO_WritePin>
                safety_fault.temp_fault_pin_active = 1;
 80015be:	4b4c      	ldr	r3, [pc, #304]	@ (80016f0 <vSafetyFaultTask+0x434>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	729a      	strb	r2, [r3, #10]
                safety_fault.fault_timestamp = HAL_GetTick();
 80015c4:	f001 fe04 	bl	80031d0 <HAL_GetTick>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4a49      	ldr	r2, [pc, #292]	@ (80016f0 <vSafetyFaultTask+0x434>)
 80015cc:	60d3      	str	r3, [r2, #12]
 80015ce:	e00c      	b.n	80015ea <vSafetyFaultTask+0x32e>
            }
        } else {
            if (safety_fault.temp_fault_pin_active) {
 80015d0:	4b47      	ldr	r3, [pc, #284]	@ (80016f0 <vSafetyFaultTask+0x434>)
 80015d2:	7a9b      	ldrb	r3, [r3, #10]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d008      	beq.n	80015ea <vSafetyFaultTask+0x32e>
            	 HAL_GPIO_WritePin(FAN_CONTROL_PIN_GPIO_Port, FAN_CONTROL_PIN_Pin, GPIO_PIN_RESET);
 80015d8:	2200      	movs	r2, #0
 80015da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015de:	4845      	ldr	r0, [pc, #276]	@ (80016f4 <vSafetyFaultTask+0x438>)
 80015e0:	f003 fa10 	bl	8004a04 <HAL_GPIO_WritePin>
                safety_fault.temp_fault_pin_active = 0;
 80015e4:	4b42      	ldr	r3, [pc, #264]	@ (80016f0 <vSafetyFaultTask+0x434>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	729a      	strb	r2, [r3, #10]
            }
        }
        if (safety_fault.gps_connection_fault_active) {
 80015ea:	4b41      	ldr	r3, [pc, #260]	@ (80016f0 <vSafetyFaultTask+0x434>)
 80015ec:	7a1b      	ldrb	r3, [r3, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d071      	beq.n	80016d6 <vSafetyFaultTask+0x41a>
            if (xSemaphoreTake(xVehicleDataMutex, pdMS_TO_TICKS(100)) == pdPASS) {
 80015f2:	4b41      	ldr	r3, [pc, #260]	@ (80016f8 <vSafetyFaultTask+0x43c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2164      	movs	r1, #100	@ 0x64
 80015f8:	4618      	mov	r0, r3
 80015fa:	f00a f85f 	bl	800b6bc <xQueueSemaphoreTake>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b01      	cmp	r3, #1
 8001602:	d168      	bne.n	80016d6 <vSafetyFaultTask+0x41a>
                snprintf(sd_buffer, sizeof(sd_buffer),
 8001604:	f001 fde4 	bl	80031d0 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
                         "%lu,%d,%.6f,%.6f,%d,%d,%lu\r\n",
                         HAL_GetTick(),
                         telemetry_data.current_speed_kmh,
 800160a:	4b3c      	ldr	r3, [pc, #240]	@ (80016fc <vSafetyFaultTask+0x440>)
 800160c:	881b      	ldrh	r3, [r3, #0]
                snprintf(sd_buffer, sizeof(sd_buffer),
 800160e:	4619      	mov	r1, r3
                         gps_data.latitude,
 8001610:	4b3b      	ldr	r3, [pc, #236]	@ (8001700 <vSafetyFaultTask+0x444>)
 8001612:	edd3 7a00 	vldr	s15, [r3]
                snprintf(sd_buffer, sizeof(sd_buffer),
 8001616:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                         gps_data.longitude,
 800161a:	4b39      	ldr	r3, [pc, #228]	@ (8001700 <vSafetyFaultTask+0x444>)
 800161c:	edd3 6a01 	vldr	s13, [r3, #4]
                snprintf(sd_buffer, sizeof(sd_buffer),
 8001620:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
                         bms_data.battery_temp,
 8001624:	4b37      	ldr	r3, [pc, #220]	@ (8001704 <vSafetyFaultTask+0x448>)
 8001626:	791b      	ldrb	r3, [r3, #4]
                snprintf(sd_buffer, sizeof(sd_buffer),
 8001628:	4618      	mov	r0, r3
                         bms_data.battery_voltage_mv,
 800162a:	4b36      	ldr	r3, [pc, #216]	@ (8001704 <vSafetyFaultTask+0x448>)
 800162c:	881b      	ldrh	r3, [r3, #0]
                snprintf(sd_buffer, sizeof(sd_buffer),
 800162e:	461c      	mov	r4, r3
 8001630:	4b32      	ldr	r3, [pc, #200]	@ (80016fc <vSafetyFaultTask+0x440>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	9308      	str	r3, [sp, #32]
 8001636:	9407      	str	r4, [sp, #28]
 8001638:	9006      	str	r0, [sp, #24]
 800163a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800163e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001642:	9100      	str	r1, [sp, #0]
 8001644:	4613      	mov	r3, r2
 8001646:	4a30      	ldr	r2, [pc, #192]	@ (8001708 <vSafetyFaultTask+0x44c>)
 8001648:	2180      	movs	r1, #128	@ 0x80
 800164a:	4830      	ldr	r0, [pc, #192]	@ (800170c <vSafetyFaultTask+0x450>)
 800164c:	f00d fbe2 	bl	800ee14 <sniprintf>
                         telemetry_data.remaining_energy_wh);

                /* SD kartı bağla */
                fres = f_mount(&SDFatFS, SDPath, 1);
 8001650:	2201      	movs	r2, #1
 8001652:	492f      	ldr	r1, [pc, #188]	@ (8001710 <vSafetyFaultTask+0x454>)
 8001654:	482f      	ldr	r0, [pc, #188]	@ (8001714 <vSafetyFaultTask+0x458>)
 8001656:	f008 f985 	bl	8009964 <f_mount>
 800165a:	4603      	mov	r3, r0
 800165c:	461a      	mov	r2, r3
 800165e:	4b2e      	ldr	r3, [pc, #184]	@ (8001718 <vSafetyFaultTask+0x45c>)
 8001660:	701a      	strb	r2, [r3, #0]
                if (fres == FR_OK) {
 8001662:	4b2d      	ldr	r3, [pc, #180]	@ (8001718 <vSafetyFaultTask+0x45c>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d128      	bne.n	80016bc <vSafetyFaultTask+0x400>
                    /* Dosyayı aç veya oluştur */
                    fres = f_open(&file, "gps_loss_log.csv", FA_OPEN_APPEND | FA_WRITE);
 800166a:	2232      	movs	r2, #50	@ 0x32
 800166c:	492b      	ldr	r1, [pc, #172]	@ (800171c <vSafetyFaultTask+0x460>)
 800166e:	482c      	ldr	r0, [pc, #176]	@ (8001720 <vSafetyFaultTask+0x464>)
 8001670:	f008 f9dc 	bl	8009a2c <f_open>
 8001674:	4603      	mov	r3, r0
 8001676:	461a      	mov	r2, r3
 8001678:	4b27      	ldr	r3, [pc, #156]	@ (8001718 <vSafetyFaultTask+0x45c>)
 800167a:	701a      	strb	r2, [r3, #0]
                    if (fres == FR_OK) {
 800167c:	4b26      	ldr	r3, [pc, #152]	@ (8001718 <vSafetyFaultTask+0x45c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d114      	bne.n	80016ae <vSafetyFaultTask+0x3f2>
                        /* CSV başlığı gerekiyorsa: */
                        if (f_size(&file) == 0) {
 8001684:	4b26      	ldr	r3, [pc, #152]	@ (8001720 <vSafetyFaultTask+0x464>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d103      	bne.n	8001694 <vSafetyFaultTask+0x3d8>
                            f_puts("zaman_ms,hiz_kmh,enlem,boylam,T_bat_C,V_bat_mV,kalan_enerji_wh\r\n", &file);
 800168c:	4924      	ldr	r1, [pc, #144]	@ (8001720 <vSafetyFaultTask+0x464>)
 800168e:	4825      	ldr	r0, [pc, #148]	@ (8001724 <vSafetyFaultTask+0x468>)
 8001690:	f008 fe60 	bl	800a354 <f_puts>
                        }

                        /* Veriyi yaz */
                        f_write(&file, sd_buffer, strlen(sd_buffer), &bytesWritten);
 8001694:	481d      	ldr	r0, [pc, #116]	@ (800170c <vSafetyFaultTask+0x450>)
 8001696:	f7fe fe23 	bl	80002e0 <strlen>
 800169a:	4602      	mov	r2, r0
 800169c:	4b22      	ldr	r3, [pc, #136]	@ (8001728 <vSafetyFaultTask+0x46c>)
 800169e:	491b      	ldr	r1, [pc, #108]	@ (800170c <vSafetyFaultTask+0x450>)
 80016a0:	481f      	ldr	r0, [pc, #124]	@ (8001720 <vSafetyFaultTask+0x464>)
 80016a2:	f008 fb84 	bl	8009dae <f_write>
                        f_close(&file);
 80016a6:	481e      	ldr	r0, [pc, #120]	@ (8001720 <vSafetyFaultTask+0x464>)
 80016a8:	f008 fdae 	bl	800a208 <f_close>
 80016ac:	e00c      	b.n	80016c8 <vSafetyFaultTask+0x40c>
                    } else {
                        printf("SD dosya açılamadı! (%d)\r\n", fres);
 80016ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001718 <vSafetyFaultTask+0x45c>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	4619      	mov	r1, r3
 80016b4:	481d      	ldr	r0, [pc, #116]	@ (800172c <vSafetyFaultTask+0x470>)
 80016b6:	f00d fb3d 	bl	800ed34 <iprintf>
 80016ba:	e005      	b.n	80016c8 <vSafetyFaultTask+0x40c>
                    }
                } else {
                    printf("SD mount hatası! (%d)\r\n", fres);
 80016bc:	4b16      	ldr	r3, [pc, #88]	@ (8001718 <vSafetyFaultTask+0x45c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	481b      	ldr	r0, [pc, #108]	@ (8001730 <vSafetyFaultTask+0x474>)
 80016c4:	f00d fb36 	bl	800ed34 <iprintf>
                }
                xSemaphoreGive(xVehicleDataMutex);
 80016c8:	4b0b      	ldr	r3, [pc, #44]	@ (80016f8 <vSafetyFaultTask+0x43c>)
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	2300      	movs	r3, #0
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	f009 fcc5 	bl	800b060 <xQueueGenericSend>
            }
        }

        /* Temperature data'yı queue'ya gönder (diğer task'lar için) */
        xQueueOverwrite(xTemperatureDataQueue, &temp_data);
 80016d6:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <vSafetyFaultTask+0x478>)
 80016d8:	6818      	ldr	r0, [r3, #0]
 80016da:	f107 0108 	add.w	r1, r7, #8
 80016de:	2302      	movs	r3, #2
 80016e0:	2200      	movs	r2, #0
 80016e2:	f009 fcbd 	bl	800b060 <xQueueGenericSend>

        /* 500ms periyot - Fault detection döngüsü */
        vTaskDelay(pdMS_TO_TICKS(500));
 80016e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016ea:	f00a fd0b 	bl	800c104 <vTaskDelay>
    for(;;) {
 80016ee:	e5e9      	b.n	80012c4 <vSafetyFaultTask+0x8>
 80016f0:	20000a68 	.word	0x20000a68
 80016f4:	40021000 	.word	0x40021000
 80016f8:	20000b98 	.word	0x20000b98
 80016fc:	20000a94 	.word	0x20000a94
 8001700:	20000aa8 	.word	0x20000aa8
 8001704:	20000a3c 	.word	0x20000a3c
 8001708:	080128a4 	.word	0x080128a4
 800170c:	20000dd4 	.word	0x20000dd4
 8001710:	2000108c 	.word	0x2000108c
 8001714:	20000e58 	.word	0x20000e58
 8001718:	20000dd0 	.word	0x20000dd0
 800171c:	080128c4 	.word	0x080128c4
 8001720:	20000ba0 	.word	0x20000ba0
 8001724:	080128d8 	.word	0x080128d8
 8001728:	20000e54 	.word	0x20000e54
 800172c:	0801291c 	.word	0x0801291c
 8001730:	0801293c 	.word	0x0801293c
 8001734:	20000b80 	.word	0x20000b80

08001738 <vCanRxTask>:
    }
}

void vCanRxTask(void *pvParameters)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b090      	sub	sp, #64	@ 0x40
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];

    for (;;) {
        // Sadece interrupt'tan gelen bildirimle uyanır
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001740:	f04f 31ff 	mov.w	r1, #4294967295
 8001744:	2001      	movs	r0, #1
 8001746:	f00b fb0f 	bl	800cd68 <ulTaskNotifyTake>

        while (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK) {
 800174a:	e022      	b.n	8001792 <vCanRxTask+0x5a>
            rxMessage.id = rxHeader.StdId;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	633b      	str	r3, [r7, #48]	@ 0x30
            rxMessage.dlc = rxHeader.DLC;
 8001750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            memcpy(rxMessage.data, rxData, 8);
 8001758:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800175c:	f107 020c 	add.w	r2, r7, #12
 8001760:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001764:	e883 0003 	stmia.w	r3, {r0, r1}

            if (xQueueSend(xCanRxQueue, &rxMessage, 0) != pdPASS) {
 8001768:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <vCanRxTask+0x74>)
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001770:	2300      	movs	r3, #0
 8001772:	2200      	movs	r2, #0
 8001774:	f009 fc74 	bl	800b060 <xQueueGenericSend>
 8001778:	4603      	mov	r3, r0
 800177a:	2b01      	cmp	r3, #1
 800177c:	d002      	beq.n	8001784 <vCanRxTask+0x4c>
                printf("CAN RX Queue Full!\r\n");
 800177e:	480c      	ldr	r0, [pc, #48]	@ (80017b0 <vCanRxTask+0x78>)
 8001780:	f00d fb40 	bl	800ee04 <puts>
            }

            // Data işlem task'ını uyandır
            xTaskNotifyGive(xDataProcessTaskHandle);
 8001784:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <vCanRxTask+0x7c>)
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	2300      	movs	r3, #0
 800178a:	2202      	movs	r2, #2
 800178c:	2100      	movs	r1, #0
 800178e:	f00b fb33 	bl	800cdf8 <xTaskGenericNotify>
        while (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK) {
 8001792:	f107 030c 	add.w	r3, r7, #12
 8001796:	f107 0214 	add.w	r2, r7, #20
 800179a:	2100      	movs	r1, #0
 800179c:	4806      	ldr	r0, [pc, #24]	@ (80017b8 <vCanRxTask+0x80>)
 800179e:	f002 fc99 	bl	80040d4 <HAL_CAN_GetRxMessage>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0d1      	beq.n	800174c <vCanRxTask+0x14>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80017a8:	e7ca      	b.n	8001740 <vCanRxTask+0x8>
 80017aa:	bf00      	nop
 80017ac:	20000b68 	.word	0x20000b68
 80017b0:	08012958 	.word	0x08012958
 80017b4:	20000b4c 	.word	0x20000b4c
 80017b8:	20000298 	.word	0x20000298

080017bc <vCanTxTask>:
        }
    }
}

void vCanTxTask(void *pvParameters)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08e      	sub	sp, #56	@ 0x38
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
    CAN_TxHeaderTypeDef txHeader;
    uint32_t txMailbox;

    for(;;) {
        /* TX queue'dan mesaj al */
        if (xQueueReceive(xCanTxQueue, &txMessage, portMAX_DELAY) == pdPASS) {
 80017c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001834 <vCanTxTask+0x78>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	4618      	mov	r0, r3
 80017d2:	f009 fe8b 	bl	800b4ec <xQueueReceive>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d1f3      	bne.n	80017c4 <vCanTxTask+0x8>

            /* TX Header yapılandırması */
            txHeader.StdId = txMessage.id;
 80017dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017de:	613b      	str	r3, [r7, #16]
            txHeader.RTR = CAN_RTR_DATA;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
            txHeader.IDE = CAN_ID_STD;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
            txHeader.DLC = txMessage.dlc;
 80017e8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80017ec:	623b      	str	r3, [r7, #32]
            txHeader.TransmitGlobalTime = DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

            /* CAN mesajı gönder */
            if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txMessage.data, &txMailbox) == HAL_OK) {
 80017f4:	f107 000c 	add.w	r0, r7, #12
 80017f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017fc:	1d1a      	adds	r2, r3, #4
 80017fe:	f107 0110 	add.w	r1, r7, #16
 8001802:	4603      	mov	r3, r0
 8001804:	480c      	ldr	r0, [pc, #48]	@ (8001838 <vCanTxTask+0x7c>)
 8001806:	f002 fb71 	bl	8003eec <HAL_CAN_AddTxMessage>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10c      	bne.n	800182a <vCanTxTask+0x6e>

                /* Gönderim tamamlanana kadar bekle */
                while (HAL_CAN_IsTxMessagePending(&hcan1, txMailbox)) {
 8001810:	e002      	b.n	8001818 <vCanTxTask+0x5c>
                    vTaskDelay(pdMS_TO_TICKS(1));
 8001812:	2001      	movs	r0, #1
 8001814:	f00a fc76 	bl	800c104 <vTaskDelay>
                while (HAL_CAN_IsTxMessagePending(&hcan1, txMailbox)) {
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4619      	mov	r1, r3
 800181c:	4806      	ldr	r0, [pc, #24]	@ (8001838 <vCanTxTask+0x7c>)
 800181e:	f002 fc35 	bl	800408c <HAL_CAN_IsTxMessagePending>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1f4      	bne.n	8001812 <vCanTxTask+0x56>
 8001828:	e7cc      	b.n	80017c4 <vCanTxTask+0x8>
                }

            } else {
                printf("CAN TX Error!\r\n");
 800182a:	4804      	ldr	r0, [pc, #16]	@ (800183c <vCanTxTask+0x80>)
 800182c:	f00d faea 	bl	800ee04 <puts>
        if (xQueueReceive(xCanTxQueue, &txMessage, portMAX_DELAY) == pdPASS) {
 8001830:	e7c8      	b.n	80017c4 <vCanTxTask+0x8>
 8001832:	bf00      	nop
 8001834:	20000b6c 	.word	0x20000b6c
 8001838:	20000298 	.word	0x20000298
 800183c:	0801296c 	.word	0x0801296c

08001840 <vDataProcessTask>:
        }
    }
}

void vDataProcessTask(void *pvParameters)
{
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b097      	sub	sp, #92	@ 0x5c
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
    BMSData_t temp_bms_data;
    IsolationData_t temp_isolation_data;
    OnboardChargerData_t temp_charger_data;

    /* Initialize temporary structures */
    memset(&temp_motor_data, 0, sizeof(MotorData_t));
 8001848:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800184c:	2210      	movs	r2, #16
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f00d fc0f 	bl	800f074 <memset>
    memset(&temp_bms_data, 0, sizeof(BMSData_t));
 8001856:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800185a:	2210      	movs	r2, #16
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f00d fc08 	bl	800f074 <memset>
    memset(&temp_isolation_data, 0, sizeof(IsolationData_t));
 8001864:	f107 0318 	add.w	r3, r7, #24
 8001868:	2210      	movs	r2, #16
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f00d fc01 	bl	800f074 <memset>
    memset(&temp_charger_data, 0, sizeof(OnboardChargerData_t));
 8001872:	f107 030c 	add.w	r3, r7, #12
 8001876:	220c      	movs	r2, #12
 8001878:	2100      	movs	r1, #0
 800187a:	4618      	mov	r0, r3
 800187c:	f00d fbfa 	bl	800f074 <memset>

    for(;;) {
        /* CAN RX task'tan bildirim bekle */
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001880:	f04f 31ff 	mov.w	r1, #4294967295
 8001884:	2001      	movs	r0, #1
 8001886:	f00b fa6f 	bl	800cd68 <ulTaskNotifyTake>

        /* Queue'daki tüm mesajları işle */
        while (xQueueReceive(xCanRxQueue, &rxMessage, 0) == pdPASS) {
 800188a:	e1b8      	b.n	8001bfe <vDataProcessTask+0x3be>

            /* Mutex ile vehicle data'yı koruma altına al */
            if (xSemaphoreTake(xVehicleDataMutex, pdMS_TO_TICKS(100)) == pdPASS) {
 800188c:	4bc0      	ldr	r3, [pc, #768]	@ (8001b90 <vDataProcessTask+0x350>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2164      	movs	r1, #100	@ 0x64
 8001892:	4618      	mov	r0, r3
 8001894:	f009 ff12 	bl	800b6bc <xQueueSemaphoreTake>
 8001898:	4603      	mov	r3, r0
 800189a:	2b01      	cmp	r3, #1
 800189c:	f040 81af 	bne.w	8001bfe <vDataProcessTask+0x3be>

                /* Message ID'ye göre veri işleme */
                switch (rxMessage.id) {
 80018a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018a2:	f240 5203 	movw	r2, #1283	@ 0x503
 80018a6:	4293      	cmp	r3, r2
 80018a8:	f000 8133 	beq.w	8001b12 <vDataProcessTask+0x2d2>
 80018ac:	f240 5203 	movw	r2, #1283	@ 0x503
 80018b0:	4293      	cmp	r3, r2
 80018b2:	f200 819c 	bhi.w	8001bee <vDataProcessTask+0x3ae>
 80018b6:	f240 5202 	movw	r2, #1282	@ 0x502
 80018ba:	4293      	cmp	r3, r2
 80018bc:	f000 8115 	beq.w	8001aea <vDataProcessTask+0x2aa>
 80018c0:	f240 5202 	movw	r2, #1282	@ 0x502
 80018c4:	4293      	cmp	r3, r2
 80018c6:	f200 8192 	bhi.w	8001bee <vDataProcessTask+0x3ae>
 80018ca:	f240 5201 	movw	r2, #1281	@ 0x501
 80018ce:	4293      	cmp	r3, r2
 80018d0:	f000 8102 	beq.w	8001ad8 <vDataProcessTask+0x298>
 80018d4:	f240 5201 	movw	r2, #1281	@ 0x501
 80018d8:	4293      	cmp	r3, r2
 80018da:	f200 8188 	bhi.w	8001bee <vDataProcessTask+0x3ae>
 80018de:	f240 4203 	movw	r2, #1027	@ 0x403
 80018e2:	4293      	cmp	r3, r2
 80018e4:	f000 8162 	beq.w	8001bac <vDataProcessTask+0x36c>
 80018e8:	f240 4203 	movw	r2, #1027	@ 0x403
 80018ec:	4293      	cmp	r3, r2
 80018ee:	f200 817e 	bhi.w	8001bee <vDataProcessTask+0x3ae>
 80018f2:	f240 4202 	movw	r2, #1026	@ 0x402
 80018f6:	4293      	cmp	r3, r2
 80018f8:	f000 8139 	beq.w	8001b6e <vDataProcessTask+0x32e>
 80018fc:	f240 4202 	movw	r2, #1026	@ 0x402
 8001900:	4293      	cmp	r3, r2
 8001902:	f200 8174 	bhi.w	8001bee <vDataProcessTask+0x3ae>
 8001906:	f240 4201 	movw	r2, #1025	@ 0x401
 800190a:	4293      	cmp	r3, r2
 800190c:	f000 8124 	beq.w	8001b58 <vDataProcessTask+0x318>
 8001910:	f240 4201 	movw	r2, #1025	@ 0x401
 8001914:	4293      	cmp	r3, r2
 8001916:	f200 816a 	bhi.w	8001bee <vDataProcessTask+0x3ae>
 800191a:	f240 2205 	movw	r2, #517	@ 0x205
 800191e:	4293      	cmp	r3, r2
 8001920:	d82a      	bhi.n	8001978 <vDataProcessTask+0x138>
 8001922:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001926:	d815      	bhi.n	8001954 <vDataProcessTask+0x114>
                    xQueueOverwrite(xChargerDataQueue, &temp_charger_data);
                    break;

                default:
                    /* Unknown CAN ID */
                    break;
 8001928:	e161      	b.n	8001bee <vDataProcessTask+0x3ae>
                switch (rxMessage.id) {
 800192a:	f2a3 3301 	subw	r3, r3, #769	@ 0x301
 800192e:	2b05      	cmp	r3, #5
 8001930:	f200 815d 	bhi.w	8001bee <vDataProcessTask+0x3ae>
 8001934:	a201      	add	r2, pc, #4	@ (adr r2, 800193c <vDataProcessTask+0xfc>)
 8001936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193a:	bf00      	nop
 800193c:	08001a21 	.word	0x08001a21
 8001940:	08001a33 	.word	0x08001a33
 8001944:	08001a55 	.word	0x08001a55
 8001948:	08001a75 	.word	0x08001a75
 800194c:	08001a87 	.word	0x08001a87
 8001950:	08001a99 	.word	0x08001a99
 8001954:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8001958:	2b04      	cmp	r3, #4
 800195a:	f200 8148 	bhi.w	8001bee <vDataProcessTask+0x3ae>
 800195e:	a201      	add	r2, pc, #4	@ (adr r2, 8001964 <vDataProcessTask+0x124>)
 8001960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001964:	0800198b 	.word	0x0800198b
 8001968:	08001bef 	.word	0x08001bef
 800196c:	0800199d 	.word	0x0800199d
 8001970:	080019bf 	.word	0x080019bf
 8001974:	080019e1 	.word	0x080019e1
 8001978:	f240 3206 	movw	r2, #774	@ 0x306
 800197c:	4293      	cmp	r3, r2
 800197e:	f200 8136 	bhi.w	8001bee <vDataProcessTask+0x3ae>
 8001982:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001986:	d8d0      	bhi.n	800192a <vDataProcessTask+0xea>
                    break;
 8001988:	e131      	b.n	8001bee <vDataProcessTask+0x3ae>
                    temp_motor_data.data_valid = rxMessage.data[0];
 800198a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800198e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
                    temp_motor_data.timestamp = HAL_GetTick();
 8001992:	f001 fc1d 	bl	80031d0 <HAL_GetTick>
 8001996:	4603      	mov	r3, r0
 8001998:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800199a:	e129      	b.n	8001bf0 <vDataProcessTask+0x3b0>
                    temp_motor_data.rpm = (rxMessage.data[1] << 8) | rxMessage.data[0];
 800199c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	b21a      	sxth	r2, r3
 80019a6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	4313      	orrs	r3, r2
 80019ae:	b21b      	sxth	r3, r3
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	877b      	strh	r3, [r7, #58]	@ 0x3a
                    temp_motor_data.timestamp = HAL_GetTick();
 80019b4:	f001 fc0c 	bl	80031d0 <HAL_GetTick>
 80019b8:	4603      	mov	r3, r0
 80019ba:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 80019bc:	e118      	b.n	8001bf0 <vDataProcessTask+0x3b0>
                    temp_motor_data.current_ma = (rxMessage.data[1] << 8) | rxMessage.data[0];
 80019be:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80019c2:	b21b      	sxth	r3, r3
 80019c4:	021b      	lsls	r3, r3, #8
 80019c6:	b21a      	sxth	r2, r3
 80019c8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	4313      	orrs	r3, r2
 80019d0:	b21b      	sxth	r3, r3
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
                    temp_motor_data.timestamp = HAL_GetTick();
 80019d6:	f001 fbfb 	bl	80031d0 <HAL_GetTick>
 80019da:	4603      	mov	r3, r0
 80019dc:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 80019de:	e107      	b.n	8001bf0 <vDataProcessTask+0x3b0>
                    temp_motor_data.voltage_mv = (rxMessage.data[1] << 8) | rxMessage.data[0];
 80019e0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80019e4:	b21b      	sxth	r3, r3
 80019e6:	021b      	lsls	r3, r3, #8
 80019e8:	b21a      	sxth	r2, r3
 80019ea:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80019ee:	b21b      	sxth	r3, r3
 80019f0:	4313      	orrs	r3, r2
 80019f2:	b21b      	sxth	r3, r3
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                    temp_motor_data.timestamp = HAL_GetTick();
 80019f8:	f001 fbea 	bl	80031d0 <HAL_GetTick>
 80019fc:	4603      	mov	r3, r0
 80019fe:	643b      	str	r3, [r7, #64]	@ 0x40
                    memcpy(&motor_data, &temp_motor_data, sizeof(MotorData_t));
 8001a00:	4b64      	ldr	r3, [pc, #400]	@ (8001b94 <vDataProcessTask+0x354>)
 8001a02:	461c      	mov	r4, r3
 8001a04:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                    xQueueOverwrite(xMotorDataQueue, &temp_motor_data);
 8001a0e:	4b62      	ldr	r3, [pc, #392]	@ (8001b98 <vDataProcessTask+0x358>)
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001a16:	2302      	movs	r3, #2
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f009 fb21 	bl	800b060 <xQueueGenericSend>
                    break;
 8001a1e:	e0e7      	b.n	8001bf0 <vDataProcessTask+0x3b0>
                    temp_bms_data.data_valid = rxMessage.data[0];
 8001a20:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001a24:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                    temp_bms_data.timestamp = HAL_GetTick();
 8001a28:	f001 fbd2 	bl	80031d0 <HAL_GetTick>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	633b      	str	r3, [r7, #48]	@ 0x30
                    break;
 8001a30:	e0de      	b.n	8001bf0 <vDataProcessTask+0x3b0>
                    temp_bms_data.battery_voltage_mv = (rxMessage.data[1] << 8) | rxMessage.data[0];
 8001a32:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001a36:	b21b      	sxth	r3, r3
 8001a38:	021b      	lsls	r3, r3, #8
 8001a3a:	b21a      	sxth	r2, r3
 8001a3c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001a40:	b21b      	sxth	r3, r3
 8001a42:	4313      	orrs	r3, r2
 8001a44:	b21b      	sxth	r3, r3
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	853b      	strh	r3, [r7, #40]	@ 0x28
                    temp_bms_data.timestamp = HAL_GetTick();
 8001a4a:	f001 fbc1 	bl	80031d0 <HAL_GetTick>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	633b      	str	r3, [r7, #48]	@ 0x30
                    break;
 8001a52:	e0cd      	b.n	8001bf0 <vDataProcessTask+0x3b0>
                    temp_bms_data.battery_current_ma = (int16_t)((rxMessage.data[1] << 8) | rxMessage.data[0]);
 8001a54:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001a58:	b21b      	sxth	r3, r3
 8001a5a:	021b      	lsls	r3, r3, #8
 8001a5c:	b21a      	sxth	r2, r3
 8001a5e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001a62:	b21b      	sxth	r3, r3
 8001a64:	4313      	orrs	r3, r2
 8001a66:	b21b      	sxth	r3, r3
 8001a68:	857b      	strh	r3, [r7, #42]	@ 0x2a
                    temp_bms_data.timestamp = HAL_GetTick();
 8001a6a:	f001 fbb1 	bl	80031d0 <HAL_GetTick>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	633b      	str	r3, [r7, #48]	@ 0x30
                    break;
 8001a72:	e0bd      	b.n	8001bf0 <vDataProcessTask+0x3b0>
                    temp_bms_data.battery_temp = rxMessage.data[0];
 8001a74:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001a78:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    temp_bms_data.timestamp = HAL_GetTick();
 8001a7c:	f001 fba8 	bl	80031d0 <HAL_GetTick>
 8001a80:	4603      	mov	r3, r0
 8001a82:	633b      	str	r3, [r7, #48]	@ 0x30
                    break;
 8001a84:	e0b4      	b.n	8001bf0 <vDataProcessTask+0x3b0>
                    temp_bms_data.soc_percent = rxMessage.data[0];
 8001a86:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001a8a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                    temp_bms_data.timestamp = HAL_GetTick();
 8001a8e:	f001 fb9f 	bl	80031d0 <HAL_GetTick>
 8001a92:	4603      	mov	r3, r0
 8001a94:	633b      	str	r3, [r7, #48]	@ 0x30
                    break;
 8001a96:	e0ab      	b.n	8001bf0 <vDataProcessTask+0x3b0>
                    temp_bms_data.cell_voltage_mv = (rxMessage.data[1] << 8) | rxMessage.data[0];
 8001a98:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	021b      	lsls	r3, r3, #8
 8001aa0:	b21a      	sxth	r2, r3
 8001aa2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001aa6:	b21b      	sxth	r3, r3
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	b21b      	sxth	r3, r3
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                    temp_bms_data.timestamp = HAL_GetTick();
 8001ab0:	f001 fb8e 	bl	80031d0 <HAL_GetTick>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	633b      	str	r3, [r7, #48]	@ 0x30
                    memcpy(&bms_data, &temp_bms_data, sizeof(BMSData_t));
 8001ab8:	4b38      	ldr	r3, [pc, #224]	@ (8001b9c <vDataProcessTask+0x35c>)
 8001aba:	461c      	mov	r4, r3
 8001abc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ac0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ac2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                    xQueueOverwrite(xBMSDataQueue, &temp_bms_data);
 8001ac6:	4b36      	ldr	r3, [pc, #216]	@ (8001ba0 <vDataProcessTask+0x360>)
 8001ac8:	6818      	ldr	r0, [r3, #0]
 8001aca:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001ace:	2302      	movs	r3, #2
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f009 fac5 	bl	800b060 <xQueueGenericSend>
                    break;
 8001ad6:	e08b      	b.n	8001bf0 <vDataProcessTask+0x3b0>
                    temp_isolation_data.data_valid = rxMessage.data[0];
 8001ad8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001adc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                    temp_isolation_data.timestamp = HAL_GetTick();
 8001ae0:	f001 fb76 	bl	80031d0 <HAL_GetTick>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	623b      	str	r3, [r7, #32]
                    break;
 8001ae8:	e082      	b.n	8001bf0 <vDataProcessTask+0x3b0>
                    temp_isolation_data.resistance_ohm = (rxMessage.data[3] << 24) |
 8001aea:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001aee:	061a      	lsls	r2, r3, #24
                                                        (rxMessage.data[2] << 16) |
 8001af0:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001af4:	041b      	lsls	r3, r3, #16
                    temp_isolation_data.resistance_ohm = (rxMessage.data[3] << 24) |
 8001af6:	431a      	orrs	r2, r3
                                                        (rxMessage.data[1] << 8) |
 8001af8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001afc:	021b      	lsls	r3, r3, #8
                                                        (rxMessage.data[2] << 16) |
 8001afe:	4313      	orrs	r3, r2
                                                         rxMessage.data[0];
 8001b00:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
                                                        (rxMessage.data[1] << 8) |
 8001b04:	4313      	orrs	r3, r2
                    temp_isolation_data.resistance_ohm = (rxMessage.data[3] << 24) |
 8001b06:	61bb      	str	r3, [r7, #24]
                    temp_isolation_data.timestamp = HAL_GetTick();
 8001b08:	f001 fb62 	bl	80031d0 <HAL_GetTick>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	623b      	str	r3, [r7, #32]
                    break;
 8001b10:	e06e      	b.n	8001bf0 <vDataProcessTask+0x3b0>
                    temp_isolation_data.capacitance_nf = (rxMessage.data[3] << 24) |
 8001b12:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001b16:	061a      	lsls	r2, r3, #24
                                                        (rxMessage.data[2] << 16) |
 8001b18:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001b1c:	041b      	lsls	r3, r3, #16
                    temp_isolation_data.capacitance_nf = (rxMessage.data[3] << 24) |
 8001b1e:	431a      	orrs	r2, r3
                                                        (rxMessage.data[1] << 8) |
 8001b20:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001b24:	021b      	lsls	r3, r3, #8
                                                        (rxMessage.data[2] << 16) |
 8001b26:	4313      	orrs	r3, r2
                                                         rxMessage.data[0];
 8001b28:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
                                                        (rxMessage.data[1] << 8) |
 8001b2c:	4313      	orrs	r3, r2
                    temp_isolation_data.capacitance_nf = (rxMessage.data[3] << 24) |
 8001b2e:	61fb      	str	r3, [r7, #28]
                    temp_isolation_data.timestamp = HAL_GetTick();
 8001b30:	f001 fb4e 	bl	80031d0 <HAL_GetTick>
 8001b34:	4603      	mov	r3, r0
 8001b36:	623b      	str	r3, [r7, #32]
                    memcpy(&isolation_data, &temp_isolation_data, sizeof(IsolationData_t));
 8001b38:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba4 <vDataProcessTask+0x364>)
 8001b3a:	461c      	mov	r4, r3
 8001b3c:	f107 0318 	add.w	r3, r7, #24
 8001b40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                    xQueueOverwrite(xIsolationDataQueue, &temp_isolation_data);
 8001b46:	4b18      	ldr	r3, [pc, #96]	@ (8001ba8 <vDataProcessTask+0x368>)
 8001b48:	6818      	ldr	r0, [r3, #0]
 8001b4a:	f107 0118 	add.w	r1, r7, #24
 8001b4e:	2302      	movs	r3, #2
 8001b50:	2200      	movs	r2, #0
 8001b52:	f009 fa85 	bl	800b060 <xQueueGenericSend>
                    break;
 8001b56:	e04b      	b.n	8001bf0 <vDataProcessTask+0x3b0>
                    temp_charger_data.data_valid = rxMessage.data[0];
 8001b58:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001b5c:	753b      	strb	r3, [r7, #20]
                    temp_charger_data.charging_active = rxMessage.data[1];  // Şarj durumu
 8001b5e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001b62:	757b      	strb	r3, [r7, #21]
                    temp_charger_data.timestamp = HAL_GetTick();
 8001b64:	f001 fb34 	bl	80031d0 <HAL_GetTick>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	613b      	str	r3, [r7, #16]
                    break;
 8001b6c:	e040      	b.n	8001bf0 <vDataProcessTask+0x3b0>
                    temp_charger_data.output_voltage_mv = (rxMessage.data[1] << 8) | rxMessage.data[0];
 8001b6e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001b7c:	b21b      	sxth	r3, r3
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	b21b      	sxth	r3, r3
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	81bb      	strh	r3, [r7, #12]
                    temp_charger_data.timestamp = HAL_GetTick();
 8001b86:	f001 fb23 	bl	80031d0 <HAL_GetTick>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	613b      	str	r3, [r7, #16]
                    break;
 8001b8e:	e02f      	b.n	8001bf0 <vDataProcessTask+0x3b0>
 8001b90:	20000b98 	.word	0x20000b98
 8001b94:	20000a28 	.word	0x20000a28
 8001b98:	20000b70 	.word	0x20000b70
 8001b9c:	20000a3c 	.word	0x20000a3c
 8001ba0:	20000b74 	.word	0x20000b74
 8001ba4:	20000a4c 	.word	0x20000a4c
 8001ba8:	20000b78 	.word	0x20000b78
                    temp_charger_data.output_current_ma = (rxMessage.data[1] << 8) | rxMessage.data[0];
 8001bac:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001bb0:	b21b      	sxth	r3, r3
 8001bb2:	021b      	lsls	r3, r3, #8
 8001bb4:	b21a      	sxth	r2, r3
 8001bb6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001bba:	b21b      	sxth	r3, r3
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	b21b      	sxth	r3, r3
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	81fb      	strh	r3, [r7, #14]
                    temp_charger_data.timestamp = HAL_GetTick();
 8001bc4:	f001 fb04 	bl	80031d0 <HAL_GetTick>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	613b      	str	r3, [r7, #16]
                    memcpy(&charger_data, &temp_charger_data, sizeof(OnboardChargerData_t));
 8001bcc:	4b16      	ldr	r3, [pc, #88]	@ (8001c28 <vDataProcessTask+0x3e8>)
 8001bce:	461c      	mov	r4, r3
 8001bd0:	f107 030c 	add.w	r3, r7, #12
 8001bd4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001bd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                    xQueueOverwrite(xChargerDataQueue, &temp_charger_data);
 8001bdc:	4b13      	ldr	r3, [pc, #76]	@ (8001c2c <vDataProcessTask+0x3ec>)
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	f107 010c 	add.w	r1, r7, #12
 8001be4:	2302      	movs	r3, #2
 8001be6:	2200      	movs	r2, #0
 8001be8:	f009 fa3a 	bl	800b060 <xQueueGenericSend>
                    break;
 8001bec:	e000      	b.n	8001bf0 <vDataProcessTask+0x3b0>
                    break;
 8001bee:	bf00      	nop
                }

                /* Mutex'i serbest bırak */
                xSemaphoreGive(xVehicleDataMutex);
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c30 <vDataProcessTask+0x3f0>)
 8001bf2:	6818      	ldr	r0, [r3, #0]
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	f009 fa31 	bl	800b060 <xQueueGenericSend>
        while (xQueueReceive(xCanRxQueue, &rxMessage, 0) == pdPASS) {
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001c34 <vDataProcessTask+0x3f4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001c06:	2200      	movs	r2, #0
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f009 fc6f 	bl	800b4ec <xQueueReceive>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	f43f ae3b 	beq.w	800188c <vDataProcessTask+0x4c>
            }
        }

        /* Veri işleme tamamlandı, diğer task'lara fırsat ver */
        taskYIELD();
 8001c16:	4b08      	ldr	r3, [pc, #32]	@ (8001c38 <vDataProcessTask+0x3f8>)
 8001c18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	f3bf 8f4f 	dsb	sy
 8001c22:	f3bf 8f6f 	isb	sy
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001c26:	e62b      	b.n	8001880 <vDataProcessTask+0x40>
 8001c28:	20000a5c 	.word	0x20000a5c
 8001c2c:	20000b7c 	.word	0x20000b7c
 8001c30:	20000b98 	.word	0x20000b98
 8001c34:	20000b68 	.word	0x20000b68
 8001c38:	e000ed04 	.word	0xe000ed04

08001c3c <vSpeedControlTask>:
    }
}

void vSpeedControlTask(void *pvParameters)
{
 8001c3c:	b5b0      	push	{r4, r5, r7, lr}
 8001c3e:	b098      	sub	sp, #96	@ 0x60
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
    CANMessage_t speedCommand;
    static uint16_t previous_target_speed = 0;

    /* Initialize CANMessage arrays properly */
    CANMessage_t statusRequests[4] = {
 8001c44:	4b26      	ldr	r3, [pc, #152]	@ (8001ce0 <vSpeedControlTask+0xa4>)
 8001c46:	f107 040c 	add.w	r4, r7, #12
 8001c4a:	461d      	mov	r5, r3
 8001c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001c5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {ONBOARD_CHARGER_STATUS_REQUEST_ID, {0x01, 0, 0, 0, 0, 0, 0, 0}, 1}
    };

    for(;;) {
        /* Target speed değişti mi kontrol et */
        if (speed_control.target_speed != previous_target_speed) {
 8001c60:	4b20      	ldr	r3, [pc, #128]	@ (8001ce4 <vSpeedControlTask+0xa8>)
 8001c62:	881a      	ldrh	r2, [r3, #0]
 8001c64:	4b20      	ldr	r3, [pc, #128]	@ (8001ce8 <vSpeedControlTask+0xac>)
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d020      	beq.n	8001cae <vSpeedControlTask+0x72>

            /* Hız komutu mesajı hazırla */
            speedCommand.id = MOTOR_SPEED_COMMAND_ID;
 8001c6c:	f240 2302 	movw	r3, #514	@ 0x202
 8001c70:	64fb      	str	r3, [r7, #76]	@ 0x4c
            speedCommand.dlc = 2;
 8001c72:	2302      	movs	r3, #2
 8001c74:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
            speedCommand.data[0] = speed_control.target_speed & 0xFF;        // LSB
 8001c78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce4 <vSpeedControlTask+0xa8>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
            speedCommand.data[1] = (speed_control.target_speed >> 8) & 0xFF; // MSB
 8001c82:	4b18      	ldr	r3, [pc, #96]	@ (8001ce4 <vSpeedControlTask+0xa8>)
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	0a1b      	lsrs	r3, r3, #8
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51

            /* Komutu TX queue'ya gönder */
            if (xQueueSend(xCanTxQueue, &speedCommand, pdMS_TO_TICKS(50)) == pdPASS) {
 8001c90:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <vSpeedControlTask+0xb0>)
 8001c92:	6818      	ldr	r0, [r3, #0]
 8001c94:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001c98:	2300      	movs	r3, #0
 8001c9a:	2232      	movs	r2, #50	@ 0x32
 8001c9c:	f009 f9e0 	bl	800b060 <xQueueGenericSend>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d103      	bne.n	8001cae <vSpeedControlTask+0x72>
                previous_target_speed = speed_control.target_speed;
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce4 <vSpeedControlTask+0xa8>)
 8001ca8:	881a      	ldrh	r2, [r3, #0]
 8001caa:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce8 <vSpeedControlTask+0xac>)
 8001cac:	801a      	strh	r2, [r3, #0]
            }
        }

        /* Her bir status request'i gönder */
        for (int i = 0; i < 4; i++) {
 8001cae:	2300      	movs	r3, #0
 8001cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001cb2:	e00d      	b.n	8001cd0 <vSpeedControlTask+0x94>
            xQueueSend(xCanTxQueue, &statusRequests[i], 0);
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8001cec <vSpeedControlTask+0xb0>)
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	f107 020c 	add.w	r2, r7, #12
 8001cbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	18d1      	adds	r1, r2, r3
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f009 f9cb 	bl	800b060 <xQueueGenericSend>
        for (int i = 0; i < 4; i++) {
 8001cca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ccc:	3301      	adds	r3, #1
 8001cce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001cd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	ddee      	ble.n	8001cb4 <vSpeedControlTask+0x78>
        }

        /* 200ms periyot */
        vTaskDelay(pdMS_TO_TICKS(200));
 8001cd6:	20c8      	movs	r0, #200	@ 0xc8
 8001cd8:	f00a fa14 	bl	800c104 <vTaskDelay>
        if (speed_control.target_speed != previous_target_speed) {
 8001cdc:	e7c0      	b.n	8001c60 <vSpeedControlTask+0x24>
 8001cde:	bf00      	nop
 8001ce0:	0801297c 	.word	0x0801297c
 8001ce4:	20000a38 	.word	0x20000a38
 8001ce8:	200010ae 	.word	0x200010ae
 8001cec:	20000b6c 	.word	0x20000b6c

08001cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cf6:	f001 fa1a 	bl	800312e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cfa:	f000 f9ef 	bl	80020dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cfe:	f000 fc95 	bl	800262c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001d02:	f000 fc35 	bl	8002570 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d06:	f000 fc63 	bl	80025d0 <MX_USB_OTG_FS_PCD_Init>
  MX_UART7_Init();
 8001d0a:	f000 fc01 	bl	8002510 <MX_UART7_Init>
  MX_CAN1_Init();
 8001d0e:	f000 fafb 	bl	8002308 <MX_CAN1_Init>
  MX_ADC1_Init();
 8001d12:	f000 fa55 	bl	80021c0 <MX_ADC1_Init>
  MX_FATFS_Init();
 8001d16:	f006 f82d 	bl	8007d74 <MX_FATFS_Init>
  MX_UART4_Init();
 8001d1a:	f000 fb99 	bl	8002450 <MX_UART4_Init>
  MX_ADC3_Init();
 8001d1e:	f000 faa1 	bl	8002264 <MX_ADC3_Init>
  MX_SPI1_Init();
 8001d22:	f000 fb57 	bl	80023d4 <MX_SPI1_Init>
  MX_UART5_Init();
 8001d26:	f000 fbc3 	bl	80024b0 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize all data structures */
  memset(&motor_data, 0, sizeof(MotorData_t));
 8001d2a:	2210      	movs	r2, #16
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	48b0      	ldr	r0, [pc, #704]	@ (8001ff0 <main+0x300>)
 8001d30:	f00d f9a0 	bl	800f074 <memset>
  memset(&bms_data, 0, sizeof(BMSData_t));
 8001d34:	2210      	movs	r2, #16
 8001d36:	2100      	movs	r1, #0
 8001d38:	48ae      	ldr	r0, [pc, #696]	@ (8001ff4 <main+0x304>)
 8001d3a:	f00d f99b 	bl	800f074 <memset>
  memset(&isolation_data, 0, sizeof(IsolationData_t));
 8001d3e:	2210      	movs	r2, #16
 8001d40:	2100      	movs	r1, #0
 8001d42:	48ad      	ldr	r0, [pc, #692]	@ (8001ff8 <main+0x308>)
 8001d44:	f00d f996 	bl	800f074 <memset>
  memset(&charger_data, 0, sizeof(OnboardChargerData_t));
 8001d48:	220c      	movs	r2, #12
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	48ab      	ldr	r0, [pc, #684]	@ (8001ffc <main+0x30c>)
 8001d4e:	f00d f991 	bl	800f074 <memset>
  memset(&safety_fault, 0, sizeof(SafetyFault_t));
 8001d52:	2220      	movs	r2, #32
 8001d54:	2100      	movs	r1, #0
 8001d56:	48aa      	ldr	r0, [pc, #680]	@ (8002000 <main+0x310>)
 8001d58:	f00d f98c 	bl	800f074 <memset>
  memset(&temperature_data, 0, sizeof(TemperatureData_t));
 8001d5c:	220c      	movs	r2, #12
 8001d5e:	2100      	movs	r1, #0
 8001d60:	48a8      	ldr	r0, [pc, #672]	@ (8002004 <main+0x314>)
 8001d62:	f00d f987 	bl	800f074 <memset>
  memset(&telemetry_data, 0, sizeof(TelemetryData_t));
 8001d66:	2214      	movs	r2, #20
 8001d68:	2100      	movs	r1, #0
 8001d6a:	48a7      	ldr	r0, [pc, #668]	@ (8002008 <main+0x318>)
 8001d6c:	f00d f982 	bl	800f074 <memset>
  memset(&gps_data, 0, sizeof(GPSData_t));
 8001d70:	2218      	movs	r2, #24
 8001d72:	2100      	movs	r1, #0
 8001d74:	48a5      	ldr	r0, [pc, #660]	@ (800200c <main+0x31c>)
 8001d76:	f00d f97d 	bl	800f074 <memset>
  memset(&light_data, 0, sizeof(LightData_t));
 8001d7a:	2210      	movs	r2, #16
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	48a4      	ldr	r0, [pc, #656]	@ (8002010 <main+0x320>)
 8001d80:	f00d f978 	bl	800f074 <memset>


  speed_control.target_speed = 60; // 60 km/h hedef hız
 8001d84:	4ba3      	ldr	r3, [pc, #652]	@ (8002014 <main+0x324>)
 8001d86:	223c      	movs	r2, #60	@ 0x3c
 8001d88:	801a      	strh	r2, [r3, #0]
  speed_control.speed_control_active = 1;
 8001d8a:	4ba2      	ldr	r3, [pc, #648]	@ (8002014 <main+0x324>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	709a      	strb	r2, [r3, #2]

  /* Safety/Fault system init */
  safety_fault.temperature_threshold = TEMP_THRESHOLD_DEFAULT;  // 55°C
 8001d90:	4b9b      	ldr	r3, [pc, #620]	@ (8002000 <main+0x310>)
 8001d92:	2237      	movs	r2, #55	@ 0x37
 8001d94:	821a      	strh	r2, [r3, #16]
  safety_fault.isolation_resistance_threshold = ISOLATION_RESISTANCE_THRESHOLD_DEFAULT;  // 100kΩ
 8001d96:	4b9a      	ldr	r3, [pc, #616]	@ (8002000 <main+0x310>)
 8001d98:	4a9f      	ldr	r2, [pc, #636]	@ (8002018 <main+0x328>)
 8001d9a:	615a      	str	r2, [r3, #20]
  safety_fault.isolation_capacitance_threshold = ISOLATION_CAPACITANCE_THRESHOLD_DEFAULT; // 5μF
 8001d9c:	4b98      	ldr	r3, [pc, #608]	@ (8002000 <main+0x310>)
 8001d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da2:	619a      	str	r2, [r3, #24]
  safety_fault.soc_low_threshold = SOC_LOW_THRESHOLD_DEFAULT;  // 20%
 8001da4:	4b96      	ldr	r3, [pc, #600]	@ (8002000 <main+0x310>)
 8001da6:	2214      	movs	r2, #20
 8001da8:	771a      	strb	r2, [r3, #28]
  safety_fault.soc_critical_threshold = SOC_CRITICAL_THRESHOLD_DEFAULT;  // 10%
 8001daa:	4b95      	ldr	r3, [pc, #596]	@ (8002000 <main+0x310>)
 8001dac:	220a      	movs	r2, #10
 8001dae:	775a      	strb	r2, [r3, #29]
  safety_fault.temp_fault_pin_active = 0;
 8001db0:	4b93      	ldr	r3, [pc, #588]	@ (8002000 <main+0x310>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	729a      	strb	r2, [r3, #10]
  light_data.darkness_threshold = DARKNESS_THRESHOLD_DEFAULT;
 8001db6:	4b96      	ldr	r3, [pc, #600]	@ (8002010 <main+0x320>)
 8001db8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001dbc:	609a      	str	r2, [r3, #8]

  /* Fan pinini başlangıçta kapalı tut */
  HAL_GPIO_WritePin(FAN_CONTROL_PIN_GPIO_Port, FAN_CONTROL_PIN_Pin, GPIO_PIN_RESET);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001dc4:	4895      	ldr	r0, [pc, #596]	@ (800201c <main+0x32c>)
 8001dc6:	f002 fe1d 	bl	8004a04 <HAL_GPIO_WritePin>

  /* Create FreeRTOS Objects */
  xCanRxQueue = xQueueCreate(15, sizeof(CANMessage_t));
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2110      	movs	r1, #16
 8001dce:	200f      	movs	r0, #15
 8001dd0:	f009 f837 	bl	800ae42 <xQueueGenericCreate>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4a92      	ldr	r2, [pc, #584]	@ (8002020 <main+0x330>)
 8001dd8:	6013      	str	r3, [r2, #0]
  xCanTxQueue = xQueueCreate(10, sizeof(CANMessage_t));
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2110      	movs	r1, #16
 8001dde:	200a      	movs	r0, #10
 8001de0:	f009 f82f 	bl	800ae42 <xQueueGenericCreate>
 8001de4:	4603      	mov	r3, r0
 8001de6:	4a8f      	ldr	r2, [pc, #572]	@ (8002024 <main+0x334>)
 8001de8:	6013      	str	r3, [r2, #0]
  xMotorDataQueue = xQueueCreate(1, sizeof(MotorData_t));
 8001dea:	2200      	movs	r2, #0
 8001dec:	2110      	movs	r1, #16
 8001dee:	2001      	movs	r0, #1
 8001df0:	f009 f827 	bl	800ae42 <xQueueGenericCreate>
 8001df4:	4603      	mov	r3, r0
 8001df6:	4a8c      	ldr	r2, [pc, #560]	@ (8002028 <main+0x338>)
 8001df8:	6013      	str	r3, [r2, #0]
  xBMSDataQueue = xQueueCreate(1, sizeof(BMSData_t));
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2110      	movs	r1, #16
 8001dfe:	2001      	movs	r0, #1
 8001e00:	f009 f81f 	bl	800ae42 <xQueueGenericCreate>
 8001e04:	4603      	mov	r3, r0
 8001e06:	4a89      	ldr	r2, [pc, #548]	@ (800202c <main+0x33c>)
 8001e08:	6013      	str	r3, [r2, #0]
  xIsolationDataQueue = xQueueCreate(1, sizeof(IsolationData_t));
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2110      	movs	r1, #16
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f009 f817 	bl	800ae42 <xQueueGenericCreate>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4a86      	ldr	r2, [pc, #536]	@ (8002030 <main+0x340>)
 8001e18:	6013      	str	r3, [r2, #0]
  xChargerDataQueue = xQueueCreate(1, sizeof(OnboardChargerData_t));
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	210c      	movs	r1, #12
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f009 f80f 	bl	800ae42 <xQueueGenericCreate>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4a83      	ldr	r2, [pc, #524]	@ (8002034 <main+0x344>)
 8001e28:	6013      	str	r3, [r2, #0]
  xTemperatureDataQueue = xQueueCreate(1, sizeof(TemperatureData_t));
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	210c      	movs	r1, #12
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f009 f807 	bl	800ae42 <xQueueGenericCreate>
 8001e34:	4603      	mov	r3, r0
 8001e36:	4a80      	ldr	r2, [pc, #512]	@ (8002038 <main+0x348>)
 8001e38:	6013      	str	r3, [r2, #0]
  xTelemetryDataQueue = xQueueCreate(1, sizeof(TelemetryData_t));
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2114      	movs	r1, #20
 8001e3e:	2001      	movs	r0, #1
 8001e40:	f008 ffff 	bl	800ae42 <xQueueGenericCreate>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4a7d      	ldr	r2, [pc, #500]	@ (800203c <main+0x34c>)
 8001e48:	6013      	str	r3, [r2, #0]
  xGPSDataQueue = xQueueCreate(1, sizeof(GPSData_t));
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2118      	movs	r1, #24
 8001e4e:	2001      	movs	r0, #1
 8001e50:	f008 fff7 	bl	800ae42 <xQueueGenericCreate>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4a7a      	ldr	r2, [pc, #488]	@ (8002040 <main+0x350>)
 8001e58:	6013      	str	r3, [r2, #0]
  xUART7TelemetryQueue = xQueueCreate(5, sizeof(UART7_TelemetryPacket_t));
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2110      	movs	r1, #16
 8001e5e:	2005      	movs	r0, #5
 8001e60:	f008 ffef 	bl	800ae42 <xQueueGenericCreate>
 8001e64:	4603      	mov	r3, r0
 8001e66:	4a77      	ldr	r2, [pc, #476]	@ (8002044 <main+0x354>)
 8001e68:	6013      	str	r3, [r2, #0]
  xUART7GPSQueue = xQueueCreate(5, sizeof(UART7_GPSPacket_t));
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2110      	movs	r1, #16
 8001e6e:	2005      	movs	r0, #5
 8001e70:	f008 ffe7 	bl	800ae42 <xQueueGenericCreate>
 8001e74:	4603      	mov	r3, r0
 8001e76:	4a74      	ldr	r2, [pc, #464]	@ (8002048 <main+0x358>)
 8001e78:	6013      	str	r3, [r2, #0]
  xLightDataQueue = xQueueCreate(1, sizeof(LightData_t));
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2110      	movs	r1, #16
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f008 ffdf 	bl	800ae42 <xQueueGenericCreate>
 8001e84:	4603      	mov	r3, r0
 8001e86:	4a71      	ldr	r2, [pc, #452]	@ (800204c <main+0x35c>)
 8001e88:	6013      	str	r3, [r2, #0]

  xVehicleDataMutex = xSemaphoreCreateMutex();
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	f009 f859 	bl	800af42 <xQueueCreateMutex>
 8001e90:	4603      	mov	r3, r0
 8001e92:	4a6f      	ldr	r2, [pc, #444]	@ (8002050 <main+0x360>)
 8001e94:	6013      	str	r3, [r2, #0]
  xUART7TxMutex = xSemaphoreCreateMutex();
 8001e96:	2001      	movs	r0, #1
 8001e98:	f009 f853 	bl	800af42 <xQueueCreateMutex>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	4a6d      	ldr	r2, [pc, #436]	@ (8002054 <main+0x364>)
 8001ea0:	6013      	str	r3, [r2, #0]

  if (xCanRxQueue == NULL || xCanTxQueue == NULL ||
 8001ea2:	4b5f      	ldr	r3, [pc, #380]	@ (8002020 <main+0x330>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d033      	beq.n	8001f12 <main+0x222>
 8001eaa:	4b5e      	ldr	r3, [pc, #376]	@ (8002024 <main+0x334>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d02f      	beq.n	8001f12 <main+0x222>
      xMotorDataQueue == NULL || xBMSDataQueue == NULL ||
 8001eb2:	4b5d      	ldr	r3, [pc, #372]	@ (8002028 <main+0x338>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
  if (xCanRxQueue == NULL || xCanTxQueue == NULL ||
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d02b      	beq.n	8001f12 <main+0x222>
      xMotorDataQueue == NULL || xBMSDataQueue == NULL ||
 8001eba:	4b5c      	ldr	r3, [pc, #368]	@ (800202c <main+0x33c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d027      	beq.n	8001f12 <main+0x222>
      xIsolationDataQueue == NULL || xChargerDataQueue == NULL ||
 8001ec2:	4b5b      	ldr	r3, [pc, #364]	@ (8002030 <main+0x340>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
      xMotorDataQueue == NULL || xBMSDataQueue == NULL ||
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d023      	beq.n	8001f12 <main+0x222>
      xIsolationDataQueue == NULL || xChargerDataQueue == NULL ||
 8001eca:	4b5a      	ldr	r3, [pc, #360]	@ (8002034 <main+0x344>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d01f      	beq.n	8001f12 <main+0x222>
      xTemperatureDataQueue == NULL || xTelemetryDataQueue == NULL ||
 8001ed2:	4b59      	ldr	r3, [pc, #356]	@ (8002038 <main+0x348>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
      xIsolationDataQueue == NULL || xChargerDataQueue == NULL ||
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d01b      	beq.n	8001f12 <main+0x222>
      xTemperatureDataQueue == NULL || xTelemetryDataQueue == NULL ||
 8001eda:	4b58      	ldr	r3, [pc, #352]	@ (800203c <main+0x34c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d017      	beq.n	8001f12 <main+0x222>
      xGPSDataQueue == NULL || xUART7TelemetryQueue == NULL ||
 8001ee2:	4b57      	ldr	r3, [pc, #348]	@ (8002040 <main+0x350>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
      xTemperatureDataQueue == NULL || xTelemetryDataQueue == NULL ||
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d013      	beq.n	8001f12 <main+0x222>
      xGPSDataQueue == NULL || xUART7TelemetryQueue == NULL ||
 8001eea:	4b56      	ldr	r3, [pc, #344]	@ (8002044 <main+0x354>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00f      	beq.n	8001f12 <main+0x222>
      xUART7GPSQueue == NULL || xVehicleDataMutex == NULL ||
 8001ef2:	4b55      	ldr	r3, [pc, #340]	@ (8002048 <main+0x358>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
      xGPSDataQueue == NULL || xUART7TelemetryQueue == NULL ||
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00b      	beq.n	8001f12 <main+0x222>
      xUART7GPSQueue == NULL || xVehicleDataMutex == NULL ||
 8001efa:	4b55      	ldr	r3, [pc, #340]	@ (8002050 <main+0x360>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d007      	beq.n	8001f12 <main+0x222>
      xUART7TxMutex == NULL || xLightDataQueue == NULL) {
 8001f02:	4b54      	ldr	r3, [pc, #336]	@ (8002054 <main+0x364>)
 8001f04:	681b      	ldr	r3, [r3, #0]
      xUART7GPSQueue == NULL || xVehicleDataMutex == NULL ||
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <main+0x222>
      xUART7TxMutex == NULL || xLightDataQueue == NULL) {
 8001f0a:	4b50      	ldr	r3, [pc, #320]	@ (800204c <main+0x35c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <main+0x226>
      Error_Handler();
 8001f12:	f000 fce1 	bl	80028d8 <Error_Handler>
  }

  /* Create FreeRTOS Tasks */
  xTaskCreate(vCanRxTask, "CAN_RX", CAN_TASK_STACK_SIZE, NULL,
 8001f16:	4b50      	ldr	r3, [pc, #320]	@ (8002058 <main+0x368>)
 8001f18:	9301      	str	r3, [sp, #4]
 8001f1a:	2337      	movs	r3, #55	@ 0x37
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f24:	494d      	ldr	r1, [pc, #308]	@ (800205c <main+0x36c>)
 8001f26:	484e      	ldr	r0, [pc, #312]	@ (8002060 <main+0x370>)
 8001f28:	f009 ffa4 	bl	800be74 <xTaskCreate>
             CAN_RX_TASK_PRIORITY, &xCanRxTaskHandle);

  xTaskCreate(vCanTxTask, "CAN_TX", CAN_TASK_STACK_SIZE, NULL,
 8001f2c:	4b4d      	ldr	r3, [pc, #308]	@ (8002064 <main+0x374>)
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	2336      	movs	r3, #54	@ 0x36
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	2300      	movs	r3, #0
 8001f36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f3a:	494b      	ldr	r1, [pc, #300]	@ (8002068 <main+0x378>)
 8001f3c:	484b      	ldr	r0, [pc, #300]	@ (800206c <main+0x37c>)
 8001f3e:	f009 ff99 	bl	800be74 <xTaskCreate>
             CAN_TX_TASK_PRIORITY, &xCanTxTaskHandle);

  xTaskCreate(vDataProcessTask, "DATA_PROC", DATA_PROCESS_STACK_SIZE, NULL,
 8001f42:	4b4b      	ldr	r3, [pc, #300]	@ (8002070 <main+0x380>)
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	2335      	movs	r3, #53	@ 0x35
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f50:	4948      	ldr	r1, [pc, #288]	@ (8002074 <main+0x384>)
 8001f52:	4849      	ldr	r0, [pc, #292]	@ (8002078 <main+0x388>)
 8001f54:	f009 ff8e 	bl	800be74 <xTaskCreate>
             DATA_PROCESS_TASK_PRIORITY, &xDataProcessTaskHandle);

  xTaskCreate(vSafetyFaultTask, "SAFETY_FAULT", SAFETY_FAULT_STACK_SIZE, NULL,
 8001f58:	4b48      	ldr	r3, [pc, #288]	@ (800207c <main+0x38c>)
 8001f5a:	9301      	str	r3, [sp, #4]
 8001f5c:	2334      	movs	r3, #52	@ 0x34
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	2300      	movs	r3, #0
 8001f62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f66:	4946      	ldr	r1, [pc, #280]	@ (8002080 <main+0x390>)
 8001f68:	4846      	ldr	r0, [pc, #280]	@ (8002084 <main+0x394>)
 8001f6a:	f009 ff83 	bl	800be74 <xTaskCreate>
             SAFETY_FAULT_TASK_PRIORITY, &xSafetyFaultTaskHandle);

  xTaskCreate(vTelemetryTask, "TELEMETRY", TELEMETRY_STACK_SIZE, NULL,
 8001f6e:	4b46      	ldr	r3, [pc, #280]	@ (8002088 <main+0x398>)
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	2332      	movs	r3, #50	@ 0x32
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	2300      	movs	r3, #0
 8001f78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f7c:	4943      	ldr	r1, [pc, #268]	@ (800208c <main+0x39c>)
 8001f7e:	4844      	ldr	r0, [pc, #272]	@ (8002090 <main+0x3a0>)
 8001f80:	f009 ff78 	bl	800be74 <xTaskCreate>
             TELEMETRY_TASK_PRIORITY, &xTelemetryTaskHandle);

  xTaskCreate(vSpeedControlTask, "SPEED_CMD", SPEED_CONTROL_STACK_SIZE, NULL,
 8001f84:	4b43      	ldr	r3, [pc, #268]	@ (8002094 <main+0x3a4>)
 8001f86:	9301      	str	r3, [sp, #4]
 8001f88:	2333      	movs	r3, #51	@ 0x33
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f92:	4941      	ldr	r1, [pc, #260]	@ (8002098 <main+0x3a8>)
 8001f94:	4841      	ldr	r0, [pc, #260]	@ (800209c <main+0x3ac>)
 8001f96:	f009 ff6d 	bl	800be74 <xTaskCreate>
             SPEED_CONTROL_TASK_PRIORITY, &xSpeedControlTaskHandle);

  xTaskCreate(vUART7TelemetryTask, "UART7_TEL", UART7_TELEMETRY_STACK_SIZE, NULL,
 8001f9a:	4b41      	ldr	r3, [pc, #260]	@ (80020a0 <main+0x3b0>)
 8001f9c:	9301      	str	r3, [sp, #4]
 8001f9e:	2331      	movs	r3, #49	@ 0x31
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fa8:	493e      	ldr	r1, [pc, #248]	@ (80020a4 <main+0x3b4>)
 8001faa:	483f      	ldr	r0, [pc, #252]	@ (80020a8 <main+0x3b8>)
 8001fac:	f009 ff62 	bl	800be74 <xTaskCreate>
             UART7_TELEMETRY_TASK_PRIORITY, &xUART7TelemetryTaskHandle);

  xTaskCreate(vUART7GPSTask, "UART7_GPS", UART7_GPS_STACK_SIZE, NULL,
 8001fb0:	4b3e      	ldr	r3, [pc, #248]	@ (80020ac <main+0x3bc>)
 8001fb2:	9301      	str	r3, [sp, #4]
 8001fb4:	2331      	movs	r3, #49	@ 0x31
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fbe:	493c      	ldr	r1, [pc, #240]	@ (80020b0 <main+0x3c0>)
 8001fc0:	483c      	ldr	r0, [pc, #240]	@ (80020b4 <main+0x3c4>)
 8001fc2:	f009 ff57 	bl	800be74 <xTaskCreate>
             UART7_GPS_TASK_PRIORITY, &xUART7GPSTaskHandle);
  xTaskCreate(vLightDetectTask, "LIGHT_DET", LIGHT_DETECT_STACK_SIZE, NULL,
 8001fc6:	4b3c      	ldr	r3, [pc, #240]	@ (80020b8 <main+0x3c8>)
 8001fc8:	9301      	str	r3, [sp, #4]
 8001fca:	232e      	movs	r3, #46	@ 0x2e
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fd4:	4939      	ldr	r1, [pc, #228]	@ (80020bc <main+0x3cc>)
 8001fd6:	483a      	ldr	r0, [pc, #232]	@ (80020c0 <main+0x3d0>)
 8001fd8:	f009 ff4c 	bl	800be74 <xTaskCreate>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001fdc:	f008 fa88 	bl	800a4f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001fe0:	4a38      	ldr	r2, [pc, #224]	@ (80020c4 <main+0x3d4>)
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4838      	ldr	r0, [pc, #224]	@ (80020c8 <main+0x3d8>)
 8001fe6:	f008 faed 	bl	800a5c4 <osThreadNew>
 8001fea:	4603      	mov	r3, r0
 8001fec:	e06e      	b.n	80020cc <main+0x3dc>
 8001fee:	bf00      	nop
 8001ff0:	20000a28 	.word	0x20000a28
 8001ff4:	20000a3c 	.word	0x20000a3c
 8001ff8:	20000a4c 	.word	0x20000a4c
 8001ffc:	20000a5c 	.word	0x20000a5c
 8002000:	20000a68 	.word	0x20000a68
 8002004:	20000a88 	.word	0x20000a88
 8002008:	20000a94 	.word	0x20000a94
 800200c:	20000aa8 	.word	0x20000aa8
 8002010:	20001090 	.word	0x20001090
 8002014:	20000a38 	.word	0x20000a38
 8002018:	000186a0 	.word	0x000186a0
 800201c:	40021000 	.word	0x40021000
 8002020:	20000b68 	.word	0x20000b68
 8002024:	20000b6c 	.word	0x20000b6c
 8002028:	20000b70 	.word	0x20000b70
 800202c:	20000b74 	.word	0x20000b74
 8002030:	20000b78 	.word	0x20000b78
 8002034:	20000b7c 	.word	0x20000b7c
 8002038:	20000b80 	.word	0x20000b80
 800203c:	20000b84 	.word	0x20000b84
 8002040:	20000b88 	.word	0x20000b88
 8002044:	20000b8c 	.word	0x20000b8c
 8002048:	20000b90 	.word	0x20000b90
 800204c:	20000b94 	.word	0x20000b94
 8002050:	20000b98 	.word	0x20000b98
 8002054:	20000b9c 	.word	0x20000b9c
 8002058:	20000b44 	.word	0x20000b44
 800205c:	080129bc 	.word	0x080129bc
 8002060:	08001739 	.word	0x08001739
 8002064:	20000b48 	.word	0x20000b48
 8002068:	080129c4 	.word	0x080129c4
 800206c:	080017bd 	.word	0x080017bd
 8002070:	20000b4c 	.word	0x20000b4c
 8002074:	080129cc 	.word	0x080129cc
 8002078:	08001841 	.word	0x08001841
 800207c:	20000b54 	.word	0x20000b54
 8002080:	080129d8 	.word	0x080129d8
 8002084:	080012bd 	.word	0x080012bd
 8002088:	20000b58 	.word	0x20000b58
 800208c:	080129e8 	.word	0x080129e8
 8002090:	08001165 	.word	0x08001165
 8002094:	20000b50 	.word	0x20000b50
 8002098:	080129f4 	.word	0x080129f4
 800209c:	08001c3d 	.word	0x08001c3d
 80020a0:	20000b5c 	.word	0x20000b5c
 80020a4:	08012a00 	.word	0x08012a00
 80020a8:	08000f5d 	.word	0x08000f5d
 80020ac:	20000b60 	.word	0x20000b60
 80020b0:	08012a0c 	.word	0x08012a0c
 80020b4:	08001029 	.word	0x08001029
 80020b8:	20000b64 	.word	0x20000b64
 80020bc:	08012a18 	.word	0x08012a18
 80020c0:	08000b6d 	.word	0x08000b6d
 80020c4:	08012a80 	.word	0x08012a80
 80020c8:	080028c9 	.word	0x080028c9
 80020cc:	4a02      	ldr	r2, [pc, #8]	@ (80020d8 <main+0x3e8>)
 80020ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80020d0:	f008 fa42 	bl	800a558 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80020d4:	bf00      	nop
 80020d6:	e7fd      	b.n	80020d4 <main+0x3e4>
 80020d8:	20000a24 	.word	0x20000a24

080020dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b094      	sub	sp, #80	@ 0x50
 80020e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020e2:	f107 031c 	add.w	r3, r7, #28
 80020e6:	2234      	movs	r2, #52	@ 0x34
 80020e8:	2100      	movs	r1, #0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f00c ffc2 	bl	800f074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020f0:	f107 0308 	add.w	r3, r7, #8
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002100:	f002 fdd4 	bl	8004cac <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002104:	4b2c      	ldr	r3, [pc, #176]	@ (80021b8 <SystemClock_Config+0xdc>)
 8002106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002108:	4a2b      	ldr	r2, [pc, #172]	@ (80021b8 <SystemClock_Config+0xdc>)
 800210a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800210e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002110:	4b29      	ldr	r3, [pc, #164]	@ (80021b8 <SystemClock_Config+0xdc>)
 8002112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002114:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800211c:	4b27      	ldr	r3, [pc, #156]	@ (80021bc <SystemClock_Config+0xe0>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002124:	4a25      	ldr	r2, [pc, #148]	@ (80021bc <SystemClock_Config+0xe0>)
 8002126:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	4b23      	ldr	r3, [pc, #140]	@ (80021bc <SystemClock_Config+0xe0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002134:	603b      	str	r3, [r7, #0]
 8002136:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002138:	2301      	movs	r3, #1
 800213a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800213c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002140:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002142:	2302      	movs	r3, #2
 8002144:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002146:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800214a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800214c:	2304      	movs	r3, #4
 800214e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002150:	2360      	movs	r3, #96	@ 0x60
 8002152:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002154:	2302      	movs	r3, #2
 8002156:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002158:	2304      	movs	r3, #4
 800215a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800215c:	2302      	movs	r3, #2
 800215e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002160:	f107 031c 	add.w	r3, r7, #28
 8002164:	4618      	mov	r0, r3
 8002166:	f002 fe01 	bl	8004d6c <HAL_RCC_OscConfig>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002170:	f000 fbb2 	bl	80028d8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002174:	f002 fdaa 	bl	8004ccc <HAL_PWREx_EnableOverDrive>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800217e:	f000 fbab 	bl	80028d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002182:	230f      	movs	r3, #15
 8002184:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002186:	2302      	movs	r3, #2
 8002188:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800218e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002192:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002194:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002198:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800219a:	f107 0308 	add.w	r3, r7, #8
 800219e:	2103      	movs	r1, #3
 80021a0:	4618      	mov	r0, r3
 80021a2:	f003 f891 	bl	80052c8 <HAL_RCC_ClockConfig>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80021ac:	f000 fb94 	bl	80028d8 <Error_Handler>
  }
}
 80021b0:	bf00      	nop
 80021b2:	3750      	adds	r7, #80	@ 0x50
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40007000 	.word	0x40007000

080021c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80021c6:	463b      	mov	r3, r7
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80021d2:	4b21      	ldr	r3, [pc, #132]	@ (8002258 <MX_ADC1_Init+0x98>)
 80021d4:	4a21      	ldr	r2, [pc, #132]	@ (800225c <MX_ADC1_Init+0x9c>)
 80021d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80021d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002258 <MX_ADC1_Init+0x98>)
 80021da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80021de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80021e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002258 <MX_ADC1_Init+0x98>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80021e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002258 <MX_ADC1_Init+0x98>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80021ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002258 <MX_ADC1_Init+0x98>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80021f2:	4b19      	ldr	r3, [pc, #100]	@ (8002258 <MX_ADC1_Init+0x98>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021fa:	4b17      	ldr	r3, [pc, #92]	@ (8002258 <MX_ADC1_Init+0x98>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002200:	4b15      	ldr	r3, [pc, #84]	@ (8002258 <MX_ADC1_Init+0x98>)
 8002202:	4a17      	ldr	r2, [pc, #92]	@ (8002260 <MX_ADC1_Init+0xa0>)
 8002204:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002206:	4b14      	ldr	r3, [pc, #80]	@ (8002258 <MX_ADC1_Init+0x98>)
 8002208:	2200      	movs	r2, #0
 800220a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800220c:	4b12      	ldr	r3, [pc, #72]	@ (8002258 <MX_ADC1_Init+0x98>)
 800220e:	2201      	movs	r2, #1
 8002210:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002212:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <MX_ADC1_Init+0x98>)
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800221a:	4b0f      	ldr	r3, [pc, #60]	@ (8002258 <MX_ADC1_Init+0x98>)
 800221c:	2201      	movs	r2, #1
 800221e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002220:	480d      	ldr	r0, [pc, #52]	@ (8002258 <MX_ADC1_Init+0x98>)
 8002222:	f001 f805 	bl	8003230 <HAL_ADC_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800222c:	f000 fb54 	bl	80028d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002230:	230a      	movs	r3, #10
 8002232:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002234:	2301      	movs	r3, #1
 8002236:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002238:	2300      	movs	r3, #0
 800223a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800223c:	463b      	mov	r3, r7
 800223e:	4619      	mov	r1, r3
 8002240:	4805      	ldr	r0, [pc, #20]	@ (8002258 <MX_ADC1_Init+0x98>)
 8002242:	f001 f9d3 	bl	80035ec <HAL_ADC_ConfigChannel>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800224c:	f000 fb44 	bl	80028d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002250:	bf00      	nop
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000208 	.word	0x20000208
 800225c:	40012000 	.word	0x40012000
 8002260:	0f000001 	.word	0x0f000001

08002264 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800226a:	463b      	mov	r3, r7
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002276:	4b21      	ldr	r3, [pc, #132]	@ (80022fc <MX_ADC3_Init+0x98>)
 8002278:	4a21      	ldr	r2, [pc, #132]	@ (8002300 <MX_ADC3_Init+0x9c>)
 800227a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800227c:	4b1f      	ldr	r3, [pc, #124]	@ (80022fc <MX_ADC3_Init+0x98>)
 800227e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002282:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002284:	4b1d      	ldr	r3, [pc, #116]	@ (80022fc <MX_ADC3_Init+0x98>)
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800228a:	4b1c      	ldr	r3, [pc, #112]	@ (80022fc <MX_ADC3_Init+0x98>)
 800228c:	2200      	movs	r2, #0
 800228e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002290:	4b1a      	ldr	r3, [pc, #104]	@ (80022fc <MX_ADC3_Init+0x98>)
 8002292:	2200      	movs	r2, #0
 8002294:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002296:	4b19      	ldr	r3, [pc, #100]	@ (80022fc <MX_ADC3_Init+0x98>)
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800229e:	4b17      	ldr	r3, [pc, #92]	@ (80022fc <MX_ADC3_Init+0x98>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022a4:	4b15      	ldr	r3, [pc, #84]	@ (80022fc <MX_ADC3_Init+0x98>)
 80022a6:	4a17      	ldr	r2, [pc, #92]	@ (8002304 <MX_ADC3_Init+0xa0>)
 80022a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022aa:	4b14      	ldr	r3, [pc, #80]	@ (80022fc <MX_ADC3_Init+0x98>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80022b0:	4b12      	ldr	r3, [pc, #72]	@ (80022fc <MX_ADC3_Init+0x98>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80022b6:	4b11      	ldr	r3, [pc, #68]	@ (80022fc <MX_ADC3_Init+0x98>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022be:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <MX_ADC3_Init+0x98>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80022c4:	480d      	ldr	r0, [pc, #52]	@ (80022fc <MX_ADC3_Init+0x98>)
 80022c6:	f000 ffb3 	bl	8003230 <HAL_ADC_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80022d0:	f000 fb02 	bl	80028d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80022d4:	2306      	movs	r3, #6
 80022d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022d8:	2301      	movs	r3, #1
 80022da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80022dc:	2300      	movs	r3, #0
 80022de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80022e0:	463b      	mov	r3, r7
 80022e2:	4619      	mov	r1, r3
 80022e4:	4805      	ldr	r0, [pc, #20]	@ (80022fc <MX_ADC3_Init+0x98>)
 80022e6:	f001 f981 	bl	80035ec <HAL_ADC_ConfigChannel>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80022f0:	f000 faf2 	bl	80028d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80022f4:	bf00      	nop
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000250 	.word	0x20000250
 8002300:	40012200 	.word	0x40012200
 8002304:	0f000001 	.word	0x0f000001

08002308 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	@ 0x28
 800230c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800230e:	4b2f      	ldr	r3, [pc, #188]	@ (80023cc <MX_CAN1_Init+0xc4>)
 8002310:	4a2f      	ldr	r2, [pc, #188]	@ (80023d0 <MX_CAN1_Init+0xc8>)
 8002312:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8002314:	4b2d      	ldr	r3, [pc, #180]	@ (80023cc <MX_CAN1_Init+0xc4>)
 8002316:	2210      	movs	r2, #16
 8002318:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800231a:	4b2c      	ldr	r3, [pc, #176]	@ (80023cc <MX_CAN1_Init+0xc4>)
 800231c:	2200      	movs	r2, #0
 800231e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002320:	4b2a      	ldr	r3, [pc, #168]	@ (80023cc <MX_CAN1_Init+0xc4>)
 8002322:	2200      	movs	r2, #0
 8002324:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8002326:	4b29      	ldr	r3, [pc, #164]	@ (80023cc <MX_CAN1_Init+0xc4>)
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800232c:	4b27      	ldr	r3, [pc, #156]	@ (80023cc <MX_CAN1_Init+0xc4>)
 800232e:	2200      	movs	r2, #0
 8002330:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002332:	4b26      	ldr	r3, [pc, #152]	@ (80023cc <MX_CAN1_Init+0xc4>)
 8002334:	2200      	movs	r2, #0
 8002336:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002338:	4b24      	ldr	r3, [pc, #144]	@ (80023cc <MX_CAN1_Init+0xc4>)
 800233a:	2200      	movs	r2, #0
 800233c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800233e:	4b23      	ldr	r3, [pc, #140]	@ (80023cc <MX_CAN1_Init+0xc4>)
 8002340:	2200      	movs	r2, #0
 8002342:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002344:	4b21      	ldr	r3, [pc, #132]	@ (80023cc <MX_CAN1_Init+0xc4>)
 8002346:	2200      	movs	r2, #0
 8002348:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800234a:	4b20      	ldr	r3, [pc, #128]	@ (80023cc <MX_CAN1_Init+0xc4>)
 800234c:	2200      	movs	r2, #0
 800234e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002350:	4b1e      	ldr	r3, [pc, #120]	@ (80023cc <MX_CAN1_Init+0xc4>)
 8002352:	2200      	movs	r2, #0
 8002354:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002356:	481d      	ldr	r0, [pc, #116]	@ (80023cc <MX_CAN1_Init+0xc4>)
 8002358:	f001 fb9c 	bl	8003a94 <HAL_CAN_Init>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8002362:	f000 fab9 	bl	80028d8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* DÜZELTME: CAN Filter Configuration eklendi */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8002366:	2301      	movs	r3, #1
 8002368:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;
 800236a:	2312      	movs	r3, #18
 800236c:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x0000;
 8002372:	2300      	movs	r3, #0
 8002374:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8002376:	2300      	movs	r3, #0
 8002378:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x0000;
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002382:	2300      	movs	r3, #0
 8002384:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002386:	2301      	movs	r3, #1
 8002388:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;
 800238a:	2314      	movs	r3, #20
 800238c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig) != HAL_OK) {
 800238e:	463b      	mov	r3, r7
 8002390:	4619      	mov	r1, r3
 8002392:	480e      	ldr	r0, [pc, #56]	@ (80023cc <MX_CAN1_Init+0xc4>)
 8002394:	f001 fc7a 	bl	8003c8c <HAL_CAN_ConfigFilter>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_CAN1_Init+0x9a>
      Error_Handler();
 800239e:	f000 fa9b 	bl	80028d8 <Error_Handler>
  }

  /* CAN Start */
  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80023a2:	480a      	ldr	r0, [pc, #40]	@ (80023cc <MX_CAN1_Init+0xc4>)
 80023a4:	f001 fd5e 	bl	8003e64 <HAL_CAN_Start>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_CAN1_Init+0xaa>
      Error_Handler();
 80023ae:	f000 fa93 	bl	80028d8 <Error_Handler>
  }

  /* CAN Interrupt Enable */
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 80023b2:	2102      	movs	r1, #2
 80023b4:	4805      	ldr	r0, [pc, #20]	@ (80023cc <MX_CAN1_Init+0xc4>)
 80023b6:	f001 ffaf 	bl	8004318 <HAL_CAN_ActivateNotification>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_CAN1_Init+0xbc>
      Error_Handler();
 80023c0:	f000 fa8a 	bl	80028d8 <Error_Handler>
  }

  /* USER CODE END CAN1_Init 2 */

}
 80023c4:	bf00      	nop
 80023c6:	3728      	adds	r7, #40	@ 0x28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000298 	.word	0x20000298
 80023d0:	40006400 	.word	0x40006400

080023d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80023d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002448 <MX_SPI1_Init+0x74>)
 80023da:	4a1c      	ldr	r2, [pc, #112]	@ (800244c <MX_SPI1_Init+0x78>)
 80023dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023de:	4b1a      	ldr	r3, [pc, #104]	@ (8002448 <MX_SPI1_Init+0x74>)
 80023e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80023e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023e6:	4b18      	ldr	r3, [pc, #96]	@ (8002448 <MX_SPI1_Init+0x74>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80023ec:	4b16      	ldr	r3, [pc, #88]	@ (8002448 <MX_SPI1_Init+0x74>)
 80023ee:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80023f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023f4:	4b14      	ldr	r3, [pc, #80]	@ (8002448 <MX_SPI1_Init+0x74>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023fa:	4b13      	ldr	r3, [pc, #76]	@ (8002448 <MX_SPI1_Init+0x74>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002400:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <MX_SPI1_Init+0x74>)
 8002402:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002406:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002408:	4b0f      	ldr	r3, [pc, #60]	@ (8002448 <MX_SPI1_Init+0x74>)
 800240a:	2200      	movs	r2, #0
 800240c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800240e:	4b0e      	ldr	r3, [pc, #56]	@ (8002448 <MX_SPI1_Init+0x74>)
 8002410:	2200      	movs	r2, #0
 8002412:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002414:	4b0c      	ldr	r3, [pc, #48]	@ (8002448 <MX_SPI1_Init+0x74>)
 8002416:	2200      	movs	r2, #0
 8002418:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800241a:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <MX_SPI1_Init+0x74>)
 800241c:	2200      	movs	r2, #0
 800241e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002420:	4b09      	ldr	r3, [pc, #36]	@ (8002448 <MX_SPI1_Init+0x74>)
 8002422:	2207      	movs	r2, #7
 8002424:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002426:	4b08      	ldr	r3, [pc, #32]	@ (8002448 <MX_SPI1_Init+0x74>)
 8002428:	2200      	movs	r2, #0
 800242a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800242c:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <MX_SPI1_Init+0x74>)
 800242e:	2208      	movs	r2, #8
 8002430:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002432:	4805      	ldr	r0, [pc, #20]	@ (8002448 <MX_SPI1_Init+0x74>)
 8002434:	f003 fd96 	bl	8005f64 <HAL_SPI_Init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800243e:	f000 fa4b 	bl	80028d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	200002c0 	.word	0x200002c0
 800244c:	40013000 	.word	0x40013000

08002450 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002454:	4b14      	ldr	r3, [pc, #80]	@ (80024a8 <MX_UART4_Init+0x58>)
 8002456:	4a15      	ldr	r2, [pc, #84]	@ (80024ac <MX_UART4_Init+0x5c>)
 8002458:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800245a:	4b13      	ldr	r3, [pc, #76]	@ (80024a8 <MX_UART4_Init+0x58>)
 800245c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002460:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002462:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <MX_UART4_Init+0x58>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002468:	4b0f      	ldr	r3, [pc, #60]	@ (80024a8 <MX_UART4_Init+0x58>)
 800246a:	2200      	movs	r2, #0
 800246c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800246e:	4b0e      	ldr	r3, [pc, #56]	@ (80024a8 <MX_UART4_Init+0x58>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002474:	4b0c      	ldr	r3, [pc, #48]	@ (80024a8 <MX_UART4_Init+0x58>)
 8002476:	220c      	movs	r2, #12
 8002478:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800247a:	4b0b      	ldr	r3, [pc, #44]	@ (80024a8 <MX_UART4_Init+0x58>)
 800247c:	2200      	movs	r2, #0
 800247e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002480:	4b09      	ldr	r3, [pc, #36]	@ (80024a8 <MX_UART4_Init+0x58>)
 8002482:	2200      	movs	r2, #0
 8002484:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002486:	4b08      	ldr	r3, [pc, #32]	@ (80024a8 <MX_UART4_Init+0x58>)
 8002488:	2200      	movs	r2, #0
 800248a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800248c:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <MX_UART4_Init+0x58>)
 800248e:	2200      	movs	r2, #0
 8002490:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002492:	4805      	ldr	r0, [pc, #20]	@ (80024a8 <MX_UART4_Init+0x58>)
 8002494:	f003 fe11 	bl	80060ba <HAL_UART_Init>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800249e:	f000 fa1b 	bl	80028d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000324 	.word	0x20000324
 80024ac:	40004c00 	.word	0x40004c00

080024b0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80024b4:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <MX_UART5_Init+0x58>)
 80024b6:	4a15      	ldr	r2, [pc, #84]	@ (800250c <MX_UART5_Init+0x5c>)
 80024b8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80024ba:	4b13      	ldr	r3, [pc, #76]	@ (8002508 <MX_UART5_Init+0x58>)
 80024bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024c0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80024c2:	4b11      	ldr	r3, [pc, #68]	@ (8002508 <MX_UART5_Init+0x58>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80024c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002508 <MX_UART5_Init+0x58>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80024ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002508 <MX_UART5_Init+0x58>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80024d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002508 <MX_UART5_Init+0x58>)
 80024d6:	220c      	movs	r2, #12
 80024d8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024da:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <MX_UART5_Init+0x58>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e0:	4b09      	ldr	r3, [pc, #36]	@ (8002508 <MX_UART5_Init+0x58>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024e6:	4b08      	ldr	r3, [pc, #32]	@ (8002508 <MX_UART5_Init+0x58>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024ec:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <MX_UART5_Init+0x58>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80024f2:	4805      	ldr	r0, [pc, #20]	@ (8002508 <MX_UART5_Init+0x58>)
 80024f4:	f003 fde1 	bl	80060ba <HAL_UART_Init>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80024fe:	f000 f9eb 	bl	80028d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	200003ac 	.word	0x200003ac
 800250c:	40005000 	.word	0x40005000

08002510 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002514:	4b14      	ldr	r3, [pc, #80]	@ (8002568 <MX_UART7_Init+0x58>)
 8002516:	4a15      	ldr	r2, [pc, #84]	@ (800256c <MX_UART7_Init+0x5c>)
 8002518:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800251a:	4b13      	ldr	r3, [pc, #76]	@ (8002568 <MX_UART7_Init+0x58>)
 800251c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002520:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002522:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <MX_UART7_Init+0x58>)
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002528:	4b0f      	ldr	r3, [pc, #60]	@ (8002568 <MX_UART7_Init+0x58>)
 800252a:	2200      	movs	r2, #0
 800252c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800252e:	4b0e      	ldr	r3, [pc, #56]	@ (8002568 <MX_UART7_Init+0x58>)
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002534:	4b0c      	ldr	r3, [pc, #48]	@ (8002568 <MX_UART7_Init+0x58>)
 8002536:	220c      	movs	r2, #12
 8002538:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253a:	4b0b      	ldr	r3, [pc, #44]	@ (8002568 <MX_UART7_Init+0x58>)
 800253c:	2200      	movs	r2, #0
 800253e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002540:	4b09      	ldr	r3, [pc, #36]	@ (8002568 <MX_UART7_Init+0x58>)
 8002542:	2200      	movs	r2, #0
 8002544:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002546:	4b08      	ldr	r3, [pc, #32]	@ (8002568 <MX_UART7_Init+0x58>)
 8002548:	2200      	movs	r2, #0
 800254a:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800254c:	4b06      	ldr	r3, [pc, #24]	@ (8002568 <MX_UART7_Init+0x58>)
 800254e:	2200      	movs	r2, #0
 8002550:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002552:	4805      	ldr	r0, [pc, #20]	@ (8002568 <MX_UART7_Init+0x58>)
 8002554:	f003 fdb1 	bl	80060ba <HAL_UART_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800255e:	f000 f9bb 	bl	80028d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20000434 	.word	0x20000434
 800256c:	40007800 	.word	0x40007800

08002570 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002574:	4b14      	ldr	r3, [pc, #80]	@ (80025c8 <MX_USART3_UART_Init+0x58>)
 8002576:	4a15      	ldr	r2, [pc, #84]	@ (80025cc <MX_USART3_UART_Init+0x5c>)
 8002578:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800257a:	4b13      	ldr	r3, [pc, #76]	@ (80025c8 <MX_USART3_UART_Init+0x58>)
 800257c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002580:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002582:	4b11      	ldr	r3, [pc, #68]	@ (80025c8 <MX_USART3_UART_Init+0x58>)
 8002584:	2200      	movs	r2, #0
 8002586:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002588:	4b0f      	ldr	r3, [pc, #60]	@ (80025c8 <MX_USART3_UART_Init+0x58>)
 800258a:	2200      	movs	r2, #0
 800258c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800258e:	4b0e      	ldr	r3, [pc, #56]	@ (80025c8 <MX_USART3_UART_Init+0x58>)
 8002590:	2200      	movs	r2, #0
 8002592:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002594:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <MX_USART3_UART_Init+0x58>)
 8002596:	220c      	movs	r2, #12
 8002598:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800259a:	4b0b      	ldr	r3, [pc, #44]	@ (80025c8 <MX_USART3_UART_Init+0x58>)
 800259c:	2200      	movs	r2, #0
 800259e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025a0:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <MX_USART3_UART_Init+0x58>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025a6:	4b08      	ldr	r3, [pc, #32]	@ (80025c8 <MX_USART3_UART_Init+0x58>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025ac:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <MX_USART3_UART_Init+0x58>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025b2:	4805      	ldr	r0, [pc, #20]	@ (80025c8 <MX_USART3_UART_Init+0x58>)
 80025b4:	f003 fd81 	bl	80060ba <HAL_UART_Init>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80025be:	f000 f98b 	bl	80028d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	200004bc 	.word	0x200004bc
 80025cc:	40004800 	.word	0x40004800

080025d0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80025d4:	4b14      	ldr	r3, [pc, #80]	@ (8002628 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80025da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80025dc:	4b12      	ldr	r3, [pc, #72]	@ (8002628 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025de:	2206      	movs	r2, #6
 80025e0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80025e2:	4b11      	ldr	r3, [pc, #68]	@ (8002628 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025e4:	2202      	movs	r2, #2
 80025e6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80025e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002628 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80025ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002628 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025f0:	2202      	movs	r2, #2
 80025f2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80025f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002628 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80025fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002628 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002600:	4b09      	ldr	r3, [pc, #36]	@ (8002628 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002602:	2200      	movs	r2, #0
 8002604:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002606:	4b08      	ldr	r3, [pc, #32]	@ (8002628 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002608:	2201      	movs	r2, #1
 800260a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800260c:	4b06      	ldr	r3, [pc, #24]	@ (8002628 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800260e:	2200      	movs	r2, #0
 8002610:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002612:	4805      	ldr	r0, [pc, #20]	@ (8002628 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002614:	f002 fa0f 	bl	8004a36 <HAL_PCD_Init>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800261e:	f000 f95b 	bl	80028d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20000544 	.word	0x20000544

0800262c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08e      	sub	sp, #56	@ 0x38
 8002630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002632:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	605a      	str	r2, [r3, #4]
 800263c:	609a      	str	r2, [r3, #8]
 800263e:	60da      	str	r2, [r3, #12]
 8002640:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002642:	4b9a      	ldr	r3, [pc, #616]	@ (80028ac <MX_GPIO_Init+0x280>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	4a99      	ldr	r2, [pc, #612]	@ (80028ac <MX_GPIO_Init+0x280>)
 8002648:	f043 0310 	orr.w	r3, r3, #16
 800264c:	6313      	str	r3, [r2, #48]	@ 0x30
 800264e:	4b97      	ldr	r3, [pc, #604]	@ (80028ac <MX_GPIO_Init+0x280>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	f003 0310 	and.w	r3, r3, #16
 8002656:	623b      	str	r3, [r7, #32]
 8002658:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800265a:	4b94      	ldr	r3, [pc, #592]	@ (80028ac <MX_GPIO_Init+0x280>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	4a93      	ldr	r2, [pc, #588]	@ (80028ac <MX_GPIO_Init+0x280>)
 8002660:	f043 0304 	orr.w	r3, r3, #4
 8002664:	6313      	str	r3, [r2, #48]	@ 0x30
 8002666:	4b91      	ldr	r3, [pc, #580]	@ (80028ac <MX_GPIO_Init+0x280>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	61fb      	str	r3, [r7, #28]
 8002670:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002672:	4b8e      	ldr	r3, [pc, #568]	@ (80028ac <MX_GPIO_Init+0x280>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	4a8d      	ldr	r2, [pc, #564]	@ (80028ac <MX_GPIO_Init+0x280>)
 8002678:	f043 0320 	orr.w	r3, r3, #32
 800267c:	6313      	str	r3, [r2, #48]	@ 0x30
 800267e:	4b8b      	ldr	r3, [pc, #556]	@ (80028ac <MX_GPIO_Init+0x280>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	f003 0320 	and.w	r3, r3, #32
 8002686:	61bb      	str	r3, [r7, #24]
 8002688:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800268a:	4b88      	ldr	r3, [pc, #544]	@ (80028ac <MX_GPIO_Init+0x280>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	4a87      	ldr	r2, [pc, #540]	@ (80028ac <MX_GPIO_Init+0x280>)
 8002690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002694:	6313      	str	r3, [r2, #48]	@ 0x30
 8002696:	4b85      	ldr	r3, [pc, #532]	@ (80028ac <MX_GPIO_Init+0x280>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a2:	4b82      	ldr	r3, [pc, #520]	@ (80028ac <MX_GPIO_Init+0x280>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a6:	4a81      	ldr	r2, [pc, #516]	@ (80028ac <MX_GPIO_Init+0x280>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ae:	4b7f      	ldr	r3, [pc, #508]	@ (80028ac <MX_GPIO_Init+0x280>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ba:	4b7c      	ldr	r3, [pc, #496]	@ (80028ac <MX_GPIO_Init+0x280>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	4a7b      	ldr	r2, [pc, #492]	@ (80028ac <MX_GPIO_Init+0x280>)
 80026c0:	f043 0302 	orr.w	r3, r3, #2
 80026c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026c6:	4b79      	ldr	r3, [pc, #484]	@ (80028ac <MX_GPIO_Init+0x280>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026d2:	4b76      	ldr	r3, [pc, #472]	@ (80028ac <MX_GPIO_Init+0x280>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	4a75      	ldr	r2, [pc, #468]	@ (80028ac <MX_GPIO_Init+0x280>)
 80026d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026de:	4b73      	ldr	r3, [pc, #460]	@ (80028ac <MX_GPIO_Init+0x280>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ea:	4b70      	ldr	r3, [pc, #448]	@ (80028ac <MX_GPIO_Init+0x280>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	4a6f      	ldr	r2, [pc, #444]	@ (80028ac <MX_GPIO_Init+0x280>)
 80026f0:	f043 0308 	orr.w	r3, r3, #8
 80026f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f6:	4b6d      	ldr	r3, [pc, #436]	@ (80028ac <MX_GPIO_Init+0x280>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	607b      	str	r3, [r7, #4]
 8002700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002702:	2200      	movs	r2, #0
 8002704:	f640 013c 	movw	r1, #2108	@ 0x83c
 8002708:	4869      	ldr	r0, [pc, #420]	@ (80028b0 <MX_GPIO_Init+0x284>)
 800270a:	f002 f97b 	bl	8004a04 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 800270e:	2200      	movs	r2, #0
 8002710:	210a      	movs	r1, #10
 8002712:	4868      	ldr	r0, [pc, #416]	@ (80028b4 <MX_GPIO_Init+0x288>)
 8002714:	f002 f976 	bl	8004a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002718:	2200      	movs	r2, #0
 800271a:	2110      	movs	r1, #16
 800271c:	4866      	ldr	r0, [pc, #408]	@ (80028b8 <MX_GPIO_Init+0x28c>)
 800271e:	f002 f971 	bl	8004a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002722:	2200      	movs	r2, #0
 8002724:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002728:	4864      	ldr	r0, [pc, #400]	@ (80028bc <MX_GPIO_Init+0x290>)
 800272a:	f002 f96b 	bl	8004a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|USB_PowerSwitchOn_Pin|switch_Pin|switchG10_Pin
 800272e:	2200      	movs	r2, #0
 8002730:	f249 6141 	movw	r1, #38465	@ 0x9641
 8002734:	4862      	ldr	r0, [pc, #392]	@ (80028c0 <MX_GPIO_Init+0x294>)
 8002736:	f002 f965 	bl	8004a04 <HAL_GPIO_WritePin>
                          |switchG12_Pin|switchG15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800273a:	f640 033c 	movw	r3, #2108	@ 0x83c
 800273e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002740:	2301      	movs	r3, #1
 8002742:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002748:	2300      	movs	r3, #0
 800274a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800274c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002750:	4619      	mov	r1, r3
 8002752:	4857      	ldr	r0, [pc, #348]	@ (80028b0 <MX_GPIO_Init+0x284>)
 8002754:	f001 ffaa 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002758:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800275c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800275e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002762:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002768:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800276c:	4619      	mov	r1, r3
 800276e:	4855      	ldr	r0, [pc, #340]	@ (80028c4 <MX_GPIO_Init+0x298>)
 8002770:	f001 ff9c 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF1 PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002774:	230a      	movs	r3, #10
 8002776:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002778:	2301      	movs	r3, #1
 800277a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002780:	2300      	movs	r3, #0
 8002782:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002784:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002788:	4619      	mov	r1, r3
 800278a:	484a      	ldr	r0, [pc, #296]	@ (80028b4 <MX_GPIO_Init+0x288>)
 800278c:	f001 ff8e 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002790:	2332      	movs	r3, #50	@ 0x32
 8002792:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002794:	2302      	movs	r3, #2
 8002796:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279c:	2303      	movs	r3, #3
 800279e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80027a0:	230b      	movs	r3, #11
 80027a2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027a8:	4619      	mov	r1, r3
 80027aa:	4846      	ldr	r0, [pc, #280]	@ (80028c4 <MX_GPIO_Init+0x298>)
 80027ac:	f001 ff7e 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 80027b0:	2306      	movs	r3, #6
 80027b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b4:	2302      	movs	r3, #2
 80027b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027bc:	2303      	movs	r3, #3
 80027be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80027c0:	230b      	movs	r3, #11
 80027c2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027c8:	4619      	mov	r1, r3
 80027ca:	483b      	ldr	r0, [pc, #236]	@ (80028b8 <MX_GPIO_Init+0x28c>)
 80027cc:	f001 ff6e 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80027d0:	2310      	movs	r3, #16
 80027d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d4:	2301      	movs	r3, #1
 80027d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027dc:	2300      	movs	r3, #0
 80027de:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80027e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027e4:	4619      	mov	r1, r3
 80027e6:	4834      	ldr	r0, [pc, #208]	@ (80028b8 <MX_GPIO_Init+0x28c>)
 80027e8:	f001 ff60 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80027ec:	f244 0381 	movw	r3, #16513	@ 0x4081
 80027f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f2:	2301      	movs	r3, #1
 80027f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fa:	2300      	movs	r3, #0
 80027fc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002802:	4619      	mov	r1, r3
 8002804:	482d      	ldr	r0, [pc, #180]	@ (80028bc <MX_GPIO_Init+0x290>)
 8002806:	f001 ff51 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 USB_PowerSwitchOn_Pin switch_Pin switchG10_Pin
                           switchG12_Pin switchG15_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|USB_PowerSwitchOn_Pin|switch_Pin|switchG10_Pin
 800280a:	f249 6341 	movw	r3, #38465	@ 0x9641
 800280e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |switchG12_Pin|switchG15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002810:	2301      	movs	r3, #1
 8002812:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002814:	2300      	movs	r3, #0
 8002816:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002818:	2300      	movs	r3, #0
 800281a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800281c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002820:	4619      	mov	r1, r3
 8002822:	4827      	ldr	r0, [pc, #156]	@ (80028c0 <MX_GPIO_Init+0x294>)
 8002824:	f001 ff42 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002828:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282e:	2302      	movs	r3, #2
 8002830:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002836:	2303      	movs	r3, #3
 8002838:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800283a:	230b      	movs	r3, #11
 800283c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800283e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002842:	4619      	mov	r1, r3
 8002844:	481d      	ldr	r0, [pc, #116]	@ (80028bc <MX_GPIO_Init+0x290>)
 8002846:	f001 ff31 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800284a:	2380      	movs	r3, #128	@ 0x80
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800284e:	2300      	movs	r3, #0
 8002850:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002856:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800285a:	4619      	mov	r1, r3
 800285c:	4818      	ldr	r0, [pc, #96]	@ (80028c0 <MX_GPIO_Init+0x294>)
 800285e:	f001 ff25 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002862:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002866:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002868:	2302      	movs	r3, #2
 800286a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002870:	2303      	movs	r3, #3
 8002872:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002874:	230b      	movs	r3, #11
 8002876:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002878:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800287c:	4619      	mov	r1, r3
 800287e:	4810      	ldr	r0, [pc, #64]	@ (80028c0 <MX_GPIO_Init+0x294>)
 8002880:	f001 ff14 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002884:	2330      	movs	r3, #48	@ 0x30
 8002886:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002888:	2302      	movs	r3, #2
 800288a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	2300      	movs	r3, #0
 8002892:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002894:	2302      	movs	r3, #2
 8002896:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002898:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800289c:	4619      	mov	r1, r3
 800289e:	4807      	ldr	r0, [pc, #28]	@ (80028bc <MX_GPIO_Init+0x290>)
 80028a0:	f001 ff04 	bl	80046ac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80028a4:	bf00      	nop
 80028a6:	3738      	adds	r7, #56	@ 0x38
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40021400 	.word	0x40021400
 80028b8:	40020000 	.word	0x40020000
 80028bc:	40020400 	.word	0x40020400
 80028c0:	40021800 	.word	0x40021800
 80028c4:	40020800 	.word	0x40020800

080028c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80028d0:	2001      	movs	r0, #1
 80028d2:	f007 ff1d 	bl	800a710 <osDelay>
 80028d6:	e7fb      	b.n	80028d0 <StartDefaultTask+0x8>

080028d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028dc:	b672      	cpsid	i
}
 80028de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028e0:	bf00      	nop
 80028e2:	e7fd      	b.n	80028e0 <Error_Handler+0x8>

080028e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80028ea:	4b11      	ldr	r3, [pc, #68]	@ (8002930 <HAL_MspInit+0x4c>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ee:	4a10      	ldr	r2, [pc, #64]	@ (8002930 <HAL_MspInit+0x4c>)
 80028f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002930 <HAL_MspInit+0x4c>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fe:	607b      	str	r3, [r7, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002902:	4b0b      	ldr	r3, [pc, #44]	@ (8002930 <HAL_MspInit+0x4c>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002906:	4a0a      	ldr	r2, [pc, #40]	@ (8002930 <HAL_MspInit+0x4c>)
 8002908:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800290c:	6453      	str	r3, [r2, #68]	@ 0x44
 800290e:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <HAL_MspInit+0x4c>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800291a:	2200      	movs	r2, #0
 800291c:	210f      	movs	r1, #15
 800291e:	f06f 0001 	mvn.w	r0, #1
 8002922:	f001 fdfa 	bl	800451a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40023800 	.word	0x40023800

08002934 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08c      	sub	sp, #48	@ 0x30
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	f107 031c 	add.w	r3, r7, #28
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a36      	ldr	r2, [pc, #216]	@ (8002a2c <HAL_ADC_MspInit+0xf8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d13c      	bne.n	80029d0 <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002956:	4b36      	ldr	r3, [pc, #216]	@ (8002a30 <HAL_ADC_MspInit+0xfc>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295a:	4a35      	ldr	r2, [pc, #212]	@ (8002a30 <HAL_ADC_MspInit+0xfc>)
 800295c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002960:	6453      	str	r3, [r2, #68]	@ 0x44
 8002962:	4b33      	ldr	r3, [pc, #204]	@ (8002a30 <HAL_ADC_MspInit+0xfc>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296a:	61bb      	str	r3, [r7, #24]
 800296c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800296e:	4b30      	ldr	r3, [pc, #192]	@ (8002a30 <HAL_ADC_MspInit+0xfc>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	4a2f      	ldr	r2, [pc, #188]	@ (8002a30 <HAL_ADC_MspInit+0xfc>)
 8002974:	f043 0304 	orr.w	r3, r3, #4
 8002978:	6313      	str	r3, [r2, #48]	@ 0x30
 800297a:	4b2d      	ldr	r3, [pc, #180]	@ (8002a30 <HAL_ADC_MspInit+0xfc>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002986:	4b2a      	ldr	r3, [pc, #168]	@ (8002a30 <HAL_ADC_MspInit+0xfc>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	4a29      	ldr	r2, [pc, #164]	@ (8002a30 <HAL_ADC_MspInit+0xfc>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6313      	str	r3, [r2, #48]	@ 0x30
 8002992:	4b27      	ldr	r3, [pc, #156]	@ (8002a30 <HAL_ADC_MspInit+0xfc>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800299e:	2305      	movs	r3, #5
 80029a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029a2:	2303      	movs	r3, #3
 80029a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029aa:	f107 031c 	add.w	r3, r7, #28
 80029ae:	4619      	mov	r1, r3
 80029b0:	4820      	ldr	r0, [pc, #128]	@ (8002a34 <HAL_ADC_MspInit+0x100>)
 80029b2:	f001 fe7b 	bl	80046ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029b6:	2301      	movs	r3, #1
 80029b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029ba:	2303      	movs	r3, #3
 80029bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c2:	f107 031c 	add.w	r3, r7, #28
 80029c6:	4619      	mov	r1, r3
 80029c8:	481b      	ldr	r0, [pc, #108]	@ (8002a38 <HAL_ADC_MspInit+0x104>)
 80029ca:	f001 fe6f 	bl	80046ac <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 80029ce:	e029      	b.n	8002a24 <HAL_ADC_MspInit+0xf0>
  else if(hadc->Instance==ADC3)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a19      	ldr	r2, [pc, #100]	@ (8002a3c <HAL_ADC_MspInit+0x108>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d124      	bne.n	8002a24 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80029da:	4b15      	ldr	r3, [pc, #84]	@ (8002a30 <HAL_ADC_MspInit+0xfc>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029de:	4a14      	ldr	r2, [pc, #80]	@ (8002a30 <HAL_ADC_MspInit+0xfc>)
 80029e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80029e6:	4b12      	ldr	r3, [pc, #72]	@ (8002a30 <HAL_ADC_MspInit+0xfc>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002a30 <HAL_ADC_MspInit+0xfc>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002a30 <HAL_ADC_MspInit+0xfc>)
 80029f8:	f043 0320 	orr.w	r3, r3, #32
 80029fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002a30 <HAL_ADC_MspInit+0xfc>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	f003 0320 	and.w	r3, r3, #32
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a0a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a10:	2303      	movs	r3, #3
 8002a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a18:	f107 031c 	add.w	r3, r7, #28
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4808      	ldr	r0, [pc, #32]	@ (8002a40 <HAL_ADC_MspInit+0x10c>)
 8002a20:	f001 fe44 	bl	80046ac <HAL_GPIO_Init>
}
 8002a24:	bf00      	nop
 8002a26:	3730      	adds	r7, #48	@ 0x30
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40012000 	.word	0x40012000
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40020800 	.word	0x40020800
 8002a38:	40020000 	.word	0x40020000
 8002a3c:	40012200 	.word	0x40012200
 8002a40:	40021400 	.word	0x40021400

08002a44 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08a      	sub	sp, #40	@ 0x28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a4c:	f107 0314 	add.w	r3, r7, #20
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	60da      	str	r2, [r3, #12]
 8002a5a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a17      	ldr	r2, [pc, #92]	@ (8002ac0 <HAL_CAN_MspInit+0x7c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d127      	bne.n	8002ab6 <HAL_CAN_MspInit+0x72>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002a66:	4b17      	ldr	r3, [pc, #92]	@ (8002ac4 <HAL_CAN_MspInit+0x80>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6a:	4a16      	ldr	r2, [pc, #88]	@ (8002ac4 <HAL_CAN_MspInit+0x80>)
 8002a6c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a72:	4b14      	ldr	r3, [pc, #80]	@ (8002ac4 <HAL_CAN_MspInit+0x80>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a7e:	4b11      	ldr	r3, [pc, #68]	@ (8002ac4 <HAL_CAN_MspInit+0x80>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a82:	4a10      	ldr	r2, [pc, #64]	@ (8002ac4 <HAL_CAN_MspInit+0x80>)
 8002a84:	f043 0308 	orr.w	r3, r3, #8
 8002a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac4 <HAL_CAN_MspInit+0x80>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a96:	2303      	movs	r3, #3
 8002a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002aa6:	2309      	movs	r3, #9
 8002aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002aaa:	f107 0314 	add.w	r3, r7, #20
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4805      	ldr	r0, [pc, #20]	@ (8002ac8 <HAL_CAN_MspInit+0x84>)
 8002ab2:	f001 fdfb 	bl	80046ac <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8002ab6:	bf00      	nop
 8002ab8:	3728      	adds	r7, #40	@ 0x28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40006400 	.word	0x40006400
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	40020c00 	.word	0x40020c00

08002acc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08a      	sub	sp, #40	@ 0x28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a17      	ldr	r2, [pc, #92]	@ (8002b48 <HAL_SPI_MspInit+0x7c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d127      	bne.n	8002b3e <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002aee:	4b17      	ldr	r3, [pc, #92]	@ (8002b4c <HAL_SPI_MspInit+0x80>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af2:	4a16      	ldr	r2, [pc, #88]	@ (8002b4c <HAL_SPI_MspInit+0x80>)
 8002af4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002af8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002afa:	4b14      	ldr	r3, [pc, #80]	@ (8002b4c <HAL_SPI_MspInit+0x80>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b06:	4b11      	ldr	r3, [pc, #68]	@ (8002b4c <HAL_SPI_MspInit+0x80>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0a:	4a10      	ldr	r2, [pc, #64]	@ (8002b4c <HAL_SPI_MspInit+0x80>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b12:	4b0e      	ldr	r3, [pc, #56]	@ (8002b4c <HAL_SPI_MspInit+0x80>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b1e:	23e0      	movs	r3, #224	@ 0xe0
 8002b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b22:	2302      	movs	r3, #2
 8002b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b2e:	2305      	movs	r3, #5
 8002b30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b32:	f107 0314 	add.w	r3, r7, #20
 8002b36:	4619      	mov	r1, r3
 8002b38:	4805      	ldr	r0, [pc, #20]	@ (8002b50 <HAL_SPI_MspInit+0x84>)
 8002b3a:	f001 fdb7 	bl	80046ac <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002b3e:	bf00      	nop
 8002b40:	3728      	adds	r7, #40	@ 0x28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40013000 	.word	0x40013000
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40020000 	.word	0x40020000

08002b54 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b0b4      	sub	sp, #208	@ 0xd0
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b70:	2290      	movs	r2, #144	@ 0x90
 8002b72:	2100      	movs	r1, #0
 8002b74:	4618      	mov	r0, r3
 8002b76:	f00c fa7d 	bl	800f074 <memset>
  if(huart->Instance==UART4)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a9b      	ldr	r2, [pc, #620]	@ (8002dec <HAL_UART_MspInit+0x298>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d13d      	bne.n	8002c00 <HAL_UART_MspInit+0xac>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002b84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b92:	4618      	mov	r0, r3
 8002b94:	f002 fdbe 	bl	8005714 <HAL_RCCEx_PeriphCLKConfig>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002b9e:	f7ff fe9b 	bl	80028d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002ba2:	4b93      	ldr	r3, [pc, #588]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba6:	4a92      	ldr	r2, [pc, #584]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002ba8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002bac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bae:	4b90      	ldr	r3, [pc, #576]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bba:	4b8d      	ldr	r3, [pc, #564]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	4a8c      	ldr	r2, [pc, #560]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002bc0:	f043 0304 	orr.w	r3, r3, #4
 8002bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bc6:	4b8a      	ldr	r3, [pc, #552]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002bd2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002bd6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be6:	2303      	movs	r3, #3
 8002be8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002bec:	2308      	movs	r3, #8
 8002bee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bf2:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	487e      	ldr	r0, [pc, #504]	@ (8002df4 <HAL_UART_MspInit+0x2a0>)
 8002bfa:	f001 fd57 	bl	80046ac <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002bfe:	e0f1      	b.n	8002de4 <HAL_UART_MspInit+0x290>
  else if(huart->Instance==UART5)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a7c      	ldr	r2, [pc, #496]	@ (8002df8 <HAL_UART_MspInit+0x2a4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d15f      	bne.n	8002cca <HAL_UART_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002c0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f002 fd7a 	bl	8005714 <HAL_RCCEx_PeriphCLKConfig>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8002c26:	f7ff fe57 	bl	80028d8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002c2a:	4b71      	ldr	r3, [pc, #452]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2e:	4a70      	ldr	r2, [pc, #448]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002c30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c36:	4b6e      	ldr	r3, [pc, #440]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c3e:	623b      	str	r3, [r7, #32]
 8002c40:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c42:	4b6b      	ldr	r3, [pc, #428]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	4a6a      	ldr	r2, [pc, #424]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002c48:	f043 0304 	orr.w	r3, r3, #4
 8002c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c4e:	4b68      	ldr	r3, [pc, #416]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	61fb      	str	r3, [r7, #28]
 8002c58:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c5a:	4b65      	ldr	r3, [pc, #404]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5e:	4a64      	ldr	r2, [pc, #400]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002c60:	f043 0308 	orr.w	r3, r3, #8
 8002c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c66:	4b62      	ldr	r3, [pc, #392]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	61bb      	str	r3, [r7, #24]
 8002c70:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c86:	2303      	movs	r3, #3
 8002c88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002c8c:	2308      	movs	r3, #8
 8002c8e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c92:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002c96:	4619      	mov	r1, r3
 8002c98:	4856      	ldr	r0, [pc, #344]	@ (8002df4 <HAL_UART_MspInit+0x2a0>)
 8002c9a:	f001 fd07 	bl	80046ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c9e:	2304      	movs	r3, #4
 8002ca0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002cb6:	2308      	movs	r3, #8
 8002cb8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cbc:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	484e      	ldr	r0, [pc, #312]	@ (8002dfc <HAL_UART_MspInit+0x2a8>)
 8002cc4:	f001 fcf2 	bl	80046ac <HAL_GPIO_Init>
}
 8002cc8:	e08c      	b.n	8002de4 <HAL_UART_MspInit+0x290>
  else if(huart->Instance==UART7)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a4c      	ldr	r2, [pc, #304]	@ (8002e00 <HAL_UART_MspInit+0x2ac>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d145      	bne.n	8002d60 <HAL_UART_MspInit+0x20c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002cd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ce0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f002 fd15 	bl	8005714 <HAL_RCCEx_PeriphCLKConfig>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8002cf0:	f7ff fdf2 	bl	80028d8 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002cf4:	4b3e      	ldr	r3, [pc, #248]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf8:	4a3d      	ldr	r2, [pc, #244]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002cfa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002cfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d00:	4b3b      	ldr	r3, [pc, #236]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d0c:	4b38      	ldr	r3, [pc, #224]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d10:	4a37      	ldr	r2, [pc, #220]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002d12:	f043 0320 	orr.w	r3, r3, #32
 8002d16:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d18:	4b35      	ldr	r3, [pc, #212]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d24:	23c0      	movs	r3, #192	@ 0xc0
 8002d26:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d36:	2303      	movs	r3, #3
 8002d38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002d3c:	2308      	movs	r3, #8
 8002d3e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d42:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002d46:	4619      	mov	r1, r3
 8002d48:	482e      	ldr	r0, [pc, #184]	@ (8002e04 <HAL_UART_MspInit+0x2b0>)
 8002d4a:	f001 fcaf 	bl	80046ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2105      	movs	r1, #5
 8002d52:	2052      	movs	r0, #82	@ 0x52
 8002d54:	f001 fbe1 	bl	800451a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002d58:	2052      	movs	r0, #82	@ 0x52
 8002d5a:	f001 fbfa 	bl	8004552 <HAL_NVIC_EnableIRQ>
}
 8002d5e:	e041      	b.n	8002de4 <HAL_UART_MspInit+0x290>
  else if(huart->Instance==USART3)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a28      	ldr	r2, [pc, #160]	@ (8002e08 <HAL_UART_MspInit+0x2b4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d13c      	bne.n	8002de4 <HAL_UART_MspInit+0x290>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002d6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002d70:	2300      	movs	r3, #0
 8002d72:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f002 fccb 	bl	8005714 <HAL_RCCEx_PeriphCLKConfig>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <HAL_UART_MspInit+0x234>
      Error_Handler();
 8002d84:	f7ff fda8 	bl	80028d8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d88:	4b19      	ldr	r3, [pc, #100]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8c:	4a18      	ldr	r2, [pc, #96]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002d8e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d92:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d94:	4b16      	ldr	r3, [pc, #88]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002da0:	4b13      	ldr	r3, [pc, #76]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da4:	4a12      	ldr	r2, [pc, #72]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002da6:	f043 0308 	orr.w	r3, r3, #8
 8002daa:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dac:	4b10      	ldr	r3, [pc, #64]	@ (8002df0 <HAL_UART_MspInit+0x29c>)
 8002dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002db8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002dbc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002dd2:	2307      	movs	r3, #7
 8002dd4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dd8:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4807      	ldr	r0, [pc, #28]	@ (8002dfc <HAL_UART_MspInit+0x2a8>)
 8002de0:	f001 fc64 	bl	80046ac <HAL_GPIO_Init>
}
 8002de4:	bf00      	nop
 8002de6:	37d0      	adds	r7, #208	@ 0xd0
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40004c00 	.word	0x40004c00
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40020800 	.word	0x40020800
 8002df8:	40005000 	.word	0x40005000
 8002dfc:	40020c00 	.word	0x40020c00
 8002e00:	40007800 	.word	0x40007800
 8002e04:	40021400 	.word	0x40021400
 8002e08:	40004800 	.word	0x40004800

08002e0c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b0ae      	sub	sp, #184	@ 0xb8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e14:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e24:	f107 0314 	add.w	r3, r7, #20
 8002e28:	2290      	movs	r2, #144	@ 0x90
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f00c f921 	bl	800f074 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e3a:	d159      	bne.n	8002ef0 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002e3c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002e40:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e48:	f107 0314 	add.w	r3, r7, #20
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f002 fc61 	bl	8005714 <HAL_RCCEx_PeriphCLKConfig>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002e58:	f7ff fd3e 	bl	80028d8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5c:	4b26      	ldr	r3, [pc, #152]	@ (8002ef8 <HAL_PCD_MspInit+0xec>)
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e60:	4a25      	ldr	r2, [pc, #148]	@ (8002ef8 <HAL_PCD_MspInit+0xec>)
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e68:	4b23      	ldr	r3, [pc, #140]	@ (8002ef8 <HAL_PCD_MspInit+0xec>)
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002e74:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002e78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002e8e:	230a      	movs	r3, #10
 8002e90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e94:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4818      	ldr	r0, [pc, #96]	@ (8002efc <HAL_PCD_MspInit+0xf0>)
 8002e9c:	f001 fc06 	bl	80046ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002ea0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ea4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002eb4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4810      	ldr	r0, [pc, #64]	@ (8002efc <HAL_PCD_MspInit+0xf0>)
 8002ebc:	f001 fbf6 	bl	80046ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef8 <HAL_PCD_MspInit+0xec>)
 8002ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ec4:	4a0c      	ldr	r2, [pc, #48]	@ (8002ef8 <HAL_PCD_MspInit+0xec>)
 8002ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eca:	6353      	str	r3, [r2, #52]	@ 0x34
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef8 <HAL_PCD_MspInit+0xec>)
 8002ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	4b07      	ldr	r3, [pc, #28]	@ (8002ef8 <HAL_PCD_MspInit+0xec>)
 8002eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002edc:	4a06      	ldr	r2, [pc, #24]	@ (8002ef8 <HAL_PCD_MspInit+0xec>)
 8002ede:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ee2:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ee4:	4b04      	ldr	r3, [pc, #16]	@ (8002ef8 <HAL_PCD_MspInit+0xec>)
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002ef0:	bf00      	nop
 8002ef2:	37b8      	adds	r7, #184	@ 0xb8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40020000 	.word	0x40020000

08002f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f04:	bf00      	nop
 8002f06:	e7fd      	b.n	8002f04 <NMI_Handler+0x4>

08002f08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f0c:	bf00      	nop
 8002f0e:	e7fd      	b.n	8002f0c <HardFault_Handler+0x4>

08002f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f14:	bf00      	nop
 8002f16:	e7fd      	b.n	8002f14 <MemManage_Handler+0x4>

08002f18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f1c:	bf00      	nop
 8002f1e:	e7fd      	b.n	8002f1c <BusFault_Handler+0x4>

08002f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f24:	bf00      	nop
 8002f26:	e7fd      	b.n	8002f24 <UsageFault_Handler+0x4>

08002f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f2c:	bf00      	nop
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f3a:	f000 f935 	bl	80031a8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002f3e:	f009 fd7d 	bl	800ca3c <xTaskGetSchedulerState>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d001      	beq.n	8002f4c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002f48:	f00a fd76 	bl	800da38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f4c:	bf00      	nop
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002f54:	4802      	ldr	r0, [pc, #8]	@ (8002f60 <UART7_IRQHandler+0x10>)
 8002f56:	f003 f9cb 	bl	80062f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002f5a:	bf00      	nop
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000434 	.word	0x20000434

08002f64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return 1;
 8002f68:	2301      	movs	r3, #1
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <_kill>:

int _kill(int pid, int sig)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f7e:	f00c f8cb 	bl	800f118 <__errno>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2216      	movs	r2, #22
 8002f86:	601a      	str	r2, [r3, #0]
  return -1;
 8002f88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <_exit>:

void _exit (int status)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7ff ffe7 	bl	8002f74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002fa6:	bf00      	nop
 8002fa8:	e7fd      	b.n	8002fa6 <_exit+0x12>

08002faa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b086      	sub	sp, #24
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	e00a      	b.n	8002fd2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002fbc:	f3af 8000 	nop.w
 8002fc0:	4601      	mov	r1, r0
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	60ba      	str	r2, [r7, #8]
 8002fc8:	b2ca      	uxtb	r2, r1
 8002fca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	dbf0      	blt.n	8002fbc <_read+0x12>
  }

  return len;
 8002fda:	687b      	ldr	r3, [r7, #4]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800300c:	605a      	str	r2, [r3, #4]
  return 0;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <_isatty>:

int _isatty(int file)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003024:	2301      	movs	r3, #1
}
 8003026:	4618      	mov	r0, r3
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003032:	b480      	push	{r7}
 8003034:	b085      	sub	sp, #20
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003054:	4a14      	ldr	r2, [pc, #80]	@ (80030a8 <_sbrk+0x5c>)
 8003056:	4b15      	ldr	r3, [pc, #84]	@ (80030ac <_sbrk+0x60>)
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003060:	4b13      	ldr	r3, [pc, #76]	@ (80030b0 <_sbrk+0x64>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d102      	bne.n	800306e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003068:	4b11      	ldr	r3, [pc, #68]	@ (80030b0 <_sbrk+0x64>)
 800306a:	4a12      	ldr	r2, [pc, #72]	@ (80030b4 <_sbrk+0x68>)
 800306c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800306e:	4b10      	ldr	r3, [pc, #64]	@ (80030b0 <_sbrk+0x64>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4413      	add	r3, r2
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	429a      	cmp	r2, r3
 800307a:	d207      	bcs.n	800308c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800307c:	f00c f84c 	bl	800f118 <__errno>
 8003080:	4603      	mov	r3, r0
 8003082:	220c      	movs	r2, #12
 8003084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003086:	f04f 33ff 	mov.w	r3, #4294967295
 800308a:	e009      	b.n	80030a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800308c:	4b08      	ldr	r3, [pc, #32]	@ (80030b0 <_sbrk+0x64>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003092:	4b07      	ldr	r3, [pc, #28]	@ (80030b0 <_sbrk+0x64>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	4a05      	ldr	r2, [pc, #20]	@ (80030b0 <_sbrk+0x64>)
 800309c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800309e:	68fb      	ldr	r3, [r7, #12]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	20080000 	.word	0x20080000
 80030ac:	00000400 	.word	0x00000400
 80030b0:	200010b0 	.word	0x200010b0
 80030b4:	20005b88 	.word	0x20005b88

080030b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030bc:	4b06      	ldr	r3, [pc, #24]	@ (80030d8 <SystemInit+0x20>)
 80030be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c2:	4a05      	ldr	r2, [pc, #20]	@ (80030d8 <SystemInit+0x20>)
 80030c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030cc:	bf00      	nop
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80030dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003114 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80030e0:	f7ff ffea 	bl	80030b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030e4:	480c      	ldr	r0, [pc, #48]	@ (8003118 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030e6:	490d      	ldr	r1, [pc, #52]	@ (800311c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003120 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030ec:	e002      	b.n	80030f4 <LoopCopyDataInit>

080030ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030f2:	3304      	adds	r3, #4

080030f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030f8:	d3f9      	bcc.n	80030ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003124 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030fc:	4c0a      	ldr	r4, [pc, #40]	@ (8003128 <LoopFillZerobss+0x22>)
  movs r3, #0
 80030fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003100:	e001      	b.n	8003106 <LoopFillZerobss>

08003102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003104:	3204      	adds	r2, #4

08003106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003108:	d3fb      	bcc.n	8003102 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800310a:	f00c f80b 	bl	800f124 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800310e:	f7fe fdef 	bl	8001cf0 <main>
  bx  lr    
 8003112:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003114:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800311c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003120:	08012f74 	.word	0x08012f74
  ldr r2, =_sbss
 8003124:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003128:	20005b88 	.word	0x20005b88

0800312c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800312c:	e7fe      	b.n	800312c <ADC_IRQHandler>

0800312e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003132:	2003      	movs	r0, #3
 8003134:	f001 f9e6 	bl	8004504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003138:	200f      	movs	r0, #15
 800313a:	f000 f805 	bl	8003148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800313e:	f7ff fbd1 	bl	80028e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003150:	4b12      	ldr	r3, [pc, #72]	@ (800319c <HAL_InitTick+0x54>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	4b12      	ldr	r3, [pc, #72]	@ (80031a0 <HAL_InitTick+0x58>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	4619      	mov	r1, r3
 800315a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800315e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003162:	fbb2 f3f3 	udiv	r3, r2, r3
 8003166:	4618      	mov	r0, r3
 8003168:	f001 fa01 	bl	800456e <HAL_SYSTICK_Config>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e00e      	b.n	8003194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b0f      	cmp	r3, #15
 800317a:	d80a      	bhi.n	8003192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800317c:	2200      	movs	r2, #0
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	f04f 30ff 	mov.w	r0, #4294967295
 8003184:	f001 f9c9 	bl	800451a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003188:	4a06      	ldr	r2, [pc, #24]	@ (80031a4 <HAL_InitTick+0x5c>)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	e000      	b.n	8003194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
}
 8003194:	4618      	mov	r0, r3
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20000000 	.word	0x20000000
 80031a0:	20000008 	.word	0x20000008
 80031a4:	20000004 	.word	0x20000004

080031a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031ac:	4b06      	ldr	r3, [pc, #24]	@ (80031c8 <HAL_IncTick+0x20>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	4b06      	ldr	r3, [pc, #24]	@ (80031cc <HAL_IncTick+0x24>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4413      	add	r3, r2
 80031b8:	4a04      	ldr	r2, [pc, #16]	@ (80031cc <HAL_IncTick+0x24>)
 80031ba:	6013      	str	r3, [r2, #0]
}
 80031bc:	bf00      	nop
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20000008 	.word	0x20000008
 80031cc:	200010b4 	.word	0x200010b4

080031d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return uwTick;
 80031d4:	4b03      	ldr	r3, [pc, #12]	@ (80031e4 <HAL_GetTick+0x14>)
 80031d6:	681b      	ldr	r3, [r3, #0]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	200010b4 	.word	0x200010b4

080031e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031f0:	f7ff ffee 	bl	80031d0 <HAL_GetTick>
 80031f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003200:	d005      	beq.n	800320e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003202:	4b0a      	ldr	r3, [pc, #40]	@ (800322c <HAL_Delay+0x44>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4413      	add	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800320e:	bf00      	nop
 8003210:	f7ff ffde 	bl	80031d0 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	429a      	cmp	r2, r3
 800321e:	d8f7      	bhi.n	8003210 <HAL_Delay+0x28>
  {
  }
}
 8003220:	bf00      	nop
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000008 	.word	0x20000008

08003230 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e031      	b.n	80032aa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	2b00      	cmp	r3, #0
 800324c:	d109      	bne.n	8003262 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff fb70 	bl	8002934 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003266:	f003 0310 	and.w	r3, r3, #16
 800326a:	2b00      	cmp	r3, #0
 800326c:	d116      	bne.n	800329c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003272:	4b10      	ldr	r3, [pc, #64]	@ (80032b4 <HAL_ADC_Init+0x84>)
 8003274:	4013      	ands	r3, r2
 8003276:	f043 0202 	orr.w	r2, r3, #2
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 fb0e 	bl	80038a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	f023 0303 	bic.w	r3, r3, #3
 8003292:	f043 0201 	orr.w	r2, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	641a      	str	r2, [r3, #64]	@ 0x40
 800329a:	e001      	b.n	80032a0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	ffffeefd 	.word	0xffffeefd

080032b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_ADC_Start+0x1a>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e0ad      	b.n	800342e <HAL_ADC_Start+0x176>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d018      	beq.n	800331a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80032f8:	4b50      	ldr	r3, [pc, #320]	@ (800343c <HAL_ADC_Start+0x184>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a50      	ldr	r2, [pc, #320]	@ (8003440 <HAL_ADC_Start+0x188>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	0c9a      	lsrs	r2, r3, #18
 8003304:	4613      	mov	r3, r2
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	4413      	add	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800330c:	e002      	b.n	8003314 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	3b01      	subs	r3, #1
 8003312:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f9      	bne.n	800330e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b01      	cmp	r3, #1
 8003326:	d175      	bne.n	8003414 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800332c:	4b45      	ldr	r3, [pc, #276]	@ (8003444 <HAL_ADC_Start+0x18c>)
 800332e:	4013      	ands	r3, r2
 8003330:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003342:	2b00      	cmp	r3, #0
 8003344:	d007      	beq.n	8003356 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800334e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800335e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003362:	d106      	bne.n	8003372 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003368:	f023 0206 	bic.w	r2, r3, #6
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	645a      	str	r2, [r3, #68]	@ 0x44
 8003370:	e002      	b.n	8003378 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003388:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800338a:	4b2f      	ldr	r3, [pc, #188]	@ (8003448 <HAL_ADC_Start+0x190>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 031f 	and.w	r3, r3, #31
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10f      	bne.n	80033b6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d143      	bne.n	800342c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	e03a      	b.n	800342c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a24      	ldr	r2, [pc, #144]	@ (800344c <HAL_ADC_Start+0x194>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d10e      	bne.n	80033de <HAL_ADC_Start+0x126>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d107      	bne.n	80033de <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80033dc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80033de:	4b1a      	ldr	r3, [pc, #104]	@ (8003448 <HAL_ADC_Start+0x190>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d120      	bne.n	800342c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a18      	ldr	r2, [pc, #96]	@ (8003450 <HAL_ADC_Start+0x198>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d11b      	bne.n	800342c <HAL_ADC_Start+0x174>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d114      	bne.n	800342c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003410:	609a      	str	r2, [r3, #8]
 8003412:	e00b      	b.n	800342c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003418:	f043 0210 	orr.w	r2, r3, #16
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003424:	f043 0201 	orr.w	r2, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	20000000 	.word	0x20000000
 8003440:	431bde83 	.word	0x431bde83
 8003444:	fffff8fe 	.word	0xfffff8fe
 8003448:	40012300 	.word	0x40012300
 800344c:	40012000 	.word	0x40012000
 8003450:	40012200 	.word	0x40012200

08003454 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_ADC_Stop+0x16>
 8003466:	2302      	movs	r3, #2
 8003468:	e01f      	b.n	80034aa <HAL_ADC_Stop+0x56>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0201 	bic.w	r2, r2, #1
 8003480:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	d107      	bne.n	80034a0 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003494:	4b08      	ldr	r3, [pc, #32]	@ (80034b8 <HAL_ADC_Stop+0x64>)
 8003496:	4013      	ands	r3, r2
 8003498:	f043 0201 	orr.w	r2, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	ffffeefe 	.word	0xffffeefe

080034bc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034d8:	d113      	bne.n	8003502 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80034e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034e8:	d10b      	bne.n	8003502 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ee:	f043 0220 	orr.w	r2, r3, #32
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e063      	b.n	80035ca <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003502:	f7ff fe65 	bl	80031d0 <HAL_GetTick>
 8003506:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003508:	e021      	b.n	800354e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003510:	d01d      	beq.n	800354e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d007      	beq.n	8003528 <HAL_ADC_PollForConversion+0x6c>
 8003518:	f7ff fe5a 	bl	80031d0 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d212      	bcs.n	800354e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b02      	cmp	r3, #2
 8003534:	d00b      	beq.n	800354e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353a:	f043 0204 	orr.w	r2, r3, #4
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e03d      	b.n	80035ca <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b02      	cmp	r3, #2
 800355a:	d1d6      	bne.n	800350a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0212 	mvn.w	r2, #18
 8003564:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d123      	bne.n	80035c8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003584:	2b00      	cmp	r3, #0
 8003586:	d11f      	bne.n	80035c8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003592:	2b00      	cmp	r3, #0
 8003594:	d006      	beq.n	80035a4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d111      	bne.n	80035c8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d105      	bne.n	80035c8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c0:	f043 0201 	orr.w	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80035f6:	2300      	movs	r3, #0
 80035f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x1c>
 8003604:	2302      	movs	r3, #2
 8003606:	e13a      	b.n	800387e <HAL_ADC_ConfigChannel+0x292>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b09      	cmp	r3, #9
 8003616:	d93a      	bls.n	800368e <HAL_ADC_ConfigChannel+0xa2>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003620:	d035      	beq.n	800368e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68d9      	ldr	r1, [r3, #12]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	b29b      	uxth	r3, r3
 800362e:	461a      	mov	r2, r3
 8003630:	4613      	mov	r3, r2
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	4413      	add	r3, r2
 8003636:	3b1e      	subs	r3, #30
 8003638:	2207      	movs	r2, #7
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43da      	mvns	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	400a      	ands	r2, r1
 8003646:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a8f      	ldr	r2, [pc, #572]	@ (800388c <HAL_ADC_ConfigChannel+0x2a0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d10a      	bne.n	8003668 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68d9      	ldr	r1, [r3, #12]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	061a      	lsls	r2, r3, #24
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003666:	e039      	b.n	80036dc <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68d9      	ldr	r1, [r3, #12]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	b29b      	uxth	r3, r3
 8003678:	4618      	mov	r0, r3
 800367a:	4603      	mov	r3, r0
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	4403      	add	r3, r0
 8003680:	3b1e      	subs	r3, #30
 8003682:	409a      	lsls	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800368c:	e026      	b.n	80036dc <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6919      	ldr	r1, [r3, #16]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	b29b      	uxth	r3, r3
 800369a:	461a      	mov	r2, r3
 800369c:	4613      	mov	r3, r2
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	4413      	add	r3, r2
 80036a2:	f003 031f 	and.w	r3, r3, #31
 80036a6:	2207      	movs	r2, #7
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43da      	mvns	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	400a      	ands	r2, r1
 80036b4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6919      	ldr	r1, [r3, #16]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	4618      	mov	r0, r3
 80036c8:	4603      	mov	r3, r0
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	4403      	add	r3, r0
 80036ce:	f003 031f 	and.w	r3, r3, #31
 80036d2:	409a      	lsls	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b06      	cmp	r3, #6
 80036e2:	d824      	bhi.n	800372e <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	3b05      	subs	r3, #5
 80036f6:	221f      	movs	r2, #31
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43da      	mvns	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	400a      	ands	r2, r1
 8003704:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	b29b      	uxth	r3, r3
 8003712:	4618      	mov	r0, r3
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	3b05      	subs	r3, #5
 8003720:	fa00 f203 	lsl.w	r2, r0, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	635a      	str	r2, [r3, #52]	@ 0x34
 800372c:	e04c      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b0c      	cmp	r3, #12
 8003734:	d824      	bhi.n	8003780 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	3b23      	subs	r3, #35	@ 0x23
 8003748:	221f      	movs	r2, #31
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	43da      	mvns	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	400a      	ands	r2, r1
 8003756:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	b29b      	uxth	r3, r3
 8003764:	4618      	mov	r0, r3
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	3b23      	subs	r3, #35	@ 0x23
 8003772:	fa00 f203 	lsl.w	r2, r0, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	631a      	str	r2, [r3, #48]	@ 0x30
 800377e:	e023      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	3b41      	subs	r3, #65	@ 0x41
 8003792:	221f      	movs	r2, #31
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43da      	mvns	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	400a      	ands	r2, r1
 80037a0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	4618      	mov	r0, r3
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	3b41      	subs	r3, #65	@ 0x41
 80037bc:	fa00 f203 	lsl.w	r2, r0, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a30      	ldr	r2, [pc, #192]	@ (8003890 <HAL_ADC_ConfigChannel+0x2a4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d10a      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x1fc>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037da:	d105      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80037dc:	4b2d      	ldr	r3, [pc, #180]	@ (8003894 <HAL_ADC_ConfigChannel+0x2a8>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	4a2c      	ldr	r2, [pc, #176]	@ (8003894 <HAL_ADC_ConfigChannel+0x2a8>)
 80037e2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80037e6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a28      	ldr	r2, [pc, #160]	@ (8003890 <HAL_ADC_ConfigChannel+0x2a4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d10f      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x226>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b12      	cmp	r3, #18
 80037f8:	d10b      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80037fa:	4b26      	ldr	r3, [pc, #152]	@ (8003894 <HAL_ADC_ConfigChannel+0x2a8>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	4a25      	ldr	r2, [pc, #148]	@ (8003894 <HAL_ADC_ConfigChannel+0x2a8>)
 8003800:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003804:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003806:	4b23      	ldr	r3, [pc, #140]	@ (8003894 <HAL_ADC_ConfigChannel+0x2a8>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	4a22      	ldr	r2, [pc, #136]	@ (8003894 <HAL_ADC_ConfigChannel+0x2a8>)
 800380c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003810:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a1e      	ldr	r2, [pc, #120]	@ (8003890 <HAL_ADC_ConfigChannel+0x2a4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d12b      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x288>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a1a      	ldr	r2, [pc, #104]	@ (800388c <HAL_ADC_ConfigChannel+0x2a0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d003      	beq.n	800382e <HAL_ADC_ConfigChannel+0x242>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b11      	cmp	r3, #17
 800382c:	d122      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800382e:	4b19      	ldr	r3, [pc, #100]	@ (8003894 <HAL_ADC_ConfigChannel+0x2a8>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	4a18      	ldr	r2, [pc, #96]	@ (8003894 <HAL_ADC_ConfigChannel+0x2a8>)
 8003834:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003838:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800383a:	4b16      	ldr	r3, [pc, #88]	@ (8003894 <HAL_ADC_ConfigChannel+0x2a8>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	4a15      	ldr	r2, [pc, #84]	@ (8003894 <HAL_ADC_ConfigChannel+0x2a8>)
 8003840:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003844:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a10      	ldr	r2, [pc, #64]	@ (800388c <HAL_ADC_ConfigChannel+0x2a0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d111      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003850:	4b11      	ldr	r3, [pc, #68]	@ (8003898 <HAL_ADC_ConfigChannel+0x2ac>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a11      	ldr	r2, [pc, #68]	@ (800389c <HAL_ADC_ConfigChannel+0x2b0>)
 8003856:	fba2 2303 	umull	r2, r3, r2, r3
 800385a:	0c9a      	lsrs	r2, r3, #18
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003866:	e002      	b.n	800386e <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	3b01      	subs	r3, #1
 800386c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1f9      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	10000012 	.word	0x10000012
 8003890:	40012000 	.word	0x40012000
 8003894:	40012300 	.word	0x40012300
 8003898:	20000000 	.word	0x20000000
 800389c:	431bde83 	.word	0x431bde83

080038a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80038a8:	4b78      	ldr	r3, [pc, #480]	@ (8003a8c <ADC_Init+0x1ec>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	4a77      	ldr	r2, [pc, #476]	@ (8003a8c <ADC_Init+0x1ec>)
 80038ae:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80038b2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80038b4:	4b75      	ldr	r3, [pc, #468]	@ (8003a8c <ADC_Init+0x1ec>)
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	4973      	ldr	r1, [pc, #460]	@ (8003a8c <ADC_Init+0x1ec>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	021a      	lsls	r2, r3, #8
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80038f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6859      	ldr	r1, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003916:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6899      	ldr	r1, [r3, #8]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800392e:	4a58      	ldr	r2, [pc, #352]	@ (8003a90 <ADC_Init+0x1f0>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d022      	beq.n	800397a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003942:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6899      	ldr	r1, [r3, #8]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003964:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6899      	ldr	r1, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	e00f      	b.n	800399a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003988:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003998:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0202 	bic.w	r2, r2, #2
 80039a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6899      	ldr	r1, [r3, #8]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	005a      	lsls	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d01b      	beq.n	8003a00 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80039e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6859      	ldr	r1, [r3, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	3b01      	subs	r3, #1
 80039f4:	035a      	lsls	r2, r3, #13
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	605a      	str	r2, [r3, #4]
 80039fe:	e007      	b.n	8003a10 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003a1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	051a      	lsls	r2, r3, #20
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003a44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6899      	ldr	r1, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003a52:	025a      	lsls	r2, r3, #9
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6899      	ldr	r1, [r3, #8]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	029a      	lsls	r2, r3, #10
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	609a      	str	r2, [r3, #8]
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	40012300 	.word	0x40012300
 8003a90:	0f000001 	.word	0x0f000001

08003a94 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e0ed      	b.n	8003c82 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d102      	bne.n	8003ab8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7fe ffc6 	bl	8002a44 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ac8:	f7ff fb82 	bl	80031d0 <HAL_GetTick>
 8003acc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ace:	e012      	b.n	8003af6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ad0:	f7ff fb7e 	bl	80031d0 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b0a      	cmp	r3, #10
 8003adc:	d90b      	bls.n	8003af6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2205      	movs	r2, #5
 8003aee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e0c5      	b.n	8003c82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0e5      	beq.n	8003ad0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0202 	bic.w	r2, r2, #2
 8003b12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b14:	f7ff fb5c 	bl	80031d0 <HAL_GetTick>
 8003b18:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b1a:	e012      	b.n	8003b42 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b1c:	f7ff fb58 	bl	80031d0 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b0a      	cmp	r3, #10
 8003b28:	d90b      	bls.n	8003b42 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2205      	movs	r2, #5
 8003b3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e09f      	b.n	8003c82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1e5      	bne.n	8003b1c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	7e1b      	ldrb	r3, [r3, #24]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d108      	bne.n	8003b6a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	e007      	b.n	8003b7a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	7e5b      	ldrb	r3, [r3, #25]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d108      	bne.n	8003b94 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	e007      	b.n	8003ba4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ba2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	7e9b      	ldrb	r3, [r3, #26]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d108      	bne.n	8003bbe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0220 	orr.w	r2, r2, #32
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	e007      	b.n	8003bce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0220 	bic.w	r2, r2, #32
 8003bcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	7edb      	ldrb	r3, [r3, #27]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d108      	bne.n	8003be8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0210 	bic.w	r2, r2, #16
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	e007      	b.n	8003bf8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0210 	orr.w	r2, r2, #16
 8003bf6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	7f1b      	ldrb	r3, [r3, #28]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d108      	bne.n	8003c12 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0208 	orr.w	r2, r2, #8
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	e007      	b.n	8003c22 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0208 	bic.w	r2, r2, #8
 8003c20:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	7f5b      	ldrb	r3, [r3, #29]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d108      	bne.n	8003c3c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 0204 	orr.w	r2, r2, #4
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	e007      	b.n	8003c4c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0204 	bic.w	r2, r2, #4
 8003c4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	ea42 0103 	orr.w	r1, r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	1e5a      	subs	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
	...

08003c8c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c9c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003c9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d003      	beq.n	8003cac <HAL_CAN_ConfigFilter+0x20>
 8003ca4:	7cfb      	ldrb	r3, [r7, #19]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	f040 80cb 	bne.w	8003e42 <HAL_CAN_ConfigFilter+0x1b6>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a6a      	ldr	r2, [pc, #424]	@ (8003e5c <HAL_CAN_ConfigFilter+0x1d0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d103      	bne.n	8003cbe <HAL_CAN_ConfigFilter+0x32>
    {
      /* CAN3 is single instance with 14 dedicated filters banks */
      can_ip = hcan->Instance;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	e001      	b.n	8003cc2 <HAL_CAN_ConfigFilter+0x36>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8003cbe:	4b68      	ldr	r3, [pc, #416]	@ (8003e60 <HAL_CAN_ConfigFilter+0x1d4>)
 8003cc0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003cc8:	f043 0201 	orr.w	r2, r3, #1
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	4a62      	ldr	r2, [pc, #392]	@ (8003e60 <HAL_CAN_ConfigFilter+0x1d4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d111      	bne.n	8003cfe <HAL_CAN_ConfigFilter+0x72>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003ce0:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf4:	021b      	lsls	r3, r3, #8
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	f003 031f 	and.w	r3, r3, #31
 8003d06:	2201      	movs	r2, #1
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	43db      	mvns	r3, r3
 8003d18:	401a      	ands	r2, r3
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d123      	bne.n	8003d70 <HAL_CAN_ConfigFilter+0xe4>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	43db      	mvns	r3, r3
 8003d32:	401a      	ands	r2, r3
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d4a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	3248      	adds	r2, #72	@ 0x48
 8003d50:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d64:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d66:	6979      	ldr	r1, [r7, #20]
 8003d68:	3348      	adds	r3, #72	@ 0x48
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	440b      	add	r3, r1
 8003d6e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d122      	bne.n	8003dbe <HAL_CAN_ConfigFilter+0x132>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	431a      	orrs	r2, r3
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003d98:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	3248      	adds	r2, #72	@ 0x48
 8003d9e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003db2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003db4:	6979      	ldr	r1, [r7, #20]
 8003db6:	3348      	adds	r3, #72	@ 0x48
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	440b      	add	r3, r1
 8003dbc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d109      	bne.n	8003dda <HAL_CAN_ConfigFilter+0x14e>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	43db      	mvns	r3, r3
 8003dd0:	401a      	ands	r2, r3
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003dd8:	e007      	b.n	8003dea <HAL_CAN_ConfigFilter+0x15e>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d109      	bne.n	8003e06 <HAL_CAN_ConfigFilter+0x17a>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	401a      	ands	r2, r3
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003e04:	e007      	b.n	8003e16 <HAL_CAN_ConfigFilter+0x18a>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d107      	bne.n	8003e2e <HAL_CAN_ConfigFilter+0x1a2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003e34:	f023 0201 	bic.w	r2, r3, #1
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e006      	b.n	8003e50 <HAL_CAN_ConfigFilter+0x1c4>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e46:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
  }
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	371c      	adds	r7, #28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	40003400 	.word	0x40003400
 8003e60:	40006400 	.word	0x40006400

08003e64 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d12e      	bne.n	8003ed6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0201 	bic.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e90:	f7ff f99e 	bl	80031d0 <HAL_GetTick>
 8003e94:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003e96:	e012      	b.n	8003ebe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e98:	f7ff f99a 	bl	80031d0 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b0a      	cmp	r3, #10
 8003ea4:	d90b      	bls.n	8003ebe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eaa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2205      	movs	r2, #5
 8003eb6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e012      	b.n	8003ee4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1e5      	bne.n	8003e98 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	e006      	b.n	8003ee4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eda:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
  }
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b089      	sub	sp, #36	@ 0x24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f00:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003f0a:	7ffb      	ldrb	r3, [r7, #31]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d003      	beq.n	8003f18 <HAL_CAN_AddTxMessage+0x2c>
 8003f10:	7ffb      	ldrb	r3, [r7, #31]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	f040 80ad 	bne.w	8004072 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10a      	bne.n	8003f38 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d105      	bne.n	8003f38 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 8095 	beq.w	8004062 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	0e1b      	lsrs	r3, r3, #24
 8003f3c:	f003 0303 	and.w	r3, r3, #3
 8003f40:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003f42:	2201      	movs	r2, #1
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	409a      	lsls	r2, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10d      	bne.n	8003f70 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f5e:	68f9      	ldr	r1, [r7, #12]
 8003f60:	6809      	ldr	r1, [r1, #0]
 8003f62:	431a      	orrs	r2, r3
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	3318      	adds	r3, #24
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	440b      	add	r3, r1
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	e00f      	b.n	8003f90 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f7a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f80:	68f9      	ldr	r1, [r7, #12]
 8003f82:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003f84:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	3318      	adds	r3, #24
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	440b      	add	r3, r1
 8003f8e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6819      	ldr	r1, [r3, #0]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	3318      	adds	r3, #24
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	440b      	add	r3, r1
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	7d1b      	ldrb	r3, [r3, #20]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d111      	bne.n	8003fd0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	3318      	adds	r3, #24
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3304      	adds	r3, #4
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	6811      	ldr	r1, [r2, #0]
 8003fc0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	3318      	adds	r3, #24
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	440b      	add	r3, r1
 8003fcc:	3304      	adds	r3, #4
 8003fce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3307      	adds	r3, #7
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	061a      	lsls	r2, r3, #24
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3306      	adds	r3, #6
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	041b      	lsls	r3, r3, #16
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3305      	adds	r3, #5
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	021b      	lsls	r3, r3, #8
 8003fea:	4313      	orrs	r3, r2
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	3204      	adds	r2, #4
 8003ff0:	7812      	ldrb	r2, [r2, #0]
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	6811      	ldr	r1, [r2, #0]
 8003ff8:	ea43 0200 	orr.w	r2, r3, r0
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	440b      	add	r3, r1
 8004002:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004006:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3303      	adds	r3, #3
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	061a      	lsls	r2, r3, #24
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3302      	adds	r3, #2
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	041b      	lsls	r3, r3, #16
 8004018:	431a      	orrs	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3301      	adds	r3, #1
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	021b      	lsls	r3, r3, #8
 8004022:	4313      	orrs	r3, r2
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	7812      	ldrb	r2, [r2, #0]
 8004028:	4610      	mov	r0, r2
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	6811      	ldr	r1, [r2, #0]
 800402e:	ea43 0200 	orr.w	r2, r3, r0
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	011b      	lsls	r3, r3, #4
 8004036:	440b      	add	r3, r1
 8004038:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800403c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	3318      	adds	r3, #24
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	4413      	add	r3, r2
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	6811      	ldr	r1, [r2, #0]
 8004050:	f043 0201 	orr.w	r2, r3, #1
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	3318      	adds	r3, #24
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	440b      	add	r3, r1
 800405c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	e00e      	b.n	8004080 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004066:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e006      	b.n	8004080 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004076:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
  }
}
 8004080:	4618      	mov	r0, r3
 8004082:	3724      	adds	r7, #36	@ 0x24
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040a0:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80040a2:	7afb      	ldrb	r3, [r7, #11]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d002      	beq.n	80040ae <HAL_CAN_IsTxMessagePending+0x22>
 80040a8:	7afb      	ldrb	r3, [r7, #11]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d10b      	bne.n	80040c6 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	069b      	lsls	r3, r3, #26
 80040b8:	401a      	ands	r2, r3
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	069b      	lsls	r3, r3, #26
 80040be:	429a      	cmp	r2, r3
 80040c0:	d001      	beq.n	80040c6 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80040c2:	2301      	movs	r3, #1
 80040c4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80040c6:	68fb      	ldr	r3, [r7, #12]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
 80040e0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040e8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80040ea:	7dfb      	ldrb	r3, [r7, #23]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d003      	beq.n	80040f8 <HAL_CAN_GetRxMessage+0x24>
 80040f0:	7dfb      	ldrb	r3, [r7, #23]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	f040 8103 	bne.w	80042fe <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10e      	bne.n	800411c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f003 0303 	and.w	r3, r3, #3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d116      	bne.n	800413a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004110:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e0f7      	b.n	800430c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d107      	bne.n	800413a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e0e8      	b.n	800430c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	331b      	adds	r3, #27
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	4413      	add	r3, r2
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0204 	and.w	r2, r3, #4
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10c      	bne.n	8004172 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	331b      	adds	r3, #27
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	4413      	add	r3, r2
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	0d5b      	lsrs	r3, r3, #21
 8004168:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	e00b      	b.n	800418a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	331b      	adds	r3, #27
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	4413      	add	r3, r2
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	08db      	lsrs	r3, r3, #3
 8004182:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	331b      	adds	r3, #27
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	4413      	add	r3, r2
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0202 	and.w	r2, r3, #2
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	331b      	adds	r3, #27
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	4413      	add	r3, r2
 80041ac:	3304      	adds	r3, #4
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2208      	movs	r2, #8
 80041bc:	611a      	str	r2, [r3, #16]
 80041be:	e00b      	b.n	80041d8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	331b      	adds	r3, #27
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	4413      	add	r3, r2
 80041cc:	3304      	adds	r3, #4
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 020f 	and.w	r2, r3, #15
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	331b      	adds	r3, #27
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	4413      	add	r3, r2
 80041e4:	3304      	adds	r3, #4
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	0a1b      	lsrs	r3, r3, #8
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	331b      	adds	r3, #27
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	4413      	add	r3, r2
 80041fc:	3304      	adds	r3, #4
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	0c1b      	lsrs	r3, r3, #16
 8004202:	b29a      	uxth	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	4413      	add	r3, r2
 8004212:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	b2da      	uxtb	r2, r3
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	4413      	add	r3, r2
 8004228:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	0a1a      	lsrs	r2, r3, #8
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	3301      	adds	r3, #1
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	4413      	add	r3, r2
 8004242:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	0c1a      	lsrs	r2, r3, #16
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	3302      	adds	r3, #2
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	4413      	add	r3, r2
 800425c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	0e1a      	lsrs	r2, r3, #24
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	3303      	adds	r3, #3
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	4413      	add	r3, r2
 8004276:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	3304      	adds	r3, #4
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	4413      	add	r3, r2
 800428e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	0a1a      	lsrs	r2, r3, #8
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	3305      	adds	r3, #5
 800429a:	b2d2      	uxtb	r2, r2
 800429c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	0c1a      	lsrs	r2, r3, #16
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	3306      	adds	r3, #6
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	0e1a      	lsrs	r2, r3, #24
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	3307      	adds	r3, #7
 80042ce:	b2d2      	uxtb	r2, r2
 80042d0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d108      	bne.n	80042ea <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0220 	orr.w	r2, r2, #32
 80042e6:	60da      	str	r2, [r3, #12]
 80042e8:	e007      	b.n	80042fa <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0220 	orr.w	r2, r2, #32
 80042f8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e006      	b.n	800430c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004302:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
  }
}
 800430c:	4618      	mov	r0, r3
 800430e:	371c      	adds	r7, #28
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004328:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d002      	beq.n	8004336 <HAL_CAN_ActivateNotification+0x1e>
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	2b02      	cmp	r3, #2
 8004334:	d109      	bne.n	800434a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6959      	ldr	r1, [r3, #20]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	e006      	b.n	8004358 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
  }
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004374:	4b0b      	ldr	r3, [pc, #44]	@ (80043a4 <__NVIC_SetPriorityGrouping+0x40>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004380:	4013      	ands	r3, r2
 8004382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800438c:	4b06      	ldr	r3, [pc, #24]	@ (80043a8 <__NVIC_SetPriorityGrouping+0x44>)
 800438e:	4313      	orrs	r3, r2
 8004390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004392:	4a04      	ldr	r2, [pc, #16]	@ (80043a4 <__NVIC_SetPriorityGrouping+0x40>)
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	60d3      	str	r3, [r2, #12]
}
 8004398:	bf00      	nop
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	e000ed00 	.word	0xe000ed00
 80043a8:	05fa0000 	.word	0x05fa0000

080043ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043b0:	4b04      	ldr	r3, [pc, #16]	@ (80043c4 <__NVIC_GetPriorityGrouping+0x18>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	0a1b      	lsrs	r3, r3, #8
 80043b6:	f003 0307 	and.w	r3, r3, #7
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	e000ed00 	.word	0xe000ed00

080043c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	4603      	mov	r3, r0
 80043d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	db0b      	blt.n	80043f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	f003 021f 	and.w	r2, r3, #31
 80043e0:	4907      	ldr	r1, [pc, #28]	@ (8004400 <__NVIC_EnableIRQ+0x38>)
 80043e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e6:	095b      	lsrs	r3, r3, #5
 80043e8:	2001      	movs	r0, #1
 80043ea:	fa00 f202 	lsl.w	r2, r0, r2
 80043ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	e000e100 	.word	0xe000e100

08004404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	4603      	mov	r3, r0
 800440c:	6039      	str	r1, [r7, #0]
 800440e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004414:	2b00      	cmp	r3, #0
 8004416:	db0a      	blt.n	800442e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	b2da      	uxtb	r2, r3
 800441c:	490c      	ldr	r1, [pc, #48]	@ (8004450 <__NVIC_SetPriority+0x4c>)
 800441e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004422:	0112      	lsls	r2, r2, #4
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	440b      	add	r3, r1
 8004428:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800442c:	e00a      	b.n	8004444 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	b2da      	uxtb	r2, r3
 8004432:	4908      	ldr	r1, [pc, #32]	@ (8004454 <__NVIC_SetPriority+0x50>)
 8004434:	79fb      	ldrb	r3, [r7, #7]
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	3b04      	subs	r3, #4
 800443c:	0112      	lsls	r2, r2, #4
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	440b      	add	r3, r1
 8004442:	761a      	strb	r2, [r3, #24]
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	e000e100 	.word	0xe000e100
 8004454:	e000ed00 	.word	0xe000ed00

08004458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004458:	b480      	push	{r7}
 800445a:	b089      	sub	sp, #36	@ 0x24
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	f1c3 0307 	rsb	r3, r3, #7
 8004472:	2b04      	cmp	r3, #4
 8004474:	bf28      	it	cs
 8004476:	2304      	movcs	r3, #4
 8004478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	3304      	adds	r3, #4
 800447e:	2b06      	cmp	r3, #6
 8004480:	d902      	bls.n	8004488 <NVIC_EncodePriority+0x30>
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	3b03      	subs	r3, #3
 8004486:	e000      	b.n	800448a <NVIC_EncodePriority+0x32>
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800448c:	f04f 32ff 	mov.w	r2, #4294967295
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	43da      	mvns	r2, r3
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	401a      	ands	r2, r3
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044a0:	f04f 31ff 	mov.w	r1, #4294967295
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	fa01 f303 	lsl.w	r3, r1, r3
 80044aa:	43d9      	mvns	r1, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044b0:	4313      	orrs	r3, r2
         );
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3724      	adds	r7, #36	@ 0x24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
	...

080044c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044d0:	d301      	bcc.n	80044d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044d2:	2301      	movs	r3, #1
 80044d4:	e00f      	b.n	80044f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004500 <SysTick_Config+0x40>)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3b01      	subs	r3, #1
 80044dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044de:	210f      	movs	r1, #15
 80044e0:	f04f 30ff 	mov.w	r0, #4294967295
 80044e4:	f7ff ff8e 	bl	8004404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044e8:	4b05      	ldr	r3, [pc, #20]	@ (8004500 <SysTick_Config+0x40>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044ee:	4b04      	ldr	r3, [pc, #16]	@ (8004500 <SysTick_Config+0x40>)
 80044f0:	2207      	movs	r2, #7
 80044f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	e000e010 	.word	0xe000e010

08004504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff ff29 	bl	8004364 <__NVIC_SetPriorityGrouping>
}
 8004512:	bf00      	nop
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800451a:	b580      	push	{r7, lr}
 800451c:	b086      	sub	sp, #24
 800451e:	af00      	add	r7, sp, #0
 8004520:	4603      	mov	r3, r0
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	607a      	str	r2, [r7, #4]
 8004526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004528:	2300      	movs	r3, #0
 800452a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800452c:	f7ff ff3e 	bl	80043ac <__NVIC_GetPriorityGrouping>
 8004530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	68b9      	ldr	r1, [r7, #8]
 8004536:	6978      	ldr	r0, [r7, #20]
 8004538:	f7ff ff8e 	bl	8004458 <NVIC_EncodePriority>
 800453c:	4602      	mov	r2, r0
 800453e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004542:	4611      	mov	r1, r2
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff ff5d 	bl	8004404 <__NVIC_SetPriority>
}
 800454a:	bf00      	nop
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b082      	sub	sp, #8
 8004556:	af00      	add	r7, sp, #0
 8004558:	4603      	mov	r3, r0
 800455a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800455c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff ff31 	bl	80043c8 <__NVIC_EnableIRQ>
}
 8004566:	bf00      	nop
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b082      	sub	sp, #8
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff ffa2 	bl	80044c0 <SysTick_Config>
 800457c:	4603      	mov	r3, r0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b084      	sub	sp, #16
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004592:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004594:	f7fe fe1c 	bl	80031d0 <HAL_GetTick>
 8004598:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d008      	beq.n	80045b8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2280      	movs	r2, #128	@ 0x80
 80045aa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e052      	b.n	800465e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0216 	bic.w	r2, r2, #22
 80045c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	695a      	ldr	r2, [r3, #20]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045d6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d103      	bne.n	80045e8 <HAL_DMA_Abort+0x62>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d007      	beq.n	80045f8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0208 	bic.w	r2, r2, #8
 80045f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0201 	bic.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004608:	e013      	b.n	8004632 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800460a:	f7fe fde1 	bl	80031d0 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b05      	cmp	r3, #5
 8004616:	d90c      	bls.n	8004632 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2220      	movs	r2, #32
 800461c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2203      	movs	r2, #3
 8004622:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e015      	b.n	800465e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1e4      	bne.n	800460a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004644:	223f      	movs	r2, #63	@ 0x3f
 8004646:	409a      	lsls	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d004      	beq.n	8004684 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2280      	movs	r2, #128	@ 0x80
 800467e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e00c      	b.n	800469e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2205      	movs	r2, #5
 8004688:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0201 	bic.w	r2, r2, #1
 800469a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
	...

080046ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b089      	sub	sp, #36	@ 0x24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80046b6:	2300      	movs	r3, #0
 80046b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80046be:	2300      	movs	r3, #0
 80046c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80046c2:	2300      	movs	r3, #0
 80046c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80046c6:	2300      	movs	r3, #0
 80046c8:	61fb      	str	r3, [r7, #28]
 80046ca:	e175      	b.n	80049b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80046cc:	2201      	movs	r2, #1
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	4013      	ands	r3, r2
 80046de:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	f040 8164 	bne.w	80049b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d005      	beq.n	8004702 <HAL_GPIO_Init+0x56>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d130      	bne.n	8004764 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	2203      	movs	r2, #3
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	43db      	mvns	r3, r3
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	4013      	ands	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68da      	ldr	r2, [r3, #12]
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	4313      	orrs	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004738:	2201      	movs	r2, #1
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	43db      	mvns	r3, r3
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	4013      	ands	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f003 0201 	and.w	r2, r3, #1
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	4313      	orrs	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 0303 	and.w	r3, r3, #3
 800476c:	2b03      	cmp	r3, #3
 800476e:	d017      	beq.n	80047a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	2203      	movs	r2, #3
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	43db      	mvns	r3, r3
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	4013      	ands	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	4313      	orrs	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f003 0303 	and.w	r3, r3, #3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d123      	bne.n	80047f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	08da      	lsrs	r2, r3, #3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3208      	adds	r2, #8
 80047b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	220f      	movs	r2, #15
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	43db      	mvns	r3, r3
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	4013      	ands	r3, r2
 80047ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	08da      	lsrs	r2, r3, #3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3208      	adds	r2, #8
 80047ee:	69b9      	ldr	r1, [r7, #24]
 80047f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	2203      	movs	r2, #3
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	43db      	mvns	r3, r3
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	4013      	ands	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f003 0203 	and.w	r2, r3, #3
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	4313      	orrs	r3, r2
 8004820:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 80be 	beq.w	80049b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004836:	4b66      	ldr	r3, [pc, #408]	@ (80049d0 <HAL_GPIO_Init+0x324>)
 8004838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800483a:	4a65      	ldr	r2, [pc, #404]	@ (80049d0 <HAL_GPIO_Init+0x324>)
 800483c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004840:	6453      	str	r3, [r2, #68]	@ 0x44
 8004842:	4b63      	ldr	r3, [pc, #396]	@ (80049d0 <HAL_GPIO_Init+0x324>)
 8004844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800484e:	4a61      	ldr	r2, [pc, #388]	@ (80049d4 <HAL_GPIO_Init+0x328>)
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	089b      	lsrs	r3, r3, #2
 8004854:	3302      	adds	r3, #2
 8004856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800485a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	220f      	movs	r2, #15
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	43db      	mvns	r3, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4013      	ands	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a58      	ldr	r2, [pc, #352]	@ (80049d8 <HAL_GPIO_Init+0x32c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d037      	beq.n	80048ea <HAL_GPIO_Init+0x23e>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a57      	ldr	r2, [pc, #348]	@ (80049dc <HAL_GPIO_Init+0x330>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d031      	beq.n	80048e6 <HAL_GPIO_Init+0x23a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a56      	ldr	r2, [pc, #344]	@ (80049e0 <HAL_GPIO_Init+0x334>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d02b      	beq.n	80048e2 <HAL_GPIO_Init+0x236>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a55      	ldr	r2, [pc, #340]	@ (80049e4 <HAL_GPIO_Init+0x338>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d025      	beq.n	80048de <HAL_GPIO_Init+0x232>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a54      	ldr	r2, [pc, #336]	@ (80049e8 <HAL_GPIO_Init+0x33c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d01f      	beq.n	80048da <HAL_GPIO_Init+0x22e>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a53      	ldr	r2, [pc, #332]	@ (80049ec <HAL_GPIO_Init+0x340>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d019      	beq.n	80048d6 <HAL_GPIO_Init+0x22a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a52      	ldr	r2, [pc, #328]	@ (80049f0 <HAL_GPIO_Init+0x344>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d013      	beq.n	80048d2 <HAL_GPIO_Init+0x226>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a51      	ldr	r2, [pc, #324]	@ (80049f4 <HAL_GPIO_Init+0x348>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00d      	beq.n	80048ce <HAL_GPIO_Init+0x222>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a50      	ldr	r2, [pc, #320]	@ (80049f8 <HAL_GPIO_Init+0x34c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d007      	beq.n	80048ca <HAL_GPIO_Init+0x21e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a4f      	ldr	r2, [pc, #316]	@ (80049fc <HAL_GPIO_Init+0x350>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d101      	bne.n	80048c6 <HAL_GPIO_Init+0x21a>
 80048c2:	2309      	movs	r3, #9
 80048c4:	e012      	b.n	80048ec <HAL_GPIO_Init+0x240>
 80048c6:	230a      	movs	r3, #10
 80048c8:	e010      	b.n	80048ec <HAL_GPIO_Init+0x240>
 80048ca:	2308      	movs	r3, #8
 80048cc:	e00e      	b.n	80048ec <HAL_GPIO_Init+0x240>
 80048ce:	2307      	movs	r3, #7
 80048d0:	e00c      	b.n	80048ec <HAL_GPIO_Init+0x240>
 80048d2:	2306      	movs	r3, #6
 80048d4:	e00a      	b.n	80048ec <HAL_GPIO_Init+0x240>
 80048d6:	2305      	movs	r3, #5
 80048d8:	e008      	b.n	80048ec <HAL_GPIO_Init+0x240>
 80048da:	2304      	movs	r3, #4
 80048dc:	e006      	b.n	80048ec <HAL_GPIO_Init+0x240>
 80048de:	2303      	movs	r3, #3
 80048e0:	e004      	b.n	80048ec <HAL_GPIO_Init+0x240>
 80048e2:	2302      	movs	r3, #2
 80048e4:	e002      	b.n	80048ec <HAL_GPIO_Init+0x240>
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <HAL_GPIO_Init+0x240>
 80048ea:	2300      	movs	r3, #0
 80048ec:	69fa      	ldr	r2, [r7, #28]
 80048ee:	f002 0203 	and.w	r2, r2, #3
 80048f2:	0092      	lsls	r2, r2, #2
 80048f4:	4093      	lsls	r3, r2
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80048fc:	4935      	ldr	r1, [pc, #212]	@ (80049d4 <HAL_GPIO_Init+0x328>)
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	089b      	lsrs	r3, r3, #2
 8004902:	3302      	adds	r3, #2
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800490a:	4b3d      	ldr	r3, [pc, #244]	@ (8004a00 <HAL_GPIO_Init+0x354>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	43db      	mvns	r3, r3
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	4013      	ands	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	4313      	orrs	r3, r2
 800492c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800492e:	4a34      	ldr	r2, [pc, #208]	@ (8004a00 <HAL_GPIO_Init+0x354>)
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004934:	4b32      	ldr	r3, [pc, #200]	@ (8004a00 <HAL_GPIO_Init+0x354>)
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	43db      	mvns	r3, r3
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	4013      	ands	r3, r2
 8004942:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	4313      	orrs	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004958:	4a29      	ldr	r2, [pc, #164]	@ (8004a00 <HAL_GPIO_Init+0x354>)
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800495e:	4b28      	ldr	r3, [pc, #160]	@ (8004a00 <HAL_GPIO_Init+0x354>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	43db      	mvns	r3, r3
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4013      	ands	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	4313      	orrs	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004982:	4a1f      	ldr	r2, [pc, #124]	@ (8004a00 <HAL_GPIO_Init+0x354>)
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004988:	4b1d      	ldr	r3, [pc, #116]	@ (8004a00 <HAL_GPIO_Init+0x354>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	43db      	mvns	r3, r3
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	4013      	ands	r3, r2
 8004996:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049ac:	4a14      	ldr	r2, [pc, #80]	@ (8004a00 <HAL_GPIO_Init+0x354>)
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	3301      	adds	r3, #1
 80049b6:	61fb      	str	r3, [r7, #28]
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	2b0f      	cmp	r3, #15
 80049bc:	f67f ae86 	bls.w	80046cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80049c0:	bf00      	nop
 80049c2:	bf00      	nop
 80049c4:	3724      	adds	r7, #36	@ 0x24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40023800 	.word	0x40023800
 80049d4:	40013800 	.word	0x40013800
 80049d8:	40020000 	.word	0x40020000
 80049dc:	40020400 	.word	0x40020400
 80049e0:	40020800 	.word	0x40020800
 80049e4:	40020c00 	.word	0x40020c00
 80049e8:	40021000 	.word	0x40021000
 80049ec:	40021400 	.word	0x40021400
 80049f0:	40021800 	.word	0x40021800
 80049f4:	40021c00 	.word	0x40021c00
 80049f8:	40022000 	.word	0x40022000
 80049fc:	40022400 	.word	0x40022400
 8004a00:	40013c00 	.word	0x40013c00

08004a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	807b      	strh	r3, [r7, #2]
 8004a10:	4613      	mov	r3, r2
 8004a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a14:	787b      	ldrb	r3, [r7, #1]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a1a:	887a      	ldrh	r2, [r7, #2]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004a20:	e003      	b.n	8004a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004a22:	887b      	ldrh	r3, [r7, #2]
 8004a24:	041a      	lsls	r2, r3, #16
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	619a      	str	r2, [r3, #24]
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b086      	sub	sp, #24
 8004a3a:	af02      	add	r7, sp, #8
 8004a3c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e108      	b.n	8004c5a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d106      	bne.n	8004a68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7fe f9d2 	bl	8002e0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2203      	movs	r2, #3
 8004a6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a76:	d102      	bne.n	8004a7e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f002 feda 	bl	800783c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	7c1a      	ldrb	r2, [r3, #16]
 8004a90:	f88d 2000 	strb.w	r2, [sp]
 8004a94:	3304      	adds	r3, #4
 8004a96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a98:	f002 fe76 	bl	8007788 <USB_CoreInit>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d005      	beq.n	8004aae <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e0d5      	b.n	8004c5a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f002 fed2 	bl	800785e <USB_SetCurrentMode>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d005      	beq.n	8004acc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e0c6      	b.n	8004c5a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004acc:	2300      	movs	r3, #0
 8004ace:	73fb      	strb	r3, [r7, #15]
 8004ad0:	e04a      	b.n	8004b68 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ad2:	7bfa      	ldrb	r2, [r7, #15]
 8004ad4:	6879      	ldr	r1, [r7, #4]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	440b      	add	r3, r1
 8004ae0:	3315      	adds	r3, #21
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ae6:	7bfa      	ldrb	r2, [r7, #15]
 8004ae8:	6879      	ldr	r1, [r7, #4]
 8004aea:	4613      	mov	r3, r2
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	4413      	add	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	440b      	add	r3, r1
 8004af4:	3314      	adds	r3, #20
 8004af6:	7bfa      	ldrb	r2, [r7, #15]
 8004af8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004afa:	7bfa      	ldrb	r2, [r7, #15]
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	b298      	uxth	r0, r3
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	4613      	mov	r3, r2
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	4413      	add	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	440b      	add	r3, r1
 8004b0c:	332e      	adds	r3, #46	@ 0x2e
 8004b0e:	4602      	mov	r2, r0
 8004b10:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b12:	7bfa      	ldrb	r2, [r7, #15]
 8004b14:	6879      	ldr	r1, [r7, #4]
 8004b16:	4613      	mov	r3, r2
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	4413      	add	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	440b      	add	r3, r1
 8004b20:	3318      	adds	r3, #24
 8004b22:	2200      	movs	r2, #0
 8004b24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b26:	7bfa      	ldrb	r2, [r7, #15]
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	4413      	add	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	440b      	add	r3, r1
 8004b34:	331c      	adds	r3, #28
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b3a:	7bfa      	ldrb	r2, [r7, #15]
 8004b3c:	6879      	ldr	r1, [r7, #4]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	4413      	add	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	440b      	add	r3, r1
 8004b48:	3320      	adds	r3, #32
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b4e:	7bfa      	ldrb	r2, [r7, #15]
 8004b50:	6879      	ldr	r1, [r7, #4]
 8004b52:	4613      	mov	r3, r2
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	4413      	add	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	3324      	adds	r3, #36	@ 0x24
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b62:	7bfb      	ldrb	r3, [r7, #15]
 8004b64:	3301      	adds	r3, #1
 8004b66:	73fb      	strb	r3, [r7, #15]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	791b      	ldrb	r3, [r3, #4]
 8004b6c:	7bfa      	ldrb	r2, [r7, #15]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d3af      	bcc.n	8004ad2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b72:	2300      	movs	r3, #0
 8004b74:	73fb      	strb	r3, [r7, #15]
 8004b76:	e044      	b.n	8004c02 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b78:	7bfa      	ldrb	r2, [r7, #15]
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	4413      	add	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	440b      	add	r3, r1
 8004b86:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004b8e:	7bfa      	ldrb	r2, [r7, #15]
 8004b90:	6879      	ldr	r1, [r7, #4]
 8004b92:	4613      	mov	r3, r2
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	4413      	add	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	440b      	add	r3, r1
 8004b9c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004ba0:	7bfa      	ldrb	r2, [r7, #15]
 8004ba2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ba4:	7bfa      	ldrb	r2, [r7, #15]
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004bba:	7bfa      	ldrb	r2, [r7, #15]
 8004bbc:	6879      	ldr	r1, [r7, #4]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004bd0:	7bfa      	ldrb	r2, [r7, #15]
 8004bd2:	6879      	ldr	r1, [r7, #4]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	4413      	add	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	440b      	add	r3, r1
 8004bde:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004be2:	2200      	movs	r2, #0
 8004be4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004be6:	7bfa      	ldrb	r2, [r7, #15]
 8004be8:	6879      	ldr	r1, [r7, #4]
 8004bea:	4613      	mov	r3, r2
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	4413      	add	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	73fb      	strb	r3, [r7, #15]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	791b      	ldrb	r3, [r3, #4]
 8004c06:	7bfa      	ldrb	r2, [r7, #15]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d3b5      	bcc.n	8004b78 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6818      	ldr	r0, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	7c1a      	ldrb	r2, [r3, #16]
 8004c14:	f88d 2000 	strb.w	r2, [sp]
 8004c18:	3304      	adds	r3, #4
 8004c1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c1c:	f002 fe6c 	bl	80078f8 <USB_DevInit>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d005      	beq.n	8004c32 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e013      	b.n	8004c5a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	7b1b      	ldrb	r3, [r3, #12]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d102      	bne.n	8004c4e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f80b 	bl	8004c64 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f003 f827 	bl	8007ca6 <USB_DevDisconnect>

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c92:	4b05      	ldr	r3, [pc, #20]	@ (8004ca8 <HAL_PCDEx_ActivateLPM+0x44>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	10000003 	.word	0x10000003

08004cac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cb0:	4b05      	ldr	r3, [pc, #20]	@ (8004cc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a04      	ldr	r2, [pc, #16]	@ (8004cc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004cb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cba:	6013      	str	r3, [r2, #0]
}
 8004cbc:	bf00      	nop
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40007000 	.word	0x40007000

08004ccc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004cd6:	4b23      	ldr	r3, [pc, #140]	@ (8004d64 <HAL_PWREx_EnableOverDrive+0x98>)
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cda:	4a22      	ldr	r2, [pc, #136]	@ (8004d64 <HAL_PWREx_EnableOverDrive+0x98>)
 8004cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ce2:	4b20      	ldr	r3, [pc, #128]	@ (8004d64 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cea:	603b      	str	r3, [r7, #0]
 8004cec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004cee:	4b1e      	ldr	r3, [pc, #120]	@ (8004d68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a1d      	ldr	r2, [pc, #116]	@ (8004d68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cf8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cfa:	f7fe fa69 	bl	80031d0 <HAL_GetTick>
 8004cfe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d00:	e009      	b.n	8004d16 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d02:	f7fe fa65 	bl	80031d0 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d10:	d901      	bls.n	8004d16 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e022      	b.n	8004d5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d16:	4b14      	ldr	r3, [pc, #80]	@ (8004d68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d22:	d1ee      	bne.n	8004d02 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004d24:	4b10      	ldr	r3, [pc, #64]	@ (8004d68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a0f      	ldr	r2, [pc, #60]	@ (8004d68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d2e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d30:	f7fe fa4e 	bl	80031d0 <HAL_GetTick>
 8004d34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d36:	e009      	b.n	8004d4c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d38:	f7fe fa4a 	bl	80031d0 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d46:	d901      	bls.n	8004d4c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e007      	b.n	8004d5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d4c:	4b06      	ldr	r3, [pc, #24]	@ (8004d68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d58:	d1ee      	bne.n	8004d38 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	40023800 	.word	0x40023800
 8004d68:	40007000 	.word	0x40007000

08004d6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004d74:	2300      	movs	r3, #0
 8004d76:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e29b      	b.n	80052ba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 8087 	beq.w	8004e9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d90:	4b96      	ldr	r3, [pc, #600]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f003 030c 	and.w	r3, r3, #12
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	d00c      	beq.n	8004db6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d9c:	4b93      	ldr	r3, [pc, #588]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f003 030c 	and.w	r3, r3, #12
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d112      	bne.n	8004dce <HAL_RCC_OscConfig+0x62>
 8004da8:	4b90      	ldr	r3, [pc, #576]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004db0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004db4:	d10b      	bne.n	8004dce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db6:	4b8d      	ldr	r3, [pc, #564]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d06c      	beq.n	8004e9c <HAL_RCC_OscConfig+0x130>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d168      	bne.n	8004e9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e275      	b.n	80052ba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dd6:	d106      	bne.n	8004de6 <HAL_RCC_OscConfig+0x7a>
 8004dd8:	4b84      	ldr	r3, [pc, #528]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a83      	ldr	r2, [pc, #524]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004dde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004de2:	6013      	str	r3, [r2, #0]
 8004de4:	e02e      	b.n	8004e44 <HAL_RCC_OscConfig+0xd8>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10c      	bne.n	8004e08 <HAL_RCC_OscConfig+0x9c>
 8004dee:	4b7f      	ldr	r3, [pc, #508]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a7e      	ldr	r2, [pc, #504]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004df4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	4b7c      	ldr	r3, [pc, #496]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a7b      	ldr	r2, [pc, #492]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004e00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e04:	6013      	str	r3, [r2, #0]
 8004e06:	e01d      	b.n	8004e44 <HAL_RCC_OscConfig+0xd8>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e10:	d10c      	bne.n	8004e2c <HAL_RCC_OscConfig+0xc0>
 8004e12:	4b76      	ldr	r3, [pc, #472]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a75      	ldr	r2, [pc, #468]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004e18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	4b73      	ldr	r3, [pc, #460]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a72      	ldr	r2, [pc, #456]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	e00b      	b.n	8004e44 <HAL_RCC_OscConfig+0xd8>
 8004e2c:	4b6f      	ldr	r3, [pc, #444]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a6e      	ldr	r2, [pc, #440]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004e32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e36:	6013      	str	r3, [r2, #0]
 8004e38:	4b6c      	ldr	r3, [pc, #432]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a6b      	ldr	r2, [pc, #428]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004e3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d013      	beq.n	8004e74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4c:	f7fe f9c0 	bl	80031d0 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e54:	f7fe f9bc 	bl	80031d0 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b64      	cmp	r3, #100	@ 0x64
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e229      	b.n	80052ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e66:	4b61      	ldr	r3, [pc, #388]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0f0      	beq.n	8004e54 <HAL_RCC_OscConfig+0xe8>
 8004e72:	e014      	b.n	8004e9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e74:	f7fe f9ac 	bl	80031d0 <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e7c:	f7fe f9a8 	bl	80031d0 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b64      	cmp	r3, #100	@ 0x64
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e215      	b.n	80052ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e8e:	4b57      	ldr	r3, [pc, #348]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1f0      	bne.n	8004e7c <HAL_RCC_OscConfig+0x110>
 8004e9a:	e000      	b.n	8004e9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d069      	beq.n	8004f7e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004eaa:	4b50      	ldr	r3, [pc, #320]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 030c 	and.w	r3, r3, #12
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00b      	beq.n	8004ece <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eb6:	4b4d      	ldr	r3, [pc, #308]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 030c 	and.w	r3, r3, #12
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d11c      	bne.n	8004efc <HAL_RCC_OscConfig+0x190>
 8004ec2:	4b4a      	ldr	r3, [pc, #296]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d116      	bne.n	8004efc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ece:	4b47      	ldr	r3, [pc, #284]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d005      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x17a>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d001      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e1e9      	b.n	80052ba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee6:	4b41      	ldr	r3, [pc, #260]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	493d      	ldr	r1, [pc, #244]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004efa:	e040      	b.n	8004f7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d023      	beq.n	8004f4c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f04:	4b39      	ldr	r3, [pc, #228]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a38      	ldr	r2, [pc, #224]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004f0a:	f043 0301 	orr.w	r3, r3, #1
 8004f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fe f95e 	bl	80031d0 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f18:	f7fe f95a 	bl	80031d0 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e1c7      	b.n	80052ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f2a:	4b30      	ldr	r3, [pc, #192]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0f0      	beq.n	8004f18 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f36:	4b2d      	ldr	r3, [pc, #180]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	4929      	ldr	r1, [pc, #164]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	600b      	str	r3, [r1, #0]
 8004f4a:	e018      	b.n	8004f7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f4c:	4b27      	ldr	r3, [pc, #156]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a26      	ldr	r2, [pc, #152]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004f52:	f023 0301 	bic.w	r3, r3, #1
 8004f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f58:	f7fe f93a 	bl	80031d0 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f60:	f7fe f936 	bl	80031d0 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e1a3      	b.n	80052ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f72:	4b1e      	ldr	r3, [pc, #120]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1f0      	bne.n	8004f60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d038      	beq.n	8004ffc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d019      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f92:	4b16      	ldr	r3, [pc, #88]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004f94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f96:	4a15      	ldr	r2, [pc, #84]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004f98:	f043 0301 	orr.w	r3, r3, #1
 8004f9c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f9e:	f7fe f917 	bl	80031d0 <HAL_GetTick>
 8004fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fa6:	f7fe f913 	bl	80031d0 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e180      	b.n	80052ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004fba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0f0      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x23a>
 8004fc4:	e01a      	b.n	8004ffc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fc6:	4b09      	ldr	r3, [pc, #36]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fca:	4a08      	ldr	r2, [pc, #32]	@ (8004fec <HAL_RCC_OscConfig+0x280>)
 8004fcc:	f023 0301 	bic.w	r3, r3, #1
 8004fd0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd2:	f7fe f8fd 	bl	80031d0 <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fd8:	e00a      	b.n	8004ff0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fda:	f7fe f8f9 	bl	80031d0 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d903      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e166      	b.n	80052ba <HAL_RCC_OscConfig+0x54e>
 8004fec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ff0:	4b92      	ldr	r3, [pc, #584]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 8004ff2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1ee      	bne.n	8004fda <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 80a4 	beq.w	8005152 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800500a:	4b8c      	ldr	r3, [pc, #560]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 800500c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10d      	bne.n	8005032 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005016:	4b89      	ldr	r3, [pc, #548]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 8005018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501a:	4a88      	ldr	r2, [pc, #544]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 800501c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005020:	6413      	str	r3, [r2, #64]	@ 0x40
 8005022:	4b86      	ldr	r3, [pc, #536]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 8005024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800502a:	60bb      	str	r3, [r7, #8]
 800502c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800502e:	2301      	movs	r3, #1
 8005030:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005032:	4b83      	ldr	r3, [pc, #524]	@ (8005240 <HAL_RCC_OscConfig+0x4d4>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800503a:	2b00      	cmp	r3, #0
 800503c:	d118      	bne.n	8005070 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800503e:	4b80      	ldr	r3, [pc, #512]	@ (8005240 <HAL_RCC_OscConfig+0x4d4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a7f      	ldr	r2, [pc, #508]	@ (8005240 <HAL_RCC_OscConfig+0x4d4>)
 8005044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800504a:	f7fe f8c1 	bl	80031d0 <HAL_GetTick>
 800504e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005050:	e008      	b.n	8005064 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005052:	f7fe f8bd 	bl	80031d0 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b64      	cmp	r3, #100	@ 0x64
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e12a      	b.n	80052ba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005064:	4b76      	ldr	r3, [pc, #472]	@ (8005240 <HAL_RCC_OscConfig+0x4d4>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0f0      	beq.n	8005052 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d106      	bne.n	8005086 <HAL_RCC_OscConfig+0x31a>
 8005078:	4b70      	ldr	r3, [pc, #448]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 800507a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800507c:	4a6f      	ldr	r2, [pc, #444]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 800507e:	f043 0301 	orr.w	r3, r3, #1
 8005082:	6713      	str	r3, [r2, #112]	@ 0x70
 8005084:	e02d      	b.n	80050e2 <HAL_RCC_OscConfig+0x376>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10c      	bne.n	80050a8 <HAL_RCC_OscConfig+0x33c>
 800508e:	4b6b      	ldr	r3, [pc, #428]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 8005090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005092:	4a6a      	ldr	r2, [pc, #424]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 8005094:	f023 0301 	bic.w	r3, r3, #1
 8005098:	6713      	str	r3, [r2, #112]	@ 0x70
 800509a:	4b68      	ldr	r3, [pc, #416]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 800509c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800509e:	4a67      	ldr	r2, [pc, #412]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 80050a0:	f023 0304 	bic.w	r3, r3, #4
 80050a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80050a6:	e01c      	b.n	80050e2 <HAL_RCC_OscConfig+0x376>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	2b05      	cmp	r3, #5
 80050ae:	d10c      	bne.n	80050ca <HAL_RCC_OscConfig+0x35e>
 80050b0:	4b62      	ldr	r3, [pc, #392]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 80050b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b4:	4a61      	ldr	r2, [pc, #388]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 80050b6:	f043 0304 	orr.w	r3, r3, #4
 80050ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80050bc:	4b5f      	ldr	r3, [pc, #380]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 80050be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c0:	4a5e      	ldr	r2, [pc, #376]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 80050c2:	f043 0301 	orr.w	r3, r3, #1
 80050c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80050c8:	e00b      	b.n	80050e2 <HAL_RCC_OscConfig+0x376>
 80050ca:	4b5c      	ldr	r3, [pc, #368]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 80050cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ce:	4a5b      	ldr	r2, [pc, #364]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 80050d0:	f023 0301 	bic.w	r3, r3, #1
 80050d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80050d6:	4b59      	ldr	r3, [pc, #356]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 80050d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050da:	4a58      	ldr	r2, [pc, #352]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 80050dc:	f023 0304 	bic.w	r3, r3, #4
 80050e0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d015      	beq.n	8005116 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ea:	f7fe f871 	bl	80031d0 <HAL_GetTick>
 80050ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050f0:	e00a      	b.n	8005108 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f2:	f7fe f86d 	bl	80031d0 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005100:	4293      	cmp	r3, r2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e0d8      	b.n	80052ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005108:	4b4c      	ldr	r3, [pc, #304]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 800510a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0ee      	beq.n	80050f2 <HAL_RCC_OscConfig+0x386>
 8005114:	e014      	b.n	8005140 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005116:	f7fe f85b 	bl	80031d0 <HAL_GetTick>
 800511a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800511c:	e00a      	b.n	8005134 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800511e:	f7fe f857 	bl	80031d0 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800512c:	4293      	cmp	r3, r2
 800512e:	d901      	bls.n	8005134 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e0c2      	b.n	80052ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005134:	4b41      	ldr	r3, [pc, #260]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 8005136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1ee      	bne.n	800511e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005140:	7dfb      	ldrb	r3, [r7, #23]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d105      	bne.n	8005152 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005146:	4b3d      	ldr	r3, [pc, #244]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 8005148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514a:	4a3c      	ldr	r2, [pc, #240]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 800514c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005150:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 80ae 	beq.w	80052b8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800515c:	4b37      	ldr	r3, [pc, #220]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f003 030c 	and.w	r3, r3, #12
 8005164:	2b08      	cmp	r3, #8
 8005166:	d06d      	beq.n	8005244 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	2b02      	cmp	r3, #2
 800516e:	d14b      	bne.n	8005208 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005170:	4b32      	ldr	r3, [pc, #200]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a31      	ldr	r2, [pc, #196]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 8005176:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800517a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517c:	f7fe f828 	bl	80031d0 <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005184:	f7fe f824 	bl	80031d0 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e091      	b.n	80052ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005196:	4b29      	ldr	r3, [pc, #164]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1f0      	bne.n	8005184 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69da      	ldr	r2, [r3, #28]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b0:	019b      	lsls	r3, r3, #6
 80051b2:	431a      	orrs	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b8:	085b      	lsrs	r3, r3, #1
 80051ba:	3b01      	subs	r3, #1
 80051bc:	041b      	lsls	r3, r3, #16
 80051be:	431a      	orrs	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c4:	061b      	lsls	r3, r3, #24
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051cc:	071b      	lsls	r3, r3, #28
 80051ce:	491b      	ldr	r1, [pc, #108]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051d4:	4b19      	ldr	r3, [pc, #100]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a18      	ldr	r2, [pc, #96]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 80051da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e0:	f7fd fff6 	bl	80031d0 <HAL_GetTick>
 80051e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e8:	f7fd fff2 	bl	80031d0 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e05f      	b.n	80052ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051fa:	4b10      	ldr	r3, [pc, #64]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0f0      	beq.n	80051e8 <HAL_RCC_OscConfig+0x47c>
 8005206:	e057      	b.n	80052b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005208:	4b0c      	ldr	r3, [pc, #48]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a0b      	ldr	r2, [pc, #44]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 800520e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005214:	f7fd ffdc 	bl	80031d0 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800521c:	f7fd ffd8 	bl	80031d0 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e045      	b.n	80052ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800522e:	4b03      	ldr	r3, [pc, #12]	@ (800523c <HAL_RCC_OscConfig+0x4d0>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1f0      	bne.n	800521c <HAL_RCC_OscConfig+0x4b0>
 800523a:	e03d      	b.n	80052b8 <HAL_RCC_OscConfig+0x54c>
 800523c:	40023800 	.word	0x40023800
 8005240:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005244:	4b1f      	ldr	r3, [pc, #124]	@ (80052c4 <HAL_RCC_OscConfig+0x558>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d030      	beq.n	80052b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800525c:	429a      	cmp	r2, r3
 800525e:	d129      	bne.n	80052b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800526a:	429a      	cmp	r2, r3
 800526c:	d122      	bne.n	80052b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005274:	4013      	ands	r3, r2
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800527a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800527c:	4293      	cmp	r3, r2
 800527e:	d119      	bne.n	80052b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800528a:	085b      	lsrs	r3, r3, #1
 800528c:	3b01      	subs	r3, #1
 800528e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005290:	429a      	cmp	r2, r3
 8005292:	d10f      	bne.n	80052b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d107      	bne.n	80052b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d001      	beq.n	80052b8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e000      	b.n	80052ba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40023800 	.word	0x40023800

080052c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0d0      	b.n	8005482 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052e0:	4b6a      	ldr	r3, [pc, #424]	@ (800548c <HAL_RCC_ClockConfig+0x1c4>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 030f 	and.w	r3, r3, #15
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d910      	bls.n	8005310 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ee:	4b67      	ldr	r3, [pc, #412]	@ (800548c <HAL_RCC_ClockConfig+0x1c4>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f023 020f 	bic.w	r2, r3, #15
 80052f6:	4965      	ldr	r1, [pc, #404]	@ (800548c <HAL_RCC_ClockConfig+0x1c4>)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052fe:	4b63      	ldr	r3, [pc, #396]	@ (800548c <HAL_RCC_ClockConfig+0x1c4>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d001      	beq.n	8005310 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e0b8      	b.n	8005482 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d020      	beq.n	800535e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d005      	beq.n	8005334 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005328:	4b59      	ldr	r3, [pc, #356]	@ (8005490 <HAL_RCC_ClockConfig+0x1c8>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	4a58      	ldr	r2, [pc, #352]	@ (8005490 <HAL_RCC_ClockConfig+0x1c8>)
 800532e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005332:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0308 	and.w	r3, r3, #8
 800533c:	2b00      	cmp	r3, #0
 800533e:	d005      	beq.n	800534c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005340:	4b53      	ldr	r3, [pc, #332]	@ (8005490 <HAL_RCC_ClockConfig+0x1c8>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	4a52      	ldr	r2, [pc, #328]	@ (8005490 <HAL_RCC_ClockConfig+0x1c8>)
 8005346:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800534a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800534c:	4b50      	ldr	r3, [pc, #320]	@ (8005490 <HAL_RCC_ClockConfig+0x1c8>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	494d      	ldr	r1, [pc, #308]	@ (8005490 <HAL_RCC_ClockConfig+0x1c8>)
 800535a:	4313      	orrs	r3, r2
 800535c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d040      	beq.n	80053ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d107      	bne.n	8005382 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005372:	4b47      	ldr	r3, [pc, #284]	@ (8005490 <HAL_RCC_ClockConfig+0x1c8>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d115      	bne.n	80053aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e07f      	b.n	8005482 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2b02      	cmp	r3, #2
 8005388:	d107      	bne.n	800539a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800538a:	4b41      	ldr	r3, [pc, #260]	@ (8005490 <HAL_RCC_ClockConfig+0x1c8>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d109      	bne.n	80053aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e073      	b.n	8005482 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800539a:	4b3d      	ldr	r3, [pc, #244]	@ (8005490 <HAL_RCC_ClockConfig+0x1c8>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e06b      	b.n	8005482 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053aa:	4b39      	ldr	r3, [pc, #228]	@ (8005490 <HAL_RCC_ClockConfig+0x1c8>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f023 0203 	bic.w	r2, r3, #3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	4936      	ldr	r1, [pc, #216]	@ (8005490 <HAL_RCC_ClockConfig+0x1c8>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053bc:	f7fd ff08 	bl	80031d0 <HAL_GetTick>
 80053c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053c2:	e00a      	b.n	80053da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053c4:	f7fd ff04 	bl	80031d0 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e053      	b.n	8005482 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053da:	4b2d      	ldr	r3, [pc, #180]	@ (8005490 <HAL_RCC_ClockConfig+0x1c8>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 020c 	and.w	r2, r3, #12
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d1eb      	bne.n	80053c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053ec:	4b27      	ldr	r3, [pc, #156]	@ (800548c <HAL_RCC_ClockConfig+0x1c4>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 030f 	and.w	r3, r3, #15
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d210      	bcs.n	800541c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053fa:	4b24      	ldr	r3, [pc, #144]	@ (800548c <HAL_RCC_ClockConfig+0x1c4>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f023 020f 	bic.w	r2, r3, #15
 8005402:	4922      	ldr	r1, [pc, #136]	@ (800548c <HAL_RCC_ClockConfig+0x1c4>)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	4313      	orrs	r3, r2
 8005408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800540a:	4b20      	ldr	r3, [pc, #128]	@ (800548c <HAL_RCC_ClockConfig+0x1c4>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 030f 	and.w	r3, r3, #15
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	429a      	cmp	r2, r3
 8005416:	d001      	beq.n	800541c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e032      	b.n	8005482 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b00      	cmp	r3, #0
 8005426:	d008      	beq.n	800543a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005428:	4b19      	ldr	r3, [pc, #100]	@ (8005490 <HAL_RCC_ClockConfig+0x1c8>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	4916      	ldr	r1, [pc, #88]	@ (8005490 <HAL_RCC_ClockConfig+0x1c8>)
 8005436:	4313      	orrs	r3, r2
 8005438:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0308 	and.w	r3, r3, #8
 8005442:	2b00      	cmp	r3, #0
 8005444:	d009      	beq.n	800545a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005446:	4b12      	ldr	r3, [pc, #72]	@ (8005490 <HAL_RCC_ClockConfig+0x1c8>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	490e      	ldr	r1, [pc, #56]	@ (8005490 <HAL_RCC_ClockConfig+0x1c8>)
 8005456:	4313      	orrs	r3, r2
 8005458:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800545a:	f000 f821 	bl	80054a0 <HAL_RCC_GetSysClockFreq>
 800545e:	4602      	mov	r2, r0
 8005460:	4b0b      	ldr	r3, [pc, #44]	@ (8005490 <HAL_RCC_ClockConfig+0x1c8>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	091b      	lsrs	r3, r3, #4
 8005466:	f003 030f 	and.w	r3, r3, #15
 800546a:	490a      	ldr	r1, [pc, #40]	@ (8005494 <HAL_RCC_ClockConfig+0x1cc>)
 800546c:	5ccb      	ldrb	r3, [r1, r3]
 800546e:	fa22 f303 	lsr.w	r3, r2, r3
 8005472:	4a09      	ldr	r2, [pc, #36]	@ (8005498 <HAL_RCC_ClockConfig+0x1d0>)
 8005474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005476:	4b09      	ldr	r3, [pc, #36]	@ (800549c <HAL_RCC_ClockConfig+0x1d4>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	f7fd fe64 	bl	8003148 <HAL_InitTick>

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	40023c00 	.word	0x40023c00
 8005490:	40023800 	.word	0x40023800
 8005494:	08012aa4 	.word	0x08012aa4
 8005498:	20000000 	.word	0x20000000
 800549c:	20000004 	.word	0x20000004

080054a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054a4:	b094      	sub	sp, #80	@ 0x50
 80054a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80054a8:	2300      	movs	r3, #0
 80054aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ac:	2300      	movs	r3, #0
 80054ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054b0:	2300      	movs	r3, #0
 80054b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80054b4:	2300      	movs	r3, #0
 80054b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054b8:	4b79      	ldr	r3, [pc, #484]	@ (80056a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f003 030c 	and.w	r3, r3, #12
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d00d      	beq.n	80054e0 <HAL_RCC_GetSysClockFreq+0x40>
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	f200 80e1 	bhi.w	800568c <HAL_RCC_GetSysClockFreq+0x1ec>
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <HAL_RCC_GetSysClockFreq+0x34>
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d003      	beq.n	80054da <HAL_RCC_GetSysClockFreq+0x3a>
 80054d2:	e0db      	b.n	800568c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054d4:	4b73      	ldr	r3, [pc, #460]	@ (80056a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80054d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054d8:	e0db      	b.n	8005692 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054da:	4b73      	ldr	r3, [pc, #460]	@ (80056a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80054dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054de:	e0d8      	b.n	8005692 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054e0:	4b6f      	ldr	r3, [pc, #444]	@ (80056a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80054ea:	4b6d      	ldr	r3, [pc, #436]	@ (80056a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d063      	beq.n	80055be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054f6:	4b6a      	ldr	r3, [pc, #424]	@ (80056a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	099b      	lsrs	r3, r3, #6
 80054fc:	2200      	movs	r2, #0
 80054fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005500:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005508:	633b      	str	r3, [r7, #48]	@ 0x30
 800550a:	2300      	movs	r3, #0
 800550c:	637b      	str	r3, [r7, #52]	@ 0x34
 800550e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005512:	4622      	mov	r2, r4
 8005514:	462b      	mov	r3, r5
 8005516:	f04f 0000 	mov.w	r0, #0
 800551a:	f04f 0100 	mov.w	r1, #0
 800551e:	0159      	lsls	r1, r3, #5
 8005520:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005524:	0150      	lsls	r0, r2, #5
 8005526:	4602      	mov	r2, r0
 8005528:	460b      	mov	r3, r1
 800552a:	4621      	mov	r1, r4
 800552c:	1a51      	subs	r1, r2, r1
 800552e:	6139      	str	r1, [r7, #16]
 8005530:	4629      	mov	r1, r5
 8005532:	eb63 0301 	sbc.w	r3, r3, r1
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	f04f 0200 	mov.w	r2, #0
 800553c:	f04f 0300 	mov.w	r3, #0
 8005540:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005544:	4659      	mov	r1, fp
 8005546:	018b      	lsls	r3, r1, #6
 8005548:	4651      	mov	r1, sl
 800554a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800554e:	4651      	mov	r1, sl
 8005550:	018a      	lsls	r2, r1, #6
 8005552:	4651      	mov	r1, sl
 8005554:	ebb2 0801 	subs.w	r8, r2, r1
 8005558:	4659      	mov	r1, fp
 800555a:	eb63 0901 	sbc.w	r9, r3, r1
 800555e:	f04f 0200 	mov.w	r2, #0
 8005562:	f04f 0300 	mov.w	r3, #0
 8005566:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800556a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800556e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005572:	4690      	mov	r8, r2
 8005574:	4699      	mov	r9, r3
 8005576:	4623      	mov	r3, r4
 8005578:	eb18 0303 	adds.w	r3, r8, r3
 800557c:	60bb      	str	r3, [r7, #8]
 800557e:	462b      	mov	r3, r5
 8005580:	eb49 0303 	adc.w	r3, r9, r3
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	f04f 0200 	mov.w	r2, #0
 800558a:	f04f 0300 	mov.w	r3, #0
 800558e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005592:	4629      	mov	r1, r5
 8005594:	024b      	lsls	r3, r1, #9
 8005596:	4621      	mov	r1, r4
 8005598:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800559c:	4621      	mov	r1, r4
 800559e:	024a      	lsls	r2, r1, #9
 80055a0:	4610      	mov	r0, r2
 80055a2:	4619      	mov	r1, r3
 80055a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055a6:	2200      	movs	r2, #0
 80055a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80055b0:	f7fb f85a 	bl	8000668 <__aeabi_uldivmod>
 80055b4:	4602      	mov	r2, r0
 80055b6:	460b      	mov	r3, r1
 80055b8:	4613      	mov	r3, r2
 80055ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055bc:	e058      	b.n	8005670 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055be:	4b38      	ldr	r3, [pc, #224]	@ (80056a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	099b      	lsrs	r3, r3, #6
 80055c4:	2200      	movs	r2, #0
 80055c6:	4618      	mov	r0, r3
 80055c8:	4611      	mov	r1, r2
 80055ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055ce:	623b      	str	r3, [r7, #32]
 80055d0:	2300      	movs	r3, #0
 80055d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80055d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055d8:	4642      	mov	r2, r8
 80055da:	464b      	mov	r3, r9
 80055dc:	f04f 0000 	mov.w	r0, #0
 80055e0:	f04f 0100 	mov.w	r1, #0
 80055e4:	0159      	lsls	r1, r3, #5
 80055e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055ea:	0150      	lsls	r0, r2, #5
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4641      	mov	r1, r8
 80055f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80055f6:	4649      	mov	r1, r9
 80055f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80055fc:	f04f 0200 	mov.w	r2, #0
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005608:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800560c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005610:	ebb2 040a 	subs.w	r4, r2, sl
 8005614:	eb63 050b 	sbc.w	r5, r3, fp
 8005618:	f04f 0200 	mov.w	r2, #0
 800561c:	f04f 0300 	mov.w	r3, #0
 8005620:	00eb      	lsls	r3, r5, #3
 8005622:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005626:	00e2      	lsls	r2, r4, #3
 8005628:	4614      	mov	r4, r2
 800562a:	461d      	mov	r5, r3
 800562c:	4643      	mov	r3, r8
 800562e:	18e3      	adds	r3, r4, r3
 8005630:	603b      	str	r3, [r7, #0]
 8005632:	464b      	mov	r3, r9
 8005634:	eb45 0303 	adc.w	r3, r5, r3
 8005638:	607b      	str	r3, [r7, #4]
 800563a:	f04f 0200 	mov.w	r2, #0
 800563e:	f04f 0300 	mov.w	r3, #0
 8005642:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005646:	4629      	mov	r1, r5
 8005648:	028b      	lsls	r3, r1, #10
 800564a:	4621      	mov	r1, r4
 800564c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005650:	4621      	mov	r1, r4
 8005652:	028a      	lsls	r2, r1, #10
 8005654:	4610      	mov	r0, r2
 8005656:	4619      	mov	r1, r3
 8005658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800565a:	2200      	movs	r2, #0
 800565c:	61bb      	str	r3, [r7, #24]
 800565e:	61fa      	str	r2, [r7, #28]
 8005660:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005664:	f7fb f800 	bl	8000668 <__aeabi_uldivmod>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4613      	mov	r3, r2
 800566e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005670:	4b0b      	ldr	r3, [pc, #44]	@ (80056a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	0c1b      	lsrs	r3, r3, #16
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	3301      	adds	r3, #1
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005680:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005684:	fbb2 f3f3 	udiv	r3, r2, r3
 8005688:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800568a:	e002      	b.n	8005692 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800568c:	4b05      	ldr	r3, [pc, #20]	@ (80056a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800568e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005692:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005694:	4618      	mov	r0, r3
 8005696:	3750      	adds	r7, #80	@ 0x50
 8005698:	46bd      	mov	sp, r7
 800569a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800569e:	bf00      	nop
 80056a0:	40023800 	.word	0x40023800
 80056a4:	00f42400 	.word	0x00f42400
 80056a8:	007a1200 	.word	0x007a1200

080056ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056b0:	4b03      	ldr	r3, [pc, #12]	@ (80056c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80056b2:	681b      	ldr	r3, [r3, #0]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	20000000 	.word	0x20000000

080056c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056c8:	f7ff fff0 	bl	80056ac <HAL_RCC_GetHCLKFreq>
 80056cc:	4602      	mov	r2, r0
 80056ce:	4b05      	ldr	r3, [pc, #20]	@ (80056e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	0a9b      	lsrs	r3, r3, #10
 80056d4:	f003 0307 	and.w	r3, r3, #7
 80056d8:	4903      	ldr	r1, [pc, #12]	@ (80056e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056da:	5ccb      	ldrb	r3, [r1, r3]
 80056dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	40023800 	.word	0x40023800
 80056e8:	08012ab4 	.word	0x08012ab4

080056ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80056f0:	f7ff ffdc 	bl	80056ac <HAL_RCC_GetHCLKFreq>
 80056f4:	4602      	mov	r2, r0
 80056f6:	4b05      	ldr	r3, [pc, #20]	@ (800570c <HAL_RCC_GetPCLK2Freq+0x20>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	0b5b      	lsrs	r3, r3, #13
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	4903      	ldr	r1, [pc, #12]	@ (8005710 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005702:	5ccb      	ldrb	r3, [r1, r3]
 8005704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005708:	4618      	mov	r0, r3
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40023800 	.word	0x40023800
 8005710:	08012ab4 	.word	0x08012ab4

08005714 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b088      	sub	sp, #32
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800571c:	2300      	movs	r3, #0
 800571e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005720:	2300      	movs	r3, #0
 8005722:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005724:	2300      	movs	r3, #0
 8005726:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005728:	2300      	movs	r3, #0
 800572a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800572c:	2300      	movs	r3, #0
 800572e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	2b00      	cmp	r3, #0
 800573a:	d012      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800573c:	4b69      	ldr	r3, [pc, #420]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	4a68      	ldr	r2, [pc, #416]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005742:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005746:	6093      	str	r3, [r2, #8]
 8005748:	4b66      	ldr	r3, [pc, #408]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005750:	4964      	ldr	r1, [pc, #400]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005752:	4313      	orrs	r3, r2
 8005754:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800575e:	2301      	movs	r3, #1
 8005760:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d017      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800576e:	4b5d      	ldr	r3, [pc, #372]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005770:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005774:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800577c:	4959      	ldr	r1, [pc, #356]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800577e:	4313      	orrs	r3, r2
 8005780:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005788:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800578c:	d101      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800578e:	2301      	movs	r3, #1
 8005790:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800579a:	2301      	movs	r3, #1
 800579c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d017      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80057aa:	4b4e      	ldr	r3, [pc, #312]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057b0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b8:	494a      	ldr	r1, [pc, #296]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057c8:	d101      	bne.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80057ca:	2301      	movs	r3, #1
 80057cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80057d6:	2301      	movs	r3, #1
 80057d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80057e6:	2301      	movs	r3, #1
 80057e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0320 	and.w	r3, r3, #32
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 808b 	beq.w	800590e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80057f8:	4b3a      	ldr	r3, [pc, #232]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057fc:	4a39      	ldr	r2, [pc, #228]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005802:	6413      	str	r3, [r2, #64]	@ 0x40
 8005804:	4b37      	ldr	r3, [pc, #220]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800580c:	60bb      	str	r3, [r7, #8]
 800580e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005810:	4b35      	ldr	r3, [pc, #212]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a34      	ldr	r2, [pc, #208]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800581a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800581c:	f7fd fcd8 	bl	80031d0 <HAL_GetTick>
 8005820:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005822:	e008      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005824:	f7fd fcd4 	bl	80031d0 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b64      	cmp	r3, #100	@ 0x64
 8005830:	d901      	bls.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e38f      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005836:	4b2c      	ldr	r3, [pc, #176]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0f0      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005842:	4b28      	ldr	r3, [pc, #160]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005846:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800584a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d035      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005856:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	429a      	cmp	r2, r3
 800585e:	d02e      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005860:	4b20      	ldr	r3, [pc, #128]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005864:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005868:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800586a:	4b1e      	ldr	r3, [pc, #120]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800586c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800586e:	4a1d      	ldr	r2, [pc, #116]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005870:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005874:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005876:	4b1b      	ldr	r3, [pc, #108]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800587a:	4a1a      	ldr	r2, [pc, #104]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800587c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005880:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005882:	4a18      	ldr	r2, [pc, #96]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005888:	4b16      	ldr	r3, [pc, #88]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800588a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b01      	cmp	r3, #1
 8005892:	d114      	bne.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005894:	f7fd fc9c 	bl	80031d0 <HAL_GetTick>
 8005898:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800589a:	e00a      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800589c:	f7fd fc98 	bl	80031d0 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e351      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058b2:	4b0c      	ldr	r3, [pc, #48]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0ee      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058ca:	d111      	bne.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80058cc:	4b05      	ldr	r3, [pc, #20]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80058d8:	4b04      	ldr	r3, [pc, #16]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80058da:	400b      	ands	r3, r1
 80058dc:	4901      	ldr	r1, [pc, #4]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	608b      	str	r3, [r1, #8]
 80058e2:	e00b      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80058e4:	40023800 	.word	0x40023800
 80058e8:	40007000 	.word	0x40007000
 80058ec:	0ffffcff 	.word	0x0ffffcff
 80058f0:	4bac      	ldr	r3, [pc, #688]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	4aab      	ldr	r2, [pc, #684]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058f6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80058fa:	6093      	str	r3, [r2, #8]
 80058fc:	4ba9      	ldr	r3, [pc, #676]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005908:	49a6      	ldr	r1, [pc, #664]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800590a:	4313      	orrs	r3, r2
 800590c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0310 	and.w	r3, r3, #16
 8005916:	2b00      	cmp	r3, #0
 8005918:	d010      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800591a:	4ba2      	ldr	r3, [pc, #648]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800591c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005920:	4aa0      	ldr	r2, [pc, #640]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005922:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005926:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800592a:	4b9e      	ldr	r3, [pc, #632]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800592c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005934:	499b      	ldr	r1, [pc, #620]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005948:	4b96      	ldr	r3, [pc, #600]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800594a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800594e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005956:	4993      	ldr	r1, [pc, #588]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005958:	4313      	orrs	r3, r2
 800595a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00a      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800596a:	4b8e      	ldr	r3, [pc, #568]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800596c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005970:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005978:	498a      	ldr	r1, [pc, #552]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800597a:	4313      	orrs	r3, r2
 800597c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00a      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800598c:	4b85      	ldr	r3, [pc, #532]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800598e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005992:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800599a:	4982      	ldr	r1, [pc, #520]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800599c:	4313      	orrs	r3, r2
 800599e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00a      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059ae:	4b7d      	ldr	r3, [pc, #500]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059b4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059bc:	4979      	ldr	r1, [pc, #484]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00a      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059d0:	4b74      	ldr	r3, [pc, #464]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059d6:	f023 0203 	bic.w	r2, r3, #3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059de:	4971      	ldr	r1, [pc, #452]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00a      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059f2:	4b6c      	ldr	r3, [pc, #432]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059f8:	f023 020c 	bic.w	r2, r3, #12
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a00:	4968      	ldr	r1, [pc, #416]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00a      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a14:	4b63      	ldr	r3, [pc, #396]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a1a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a22:	4960      	ldr	r1, [pc, #384]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00a      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a36:	4b5b      	ldr	r3, [pc, #364]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a3c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a44:	4957      	ldr	r1, [pc, #348]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00a      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a58:	4b52      	ldr	r3, [pc, #328]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a5e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a66:	494f      	ldr	r1, [pc, #316]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005a7a:	4b4a      	ldr	r3, [pc, #296]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a80:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a88:	4946      	ldr	r1, [pc, #280]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00a      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005a9c:	4b41      	ldr	r3, [pc, #260]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aa2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aaa:	493e      	ldr	r1, [pc, #248]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005abe:	4b39      	ldr	r3, [pc, #228]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ac4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005acc:	4935      	ldr	r1, [pc, #212]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00a      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ae0:	4b30      	ldr	r3, [pc, #192]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ae6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005aee:	492d      	ldr	r1, [pc, #180]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d011      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005b02:	4b28      	ldr	r3, [pc, #160]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b08:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b10:	4924      	ldr	r1, [pc, #144]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b20:	d101      	bne.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005b22:	2301      	movs	r3, #1
 8005b24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0308 	and.w	r3, r3, #8
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005b32:	2301      	movs	r3, #1
 8005b34:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00a      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b42:	4b18      	ldr	r3, [pc, #96]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b48:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b50:	4914      	ldr	r1, [pc, #80]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00b      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b64:	4b0f      	ldr	r3, [pc, #60]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b6a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b74:	490b      	ldr	r1, [pc, #44]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00f      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005b88:	4b06      	ldr	r3, [pc, #24]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b8e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b98:	4902      	ldr	r1, [pc, #8]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005ba0:	e002      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005ba2:	bf00      	nop
 8005ba4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00b      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bb4:	4b8a      	ldr	r3, [pc, #552]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc4:	4986      	ldr	r1, [pc, #536]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00b      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005bd8:	4b81      	ldr	r3, [pc, #516]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bde:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005be8:	497d      	ldr	r1, [pc, #500]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d006      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 80d6 	beq.w	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c04:	4b76      	ldr	r3, [pc, #472]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a75      	ldr	r2, [pc, #468]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c10:	f7fd fade 	bl	80031d0 <HAL_GetTick>
 8005c14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c16:	e008      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c18:	f7fd fada 	bl	80031d0 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b64      	cmp	r3, #100	@ 0x64
 8005c24:	d901      	bls.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e195      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c2a:	4b6d      	ldr	r3, [pc, #436]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1f0      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d021      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d11d      	bne.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005c4a:	4b65      	ldr	r3, [pc, #404]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c50:	0c1b      	lsrs	r3, r3, #16
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005c58:	4b61      	ldr	r3, [pc, #388]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c5e:	0e1b      	lsrs	r3, r3, #24
 8005c60:	f003 030f 	and.w	r3, r3, #15
 8005c64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	019a      	lsls	r2, r3, #6
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	041b      	lsls	r3, r3, #16
 8005c70:	431a      	orrs	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	061b      	lsls	r3, r3, #24
 8005c76:	431a      	orrs	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	071b      	lsls	r3, r3, #28
 8005c7e:	4958      	ldr	r1, [pc, #352]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d004      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c9a:	d00a      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d02e      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cb0:	d129      	bne.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005cb2:	4b4b      	ldr	r3, [pc, #300]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cb8:	0c1b      	lsrs	r3, r3, #16
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005cc0:	4b47      	ldr	r3, [pc, #284]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cc6:	0f1b      	lsrs	r3, r3, #28
 8005cc8:	f003 0307 	and.w	r3, r3, #7
 8005ccc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	019a      	lsls	r2, r3, #6
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	041b      	lsls	r3, r3, #16
 8005cd8:	431a      	orrs	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	061b      	lsls	r3, r3, #24
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	071b      	lsls	r3, r3, #28
 8005ce6:	493e      	ldr	r1, [pc, #248]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005cee:	4b3c      	ldr	r3, [pc, #240]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cf4:	f023 021f 	bic.w	r2, r3, #31
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	4938      	ldr	r1, [pc, #224]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d01d      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d12:	4b33      	ldr	r3, [pc, #204]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d18:	0e1b      	lsrs	r3, r3, #24
 8005d1a:	f003 030f 	and.w	r3, r3, #15
 8005d1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d20:	4b2f      	ldr	r3, [pc, #188]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d26:	0f1b      	lsrs	r3, r3, #28
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	019a      	lsls	r2, r3, #6
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	041b      	lsls	r3, r3, #16
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	061b      	lsls	r3, r3, #24
 8005d40:	431a      	orrs	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	071b      	lsls	r3, r3, #28
 8005d46:	4926      	ldr	r1, [pc, #152]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d011      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	019a      	lsls	r2, r3, #6
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	041b      	lsls	r3, r3, #16
 8005d66:	431a      	orrs	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	061b      	lsls	r3, r3, #24
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	071b      	lsls	r3, r3, #28
 8005d76:	491a      	ldr	r1, [pc, #104]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d7e:	4b18      	ldr	r3, [pc, #96]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a17      	ldr	r2, [pc, #92]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005d88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d8a:	f7fd fa21 	bl	80031d0 <HAL_GetTick>
 8005d8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d90:	e008      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d92:	f7fd fa1d 	bl	80031d0 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	2b64      	cmp	r3, #100	@ 0x64
 8005d9e:	d901      	bls.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e0d8      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005da4:	4b0e      	ldr	r3, [pc, #56]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d0f0      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	f040 80ce 	bne.w	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005db8:	4b09      	ldr	r3, [pc, #36]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a08      	ldr	r2, [pc, #32]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dc4:	f7fd fa04 	bl	80031d0 <HAL_GetTick>
 8005dc8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005dca:	e00b      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005dcc:	f7fd fa00 	bl	80031d0 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b64      	cmp	r3, #100	@ 0x64
 8005dd8:	d904      	bls.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e0bb      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005dde:	bf00      	nop
 8005de0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005de4:	4b5e      	ldr	r3, [pc, #376]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005dec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005df0:	d0ec      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d009      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d02e      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d12a      	bne.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005e1a:	4b51      	ldr	r3, [pc, #324]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e20:	0c1b      	lsrs	r3, r3, #16
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e28:	4b4d      	ldr	r3, [pc, #308]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e2e:	0f1b      	lsrs	r3, r3, #28
 8005e30:	f003 0307 	and.w	r3, r3, #7
 8005e34:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	019a      	lsls	r2, r3, #6
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	041b      	lsls	r3, r3, #16
 8005e40:	431a      	orrs	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	061b      	lsls	r3, r3, #24
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	071b      	lsls	r3, r3, #28
 8005e4e:	4944      	ldr	r1, [pc, #272]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005e56:	4b42      	ldr	r3, [pc, #264]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e5c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e64:	3b01      	subs	r3, #1
 8005e66:	021b      	lsls	r3, r3, #8
 8005e68:	493d      	ldr	r1, [pc, #244]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d022      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e84:	d11d      	bne.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e86:	4b36      	ldr	r3, [pc, #216]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e8c:	0e1b      	lsrs	r3, r3, #24
 8005e8e:	f003 030f 	and.w	r3, r3, #15
 8005e92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e94:	4b32      	ldr	r3, [pc, #200]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e9a:	0f1b      	lsrs	r3, r3, #28
 8005e9c:	f003 0307 	and.w	r3, r3, #7
 8005ea0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	019a      	lsls	r2, r3, #6
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	041b      	lsls	r3, r3, #16
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	061b      	lsls	r3, r3, #24
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	071b      	lsls	r3, r3, #28
 8005eba:	4929      	ldr	r1, [pc, #164]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0308 	and.w	r3, r3, #8
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d028      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ece:	4b24      	ldr	r3, [pc, #144]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed4:	0e1b      	lsrs	r3, r3, #24
 8005ed6:	f003 030f 	and.w	r3, r3, #15
 8005eda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005edc:	4b20      	ldr	r3, [pc, #128]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ee2:	0c1b      	lsrs	r3, r3, #16
 8005ee4:	f003 0303 	and.w	r3, r3, #3
 8005ee8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	019a      	lsls	r2, r3, #6
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	041b      	lsls	r3, r3, #16
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	061b      	lsls	r3, r3, #24
 8005efa:	431a      	orrs	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	071b      	lsls	r3, r3, #28
 8005f02:	4917      	ldr	r1, [pc, #92]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005f0a:	4b15      	ldr	r3, [pc, #84]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f10:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f18:	4911      	ldr	r1, [pc, #68]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005f20:	4b0f      	ldr	r3, [pc, #60]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a0e      	ldr	r2, [pc, #56]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f2c:	f7fd f950 	bl	80031d0 <HAL_GetTick>
 8005f30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f32:	e008      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f34:	f7fd f94c 	bl	80031d0 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2b64      	cmp	r3, #100	@ 0x64
 8005f40:	d901      	bls.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e007      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f46:	4b06      	ldr	r3, [pc, #24]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f52:	d1ef      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3720      	adds	r7, #32
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	40023800 	.word	0x40023800

08005f64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e09d      	b.n	80060b2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d108      	bne.n	8005f90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f86:	d009      	beq.n	8005f9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	61da      	str	r2, [r3, #28]
 8005f8e:	e005      	b.n	8005f9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d106      	bne.n	8005fbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7fc fd88 	bl	8002acc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fd2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005fdc:	d902      	bls.n	8005fe4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	e002      	b.n	8005fea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005fe4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005fe8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005ff2:	d007      	beq.n	8006004 <HAL_SPI_Init+0xa0>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ffc:	d002      	beq.n	8006004 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006014:	431a      	orrs	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	431a      	orrs	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006032:	431a      	orrs	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	69db      	ldr	r3, [r3, #28]
 8006038:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800603c:	431a      	orrs	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006046:	ea42 0103 	orr.w	r1, r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800604e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	0c1b      	lsrs	r3, r3, #16
 8006060:	f003 0204 	and.w	r2, r3, #4
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006068:	f003 0310 	and.w	r3, r3, #16
 800606c:	431a      	orrs	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006072:	f003 0308 	and.w	r3, r3, #8
 8006076:	431a      	orrs	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006080:	ea42 0103 	orr.w	r1, r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69da      	ldr	r2, [r3, #28]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b082      	sub	sp, #8
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e040      	b.n	800614e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d106      	bne.n	80060e2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7fc fd39 	bl	8002b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2224      	movs	r2, #36	@ 0x24
 80060e6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0201 	bic.w	r2, r2, #1
 80060f6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fe7b 	bl	8006dfc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fc14 	bl	8006934 <UART_SetConfig>
 800610c:	4603      	mov	r3, r0
 800610e:	2b01      	cmp	r3, #1
 8006110:	d101      	bne.n	8006116 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e01b      	b.n	800614e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006124:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006134:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f042 0201 	orr.w	r2, r2, #1
 8006144:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fefa 	bl	8006f40 <UART_CheckIdleState>
 800614c:	4603      	mov	r3, r0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b08a      	sub	sp, #40	@ 0x28
 800615a:	af02      	add	r7, sp, #8
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	603b      	str	r3, [r7, #0]
 8006162:	4613      	mov	r3, r2
 8006164:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800616a:	2b20      	cmp	r3, #32
 800616c:	d177      	bne.n	800625e <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <HAL_UART_Transmit+0x24>
 8006174:	88fb      	ldrh	r3, [r7, #6]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e070      	b.n	8006260 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2221      	movs	r2, #33	@ 0x21
 800618a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800618c:	f7fd f820 	bl	80031d0 <HAL_GetTick>
 8006190:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	88fa      	ldrh	r2, [r7, #6]
 8006196:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	88fa      	ldrh	r2, [r7, #6]
 800619e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061aa:	d108      	bne.n	80061be <HAL_UART_Transmit+0x68>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d104      	bne.n	80061be <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80061b4:	2300      	movs	r3, #0
 80061b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	61bb      	str	r3, [r7, #24]
 80061bc:	e003      	b.n	80061c6 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061c6:	e02f      	b.n	8006228 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	2200      	movs	r2, #0
 80061d0:	2180      	movs	r1, #128	@ 0x80
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 ff5c 	bl	8007090 <UART_WaitOnFlagUntilTimeout>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d004      	beq.n	80061e8 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2220      	movs	r2, #32
 80061e2:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e03b      	b.n	8006260 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10b      	bne.n	8006206 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	461a      	mov	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061fc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	3302      	adds	r3, #2
 8006202:	61bb      	str	r3, [r7, #24]
 8006204:	e007      	b.n	8006216 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	781a      	ldrb	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	3301      	adds	r3, #1
 8006214:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800621c:	b29b      	uxth	r3, r3
 800621e:	3b01      	subs	r3, #1
 8006220:	b29a      	uxth	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800622e:	b29b      	uxth	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1c9      	bne.n	80061c8 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	2200      	movs	r2, #0
 800623c:	2140      	movs	r1, #64	@ 0x40
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 ff26 	bl	8007090 <UART_WaitOnFlagUntilTimeout>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d004      	beq.n	8006254 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2220      	movs	r2, #32
 800624e:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e005      	b.n	8006260 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2220      	movs	r2, #32
 8006258:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	e000      	b.n	8006260 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800625e:	2302      	movs	r3, #2
  }
}
 8006260:	4618      	mov	r0, r3
 8006262:	3720      	adds	r7, #32
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b08a      	sub	sp, #40	@ 0x28
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	4613      	mov	r3, r2
 8006274:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800627c:	2b20      	cmp	r3, #32
 800627e:	d132      	bne.n	80062e6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <HAL_UART_Receive_IT+0x24>
 8006286:	88fb      	ldrh	r3, [r7, #6]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e02b      	b.n	80062e8 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d018      	beq.n	80062d6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	e853 3f00 	ldrex	r3, [r3]
 80062b0:	613b      	str	r3, [r7, #16]
   return(result);
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80062b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	461a      	mov	r2, r3
 80062c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c2:	623b      	str	r3, [r7, #32]
 80062c4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c6:	69f9      	ldr	r1, [r7, #28]
 80062c8:	6a3a      	ldr	r2, [r7, #32]
 80062ca:	e841 2300 	strex	r3, r2, [r1]
 80062ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1e6      	bne.n	80062a4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80062d6:	88fb      	ldrh	r3, [r7, #6]
 80062d8:	461a      	mov	r2, r3
 80062da:	68b9      	ldr	r1, [r7, #8]
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 ff45 	bl	800716c <UART_Start_Receive_IT>
 80062e2:	4603      	mov	r3, r0
 80062e4:	e000      	b.n	80062e8 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80062e6:	2302      	movs	r3, #2
  }
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3728      	adds	r7, #40	@ 0x28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b0ba      	sub	sp, #232	@ 0xe8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006316:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800631a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800631e:	4013      	ands	r3, r2
 8006320:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006324:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006328:	2b00      	cmp	r3, #0
 800632a:	d115      	bne.n	8006358 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800632c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006330:	f003 0320 	and.w	r3, r3, #32
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00f      	beq.n	8006358 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800633c:	f003 0320 	and.w	r3, r3, #32
 8006340:	2b00      	cmp	r3, #0
 8006342:	d009      	beq.n	8006358 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 82c6 	beq.w	80068da <HAL_UART_IRQHandler+0x5ea>
      {
        huart->RxISR(huart);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	4798      	blx	r3
      }
      return;
 8006356:	e2c0      	b.n	80068da <HAL_UART_IRQHandler+0x5ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006358:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 8117 	beq.w	8006590 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d106      	bne.n	800637c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800636e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006372:	4b85      	ldr	r3, [pc, #532]	@ (8006588 <HAL_UART_IRQHandler+0x298>)
 8006374:	4013      	ands	r3, r2
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 810a 	beq.w	8006590 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800637c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b00      	cmp	r3, #0
 8006386:	d011      	beq.n	80063ac <HAL_UART_IRQHandler+0xbc>
 8006388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800638c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00b      	beq.n	80063ac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2201      	movs	r2, #1
 800639a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063a2:	f043 0201 	orr.w	r2, r3, #1
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d011      	beq.n	80063dc <HAL_UART_IRQHandler+0xec>
 80063b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00b      	beq.n	80063dc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2202      	movs	r2, #2
 80063ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063d2:	f043 0204 	orr.w	r2, r3, #4
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063e0:	f003 0304 	and.w	r3, r3, #4
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d011      	beq.n	800640c <HAL_UART_IRQHandler+0x11c>
 80063e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00b      	beq.n	800640c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2204      	movs	r2, #4
 80063fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006402:	f043 0202 	orr.w	r2, r3, #2
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800640c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006410:	f003 0308 	and.w	r3, r3, #8
 8006414:	2b00      	cmp	r3, #0
 8006416:	d017      	beq.n	8006448 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800641c:	f003 0320 	and.w	r3, r3, #32
 8006420:	2b00      	cmp	r3, #0
 8006422:	d105      	bne.n	8006430 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006428:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00b      	beq.n	8006448 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2208      	movs	r2, #8
 8006436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800643e:	f043 0208 	orr.w	r2, r3, #8
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800644c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006450:	2b00      	cmp	r3, #0
 8006452:	d012      	beq.n	800647a <HAL_UART_IRQHandler+0x18a>
 8006454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006458:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00c      	beq.n	800647a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006468:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006470:	f043 0220 	orr.w	r2, r3, #32
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 822c 	beq.w	80068de <HAL_UART_IRQHandler+0x5ee>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800648a:	f003 0320 	and.w	r3, r3, #32
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00d      	beq.n	80064ae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006496:	f003 0320 	and.w	r3, r3, #32
 800649a:	2b00      	cmp	r3, #0
 800649c:	d007      	beq.n	80064ae <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064c2:	2b40      	cmp	r3, #64	@ 0x40
 80064c4:	d005      	beq.n	80064d2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80064c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d04f      	beq.n	8006572 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 ff10 	bl	80072f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064e2:	2b40      	cmp	r3, #64	@ 0x40
 80064e4:	d141      	bne.n	800656a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3308      	adds	r3, #8
 80064ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80064f4:	e853 3f00 	ldrex	r3, [r3]
 80064f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80064fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006500:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006504:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3308      	adds	r3, #8
 800650e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006512:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006516:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800651e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006522:	e841 2300 	strex	r3, r2, [r1]
 8006526:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800652a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1d9      	bne.n	80064e6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006536:	2b00      	cmp	r3, #0
 8006538:	d013      	beq.n	8006562 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800653e:	4a13      	ldr	r2, [pc, #76]	@ (800658c <HAL_UART_IRQHandler+0x29c>)
 8006540:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006546:	4618      	mov	r0, r3
 8006548:	f7fe f88d 	bl	8004666 <HAL_DMA_Abort_IT>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d017      	beq.n	8006582 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800655c:	4610      	mov	r0, r2
 800655e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006560:	e00f      	b.n	8006582 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7fa fcb8 	bl	8000ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006568:	e00b      	b.n	8006582 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7fa fcb4 	bl	8000ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006570:	e007      	b.n	8006582 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7fa fcb0 	bl	8000ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006580:	e1ad      	b.n	80068de <HAL_UART_IRQHandler+0x5ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006582:	bf00      	nop
    return;
 8006584:	e1ab      	b.n	80068de <HAL_UART_IRQHandler+0x5ee>
 8006586:	bf00      	nop
 8006588:	04000120 	.word	0x04000120
 800658c:	080073c1 	.word	0x080073c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006594:	2b01      	cmp	r3, #1
 8006596:	f040 8166 	bne.w	8006866 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800659a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800659e:	f003 0310 	and.w	r3, r3, #16
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 815f 	beq.w	8006866 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80065a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065ac:	f003 0310 	and.w	r3, r3, #16
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 8158 	beq.w	8006866 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2210      	movs	r2, #16
 80065bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c8:	2b40      	cmp	r3, #64	@ 0x40
 80065ca:	f040 80d0 	bne.w	800676e <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f000 80ab 	beq.w	800673a <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80065ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065ee:	429a      	cmp	r2, r3
 80065f0:	f080 80a3 	bcs.w	800673a <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006608:	f000 8086 	beq.w	8006718 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006614:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006618:	e853 3f00 	ldrex	r3, [r3]
 800661c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006620:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006624:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006628:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	461a      	mov	r2, r3
 8006632:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006636:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800663a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006642:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006646:	e841 2300 	strex	r3, r2, [r1]
 800664a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800664e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1da      	bne.n	800660c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3308      	adds	r3, #8
 800665c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006660:	e853 3f00 	ldrex	r3, [r3]
 8006664:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006666:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006668:	f023 0301 	bic.w	r3, r3, #1
 800666c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3308      	adds	r3, #8
 8006676:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800667a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800667e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006680:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006682:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800668c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1e1      	bne.n	8006656 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3308      	adds	r3, #8
 8006698:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800669c:	e853 3f00 	ldrex	r3, [r3]
 80066a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80066a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	3308      	adds	r3, #8
 80066b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80066b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80066b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80066bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80066c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1e3      	bne.n	8006692 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2220      	movs	r2, #32
 80066ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066e0:	e853 3f00 	ldrex	r3, [r3]
 80066e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80066e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066e8:	f023 0310 	bic.w	r3, r3, #16
 80066ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	461a      	mov	r2, r3
 80066f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006700:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006702:	e841 2300 	strex	r3, r2, [r1]
 8006706:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006708:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1e4      	bne.n	80066d8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006712:	4618      	mov	r0, r3
 8006714:	f7fd ff37 	bl	8004586 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2202      	movs	r2, #2
 800671c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800672a:	b29b      	uxth	r3, r3
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	b29b      	uxth	r3, r3
 8006730:	4619      	mov	r1, r3
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f8e8 	bl	8006908 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006738:	e0d3      	b.n	80068e2 <HAL_UART_IRQHandler+0x5f2>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006740:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006744:	429a      	cmp	r2, r3
 8006746:	f040 80cc 	bne.w	80068e2 <HAL_UART_IRQHandler+0x5f2>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006754:	f040 80c5 	bne.w	80068e2 <HAL_UART_IRQHandler+0x5f2>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006764:	4619      	mov	r1, r3
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f8ce 	bl	8006908 <HAL_UARTEx_RxEventCallback>
      return;
 800676c:	e0b9      	b.n	80068e2 <HAL_UART_IRQHandler+0x5f2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800677a:	b29b      	uxth	r3, r3
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006788:	b29b      	uxth	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 80ab 	beq.w	80068e6 <HAL_UART_IRQHandler+0x5f6>
          && (nb_rx_data > 0U))
 8006790:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 80a6 	beq.w	80068e6 <HAL_UART_IRQHandler+0x5f6>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a2:	e853 3f00 	ldrex	r3, [r3]
 80067a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80067be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067c4:	e841 2300 	strex	r3, r2, [r1]
 80067c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e4      	bne.n	800679a <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3308      	adds	r3, #8
 80067d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067da:	e853 3f00 	ldrex	r3, [r3]
 80067de:	623b      	str	r3, [r7, #32]
   return(result);
 80067e0:	6a3b      	ldr	r3, [r7, #32]
 80067e2:	f023 0301 	bic.w	r3, r3, #1
 80067e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3308      	adds	r3, #8
 80067f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80067f4:	633a      	str	r2, [r7, #48]	@ 0x30
 80067f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067fc:	e841 2300 	strex	r3, r2, [r1]
 8006800:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1e3      	bne.n	80067d0 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2220      	movs	r2, #32
 800680c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	e853 3f00 	ldrex	r3, [r3]
 8006828:	60fb      	str	r3, [r7, #12]
   return(result);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f023 0310 	bic.w	r3, r3, #16
 8006830:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	461a      	mov	r2, r3
 800683a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800683e:	61fb      	str	r3, [r7, #28]
 8006840:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006842:	69b9      	ldr	r1, [r7, #24]
 8006844:	69fa      	ldr	r2, [r7, #28]
 8006846:	e841 2300 	strex	r3, r2, [r1]
 800684a:	617b      	str	r3, [r7, #20]
   return(result);
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1e4      	bne.n	800681c <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2202      	movs	r2, #2
 8006856:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006858:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800685c:	4619      	mov	r1, r3
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f852 	bl	8006908 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006864:	e03f      	b.n	80068e6 <HAL_UART_IRQHandler+0x5f6>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800686a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00e      	beq.n	8006890 <HAL_UART_IRQHandler+0x5a0>
 8006872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006876:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d008      	beq.n	8006890 <HAL_UART_IRQHandler+0x5a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006886:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f849 	bl	8006920 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800688e:	e02d      	b.n	80068ec <HAL_UART_IRQHandler+0x5fc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00e      	beq.n	80068ba <HAL_UART_IRQHandler+0x5ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800689c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d008      	beq.n	80068ba <HAL_UART_IRQHandler+0x5ca>
  {
    if (huart->TxISR != NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d01c      	beq.n	80068ea <HAL_UART_IRQHandler+0x5fa>
    {
      huart->TxISR(huart);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	4798      	blx	r3
    }
    return;
 80068b8:	e017      	b.n	80068ea <HAL_UART_IRQHandler+0x5fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d012      	beq.n	80068ec <HAL_UART_IRQHandler+0x5fc>
 80068c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00c      	beq.n	80068ec <HAL_UART_IRQHandler+0x5fc>
  {
    UART_EndTransmit_IT(huart);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fd86 	bl	80073e4 <UART_EndTransmit_IT>
    return;
 80068d8:	e008      	b.n	80068ec <HAL_UART_IRQHandler+0x5fc>
      return;
 80068da:	bf00      	nop
 80068dc:	e006      	b.n	80068ec <HAL_UART_IRQHandler+0x5fc>
    return;
 80068de:	bf00      	nop
 80068e0:	e004      	b.n	80068ec <HAL_UART_IRQHandler+0x5fc>
      return;
 80068e2:	bf00      	nop
 80068e4:	e002      	b.n	80068ec <HAL_UART_IRQHandler+0x5fc>
      return;
 80068e6:	bf00      	nop
 80068e8:	e000      	b.n	80068ec <HAL_UART_IRQHandler+0x5fc>
    return;
 80068ea:	bf00      	nop
  }

}
 80068ec:	37e8      	adds	r7, #232	@ 0xe8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop

080068f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	460b      	mov	r3, r1
 8006912:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b088      	sub	sp, #32
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800693c:	2300      	movs	r3, #0
 800693e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	689a      	ldr	r2, [r3, #8]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	431a      	orrs	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	431a      	orrs	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	69db      	ldr	r3, [r3, #28]
 8006954:	4313      	orrs	r3, r2
 8006956:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	4ba6      	ldr	r3, [pc, #664]	@ (8006bf8 <UART_SetConfig+0x2c4>)
 8006960:	4013      	ands	r3, r2
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	6812      	ldr	r2, [r2, #0]
 8006966:	6979      	ldr	r1, [r7, #20]
 8006968:	430b      	orrs	r3, r1
 800696a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68da      	ldr	r2, [r3, #12]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	430a      	orrs	r2, r1
 8006980:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a1b      	ldr	r3, [r3, #32]
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	4313      	orrs	r3, r2
 8006990:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a94      	ldr	r2, [pc, #592]	@ (8006bfc <UART_SetConfig+0x2c8>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d120      	bne.n	80069f2 <UART_SetConfig+0xbe>
 80069b0:	4b93      	ldr	r3, [pc, #588]	@ (8006c00 <UART_SetConfig+0x2cc>)
 80069b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069b6:	f003 0303 	and.w	r3, r3, #3
 80069ba:	2b03      	cmp	r3, #3
 80069bc:	d816      	bhi.n	80069ec <UART_SetConfig+0xb8>
 80069be:	a201      	add	r2, pc, #4	@ (adr r2, 80069c4 <UART_SetConfig+0x90>)
 80069c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c4:	080069d5 	.word	0x080069d5
 80069c8:	080069e1 	.word	0x080069e1
 80069cc:	080069db 	.word	0x080069db
 80069d0:	080069e7 	.word	0x080069e7
 80069d4:	2301      	movs	r3, #1
 80069d6:	77fb      	strb	r3, [r7, #31]
 80069d8:	e150      	b.n	8006c7c <UART_SetConfig+0x348>
 80069da:	2302      	movs	r3, #2
 80069dc:	77fb      	strb	r3, [r7, #31]
 80069de:	e14d      	b.n	8006c7c <UART_SetConfig+0x348>
 80069e0:	2304      	movs	r3, #4
 80069e2:	77fb      	strb	r3, [r7, #31]
 80069e4:	e14a      	b.n	8006c7c <UART_SetConfig+0x348>
 80069e6:	2308      	movs	r3, #8
 80069e8:	77fb      	strb	r3, [r7, #31]
 80069ea:	e147      	b.n	8006c7c <UART_SetConfig+0x348>
 80069ec:	2310      	movs	r3, #16
 80069ee:	77fb      	strb	r3, [r7, #31]
 80069f0:	e144      	b.n	8006c7c <UART_SetConfig+0x348>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a83      	ldr	r2, [pc, #524]	@ (8006c04 <UART_SetConfig+0x2d0>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d132      	bne.n	8006a62 <UART_SetConfig+0x12e>
 80069fc:	4b80      	ldr	r3, [pc, #512]	@ (8006c00 <UART_SetConfig+0x2cc>)
 80069fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a02:	f003 030c 	and.w	r3, r3, #12
 8006a06:	2b0c      	cmp	r3, #12
 8006a08:	d828      	bhi.n	8006a5c <UART_SetConfig+0x128>
 8006a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a10 <UART_SetConfig+0xdc>)
 8006a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a10:	08006a45 	.word	0x08006a45
 8006a14:	08006a5d 	.word	0x08006a5d
 8006a18:	08006a5d 	.word	0x08006a5d
 8006a1c:	08006a5d 	.word	0x08006a5d
 8006a20:	08006a51 	.word	0x08006a51
 8006a24:	08006a5d 	.word	0x08006a5d
 8006a28:	08006a5d 	.word	0x08006a5d
 8006a2c:	08006a5d 	.word	0x08006a5d
 8006a30:	08006a4b 	.word	0x08006a4b
 8006a34:	08006a5d 	.word	0x08006a5d
 8006a38:	08006a5d 	.word	0x08006a5d
 8006a3c:	08006a5d 	.word	0x08006a5d
 8006a40:	08006a57 	.word	0x08006a57
 8006a44:	2300      	movs	r3, #0
 8006a46:	77fb      	strb	r3, [r7, #31]
 8006a48:	e118      	b.n	8006c7c <UART_SetConfig+0x348>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	77fb      	strb	r3, [r7, #31]
 8006a4e:	e115      	b.n	8006c7c <UART_SetConfig+0x348>
 8006a50:	2304      	movs	r3, #4
 8006a52:	77fb      	strb	r3, [r7, #31]
 8006a54:	e112      	b.n	8006c7c <UART_SetConfig+0x348>
 8006a56:	2308      	movs	r3, #8
 8006a58:	77fb      	strb	r3, [r7, #31]
 8006a5a:	e10f      	b.n	8006c7c <UART_SetConfig+0x348>
 8006a5c:	2310      	movs	r3, #16
 8006a5e:	77fb      	strb	r3, [r7, #31]
 8006a60:	e10c      	b.n	8006c7c <UART_SetConfig+0x348>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a68      	ldr	r2, [pc, #416]	@ (8006c08 <UART_SetConfig+0x2d4>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d120      	bne.n	8006aae <UART_SetConfig+0x17a>
 8006a6c:	4b64      	ldr	r3, [pc, #400]	@ (8006c00 <UART_SetConfig+0x2cc>)
 8006a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a72:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006a76:	2b30      	cmp	r3, #48	@ 0x30
 8006a78:	d013      	beq.n	8006aa2 <UART_SetConfig+0x16e>
 8006a7a:	2b30      	cmp	r3, #48	@ 0x30
 8006a7c:	d814      	bhi.n	8006aa8 <UART_SetConfig+0x174>
 8006a7e:	2b20      	cmp	r3, #32
 8006a80:	d009      	beq.n	8006a96 <UART_SetConfig+0x162>
 8006a82:	2b20      	cmp	r3, #32
 8006a84:	d810      	bhi.n	8006aa8 <UART_SetConfig+0x174>
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <UART_SetConfig+0x15c>
 8006a8a:	2b10      	cmp	r3, #16
 8006a8c:	d006      	beq.n	8006a9c <UART_SetConfig+0x168>
 8006a8e:	e00b      	b.n	8006aa8 <UART_SetConfig+0x174>
 8006a90:	2300      	movs	r3, #0
 8006a92:	77fb      	strb	r3, [r7, #31]
 8006a94:	e0f2      	b.n	8006c7c <UART_SetConfig+0x348>
 8006a96:	2302      	movs	r3, #2
 8006a98:	77fb      	strb	r3, [r7, #31]
 8006a9a:	e0ef      	b.n	8006c7c <UART_SetConfig+0x348>
 8006a9c:	2304      	movs	r3, #4
 8006a9e:	77fb      	strb	r3, [r7, #31]
 8006aa0:	e0ec      	b.n	8006c7c <UART_SetConfig+0x348>
 8006aa2:	2308      	movs	r3, #8
 8006aa4:	77fb      	strb	r3, [r7, #31]
 8006aa6:	e0e9      	b.n	8006c7c <UART_SetConfig+0x348>
 8006aa8:	2310      	movs	r3, #16
 8006aaa:	77fb      	strb	r3, [r7, #31]
 8006aac:	e0e6      	b.n	8006c7c <UART_SetConfig+0x348>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a56      	ldr	r2, [pc, #344]	@ (8006c0c <UART_SetConfig+0x2d8>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d120      	bne.n	8006afa <UART_SetConfig+0x1c6>
 8006ab8:	4b51      	ldr	r3, [pc, #324]	@ (8006c00 <UART_SetConfig+0x2cc>)
 8006aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006abe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006ac2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ac4:	d013      	beq.n	8006aee <UART_SetConfig+0x1ba>
 8006ac6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ac8:	d814      	bhi.n	8006af4 <UART_SetConfig+0x1c0>
 8006aca:	2b80      	cmp	r3, #128	@ 0x80
 8006acc:	d009      	beq.n	8006ae2 <UART_SetConfig+0x1ae>
 8006ace:	2b80      	cmp	r3, #128	@ 0x80
 8006ad0:	d810      	bhi.n	8006af4 <UART_SetConfig+0x1c0>
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <UART_SetConfig+0x1a8>
 8006ad6:	2b40      	cmp	r3, #64	@ 0x40
 8006ad8:	d006      	beq.n	8006ae8 <UART_SetConfig+0x1b4>
 8006ada:	e00b      	b.n	8006af4 <UART_SetConfig+0x1c0>
 8006adc:	2300      	movs	r3, #0
 8006ade:	77fb      	strb	r3, [r7, #31]
 8006ae0:	e0cc      	b.n	8006c7c <UART_SetConfig+0x348>
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	77fb      	strb	r3, [r7, #31]
 8006ae6:	e0c9      	b.n	8006c7c <UART_SetConfig+0x348>
 8006ae8:	2304      	movs	r3, #4
 8006aea:	77fb      	strb	r3, [r7, #31]
 8006aec:	e0c6      	b.n	8006c7c <UART_SetConfig+0x348>
 8006aee:	2308      	movs	r3, #8
 8006af0:	77fb      	strb	r3, [r7, #31]
 8006af2:	e0c3      	b.n	8006c7c <UART_SetConfig+0x348>
 8006af4:	2310      	movs	r3, #16
 8006af6:	77fb      	strb	r3, [r7, #31]
 8006af8:	e0c0      	b.n	8006c7c <UART_SetConfig+0x348>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a44      	ldr	r2, [pc, #272]	@ (8006c10 <UART_SetConfig+0x2dc>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d125      	bne.n	8006b50 <UART_SetConfig+0x21c>
 8006b04:	4b3e      	ldr	r3, [pc, #248]	@ (8006c00 <UART_SetConfig+0x2cc>)
 8006b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b12:	d017      	beq.n	8006b44 <UART_SetConfig+0x210>
 8006b14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b18:	d817      	bhi.n	8006b4a <UART_SetConfig+0x216>
 8006b1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b1e:	d00b      	beq.n	8006b38 <UART_SetConfig+0x204>
 8006b20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b24:	d811      	bhi.n	8006b4a <UART_SetConfig+0x216>
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <UART_SetConfig+0x1fe>
 8006b2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b2e:	d006      	beq.n	8006b3e <UART_SetConfig+0x20a>
 8006b30:	e00b      	b.n	8006b4a <UART_SetConfig+0x216>
 8006b32:	2300      	movs	r3, #0
 8006b34:	77fb      	strb	r3, [r7, #31]
 8006b36:	e0a1      	b.n	8006c7c <UART_SetConfig+0x348>
 8006b38:	2302      	movs	r3, #2
 8006b3a:	77fb      	strb	r3, [r7, #31]
 8006b3c:	e09e      	b.n	8006c7c <UART_SetConfig+0x348>
 8006b3e:	2304      	movs	r3, #4
 8006b40:	77fb      	strb	r3, [r7, #31]
 8006b42:	e09b      	b.n	8006c7c <UART_SetConfig+0x348>
 8006b44:	2308      	movs	r3, #8
 8006b46:	77fb      	strb	r3, [r7, #31]
 8006b48:	e098      	b.n	8006c7c <UART_SetConfig+0x348>
 8006b4a:	2310      	movs	r3, #16
 8006b4c:	77fb      	strb	r3, [r7, #31]
 8006b4e:	e095      	b.n	8006c7c <UART_SetConfig+0x348>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a2f      	ldr	r2, [pc, #188]	@ (8006c14 <UART_SetConfig+0x2e0>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d125      	bne.n	8006ba6 <UART_SetConfig+0x272>
 8006b5a:	4b29      	ldr	r3, [pc, #164]	@ (8006c00 <UART_SetConfig+0x2cc>)
 8006b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b68:	d017      	beq.n	8006b9a <UART_SetConfig+0x266>
 8006b6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b6e:	d817      	bhi.n	8006ba0 <UART_SetConfig+0x26c>
 8006b70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b74:	d00b      	beq.n	8006b8e <UART_SetConfig+0x25a>
 8006b76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b7a:	d811      	bhi.n	8006ba0 <UART_SetConfig+0x26c>
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d003      	beq.n	8006b88 <UART_SetConfig+0x254>
 8006b80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b84:	d006      	beq.n	8006b94 <UART_SetConfig+0x260>
 8006b86:	e00b      	b.n	8006ba0 <UART_SetConfig+0x26c>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	77fb      	strb	r3, [r7, #31]
 8006b8c:	e076      	b.n	8006c7c <UART_SetConfig+0x348>
 8006b8e:	2302      	movs	r3, #2
 8006b90:	77fb      	strb	r3, [r7, #31]
 8006b92:	e073      	b.n	8006c7c <UART_SetConfig+0x348>
 8006b94:	2304      	movs	r3, #4
 8006b96:	77fb      	strb	r3, [r7, #31]
 8006b98:	e070      	b.n	8006c7c <UART_SetConfig+0x348>
 8006b9a:	2308      	movs	r3, #8
 8006b9c:	77fb      	strb	r3, [r7, #31]
 8006b9e:	e06d      	b.n	8006c7c <UART_SetConfig+0x348>
 8006ba0:	2310      	movs	r3, #16
 8006ba2:	77fb      	strb	r3, [r7, #31]
 8006ba4:	e06a      	b.n	8006c7c <UART_SetConfig+0x348>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a1b      	ldr	r2, [pc, #108]	@ (8006c18 <UART_SetConfig+0x2e4>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d138      	bne.n	8006c22 <UART_SetConfig+0x2ee>
 8006bb0:	4b13      	ldr	r3, [pc, #76]	@ (8006c00 <UART_SetConfig+0x2cc>)
 8006bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bb6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006bba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006bbe:	d017      	beq.n	8006bf0 <UART_SetConfig+0x2bc>
 8006bc0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006bc4:	d82a      	bhi.n	8006c1c <UART_SetConfig+0x2e8>
 8006bc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bca:	d00b      	beq.n	8006be4 <UART_SetConfig+0x2b0>
 8006bcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bd0:	d824      	bhi.n	8006c1c <UART_SetConfig+0x2e8>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <UART_SetConfig+0x2aa>
 8006bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bda:	d006      	beq.n	8006bea <UART_SetConfig+0x2b6>
 8006bdc:	e01e      	b.n	8006c1c <UART_SetConfig+0x2e8>
 8006bde:	2300      	movs	r3, #0
 8006be0:	77fb      	strb	r3, [r7, #31]
 8006be2:	e04b      	b.n	8006c7c <UART_SetConfig+0x348>
 8006be4:	2302      	movs	r3, #2
 8006be6:	77fb      	strb	r3, [r7, #31]
 8006be8:	e048      	b.n	8006c7c <UART_SetConfig+0x348>
 8006bea:	2304      	movs	r3, #4
 8006bec:	77fb      	strb	r3, [r7, #31]
 8006bee:	e045      	b.n	8006c7c <UART_SetConfig+0x348>
 8006bf0:	2308      	movs	r3, #8
 8006bf2:	77fb      	strb	r3, [r7, #31]
 8006bf4:	e042      	b.n	8006c7c <UART_SetConfig+0x348>
 8006bf6:	bf00      	nop
 8006bf8:	efff69f3 	.word	0xefff69f3
 8006bfc:	40011000 	.word	0x40011000
 8006c00:	40023800 	.word	0x40023800
 8006c04:	40004400 	.word	0x40004400
 8006c08:	40004800 	.word	0x40004800
 8006c0c:	40004c00 	.word	0x40004c00
 8006c10:	40005000 	.word	0x40005000
 8006c14:	40011400 	.word	0x40011400
 8006c18:	40007800 	.word	0x40007800
 8006c1c:	2310      	movs	r3, #16
 8006c1e:	77fb      	strb	r3, [r7, #31]
 8006c20:	e02c      	b.n	8006c7c <UART_SetConfig+0x348>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a72      	ldr	r2, [pc, #456]	@ (8006df0 <UART_SetConfig+0x4bc>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d125      	bne.n	8006c78 <UART_SetConfig+0x344>
 8006c2c:	4b71      	ldr	r3, [pc, #452]	@ (8006df4 <UART_SetConfig+0x4c0>)
 8006c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c32:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006c36:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006c3a:	d017      	beq.n	8006c6c <UART_SetConfig+0x338>
 8006c3c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006c40:	d817      	bhi.n	8006c72 <UART_SetConfig+0x33e>
 8006c42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c46:	d00b      	beq.n	8006c60 <UART_SetConfig+0x32c>
 8006c48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c4c:	d811      	bhi.n	8006c72 <UART_SetConfig+0x33e>
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <UART_SetConfig+0x326>
 8006c52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c56:	d006      	beq.n	8006c66 <UART_SetConfig+0x332>
 8006c58:	e00b      	b.n	8006c72 <UART_SetConfig+0x33e>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	77fb      	strb	r3, [r7, #31]
 8006c5e:	e00d      	b.n	8006c7c <UART_SetConfig+0x348>
 8006c60:	2302      	movs	r3, #2
 8006c62:	77fb      	strb	r3, [r7, #31]
 8006c64:	e00a      	b.n	8006c7c <UART_SetConfig+0x348>
 8006c66:	2304      	movs	r3, #4
 8006c68:	77fb      	strb	r3, [r7, #31]
 8006c6a:	e007      	b.n	8006c7c <UART_SetConfig+0x348>
 8006c6c:	2308      	movs	r3, #8
 8006c6e:	77fb      	strb	r3, [r7, #31]
 8006c70:	e004      	b.n	8006c7c <UART_SetConfig+0x348>
 8006c72:	2310      	movs	r3, #16
 8006c74:	77fb      	strb	r3, [r7, #31]
 8006c76:	e001      	b.n	8006c7c <UART_SetConfig+0x348>
 8006c78:	2310      	movs	r3, #16
 8006c7a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	69db      	ldr	r3, [r3, #28]
 8006c80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c84:	d15b      	bne.n	8006d3e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006c86:	7ffb      	ldrb	r3, [r7, #31]
 8006c88:	2b08      	cmp	r3, #8
 8006c8a:	d828      	bhi.n	8006cde <UART_SetConfig+0x3aa>
 8006c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c94 <UART_SetConfig+0x360>)
 8006c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c92:	bf00      	nop
 8006c94:	08006cb9 	.word	0x08006cb9
 8006c98:	08006cc1 	.word	0x08006cc1
 8006c9c:	08006cc9 	.word	0x08006cc9
 8006ca0:	08006cdf 	.word	0x08006cdf
 8006ca4:	08006ccf 	.word	0x08006ccf
 8006ca8:	08006cdf 	.word	0x08006cdf
 8006cac:	08006cdf 	.word	0x08006cdf
 8006cb0:	08006cdf 	.word	0x08006cdf
 8006cb4:	08006cd7 	.word	0x08006cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cb8:	f7fe fd04 	bl	80056c4 <HAL_RCC_GetPCLK1Freq>
 8006cbc:	61b8      	str	r0, [r7, #24]
        break;
 8006cbe:	e013      	b.n	8006ce8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cc0:	f7fe fd14 	bl	80056ec <HAL_RCC_GetPCLK2Freq>
 8006cc4:	61b8      	str	r0, [r7, #24]
        break;
 8006cc6:	e00f      	b.n	8006ce8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cc8:	4b4b      	ldr	r3, [pc, #300]	@ (8006df8 <UART_SetConfig+0x4c4>)
 8006cca:	61bb      	str	r3, [r7, #24]
        break;
 8006ccc:	e00c      	b.n	8006ce8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cce:	f7fe fbe7 	bl	80054a0 <HAL_RCC_GetSysClockFreq>
 8006cd2:	61b8      	str	r0, [r7, #24]
        break;
 8006cd4:	e008      	b.n	8006ce8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cda:	61bb      	str	r3, [r7, #24]
        break;
 8006cdc:	e004      	b.n	8006ce8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	77bb      	strb	r3, [r7, #30]
        break;
 8006ce6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d074      	beq.n	8006dd8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	005a      	lsls	r2, r3, #1
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	085b      	lsrs	r3, r3, #1
 8006cf8:	441a      	add	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	2b0f      	cmp	r3, #15
 8006d08:	d916      	bls.n	8006d38 <UART_SetConfig+0x404>
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d10:	d212      	bcs.n	8006d38 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	f023 030f 	bic.w	r3, r3, #15
 8006d1a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	085b      	lsrs	r3, r3, #1
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	f003 0307 	and.w	r3, r3, #7
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	89fb      	ldrh	r3, [r7, #14]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	89fa      	ldrh	r2, [r7, #14]
 8006d34:	60da      	str	r2, [r3, #12]
 8006d36:	e04f      	b.n	8006dd8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	77bb      	strb	r3, [r7, #30]
 8006d3c:	e04c      	b.n	8006dd8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d3e:	7ffb      	ldrb	r3, [r7, #31]
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d828      	bhi.n	8006d96 <UART_SetConfig+0x462>
 8006d44:	a201      	add	r2, pc, #4	@ (adr r2, 8006d4c <UART_SetConfig+0x418>)
 8006d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4a:	bf00      	nop
 8006d4c:	08006d71 	.word	0x08006d71
 8006d50:	08006d79 	.word	0x08006d79
 8006d54:	08006d81 	.word	0x08006d81
 8006d58:	08006d97 	.word	0x08006d97
 8006d5c:	08006d87 	.word	0x08006d87
 8006d60:	08006d97 	.word	0x08006d97
 8006d64:	08006d97 	.word	0x08006d97
 8006d68:	08006d97 	.word	0x08006d97
 8006d6c:	08006d8f 	.word	0x08006d8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d70:	f7fe fca8 	bl	80056c4 <HAL_RCC_GetPCLK1Freq>
 8006d74:	61b8      	str	r0, [r7, #24]
        break;
 8006d76:	e013      	b.n	8006da0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d78:	f7fe fcb8 	bl	80056ec <HAL_RCC_GetPCLK2Freq>
 8006d7c:	61b8      	str	r0, [r7, #24]
        break;
 8006d7e:	e00f      	b.n	8006da0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d80:	4b1d      	ldr	r3, [pc, #116]	@ (8006df8 <UART_SetConfig+0x4c4>)
 8006d82:	61bb      	str	r3, [r7, #24]
        break;
 8006d84:	e00c      	b.n	8006da0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d86:	f7fe fb8b 	bl	80054a0 <HAL_RCC_GetSysClockFreq>
 8006d8a:	61b8      	str	r0, [r7, #24]
        break;
 8006d8c:	e008      	b.n	8006da0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d92:	61bb      	str	r3, [r7, #24]
        break;
 8006d94:	e004      	b.n	8006da0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006d96:	2300      	movs	r3, #0
 8006d98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	77bb      	strb	r3, [r7, #30]
        break;
 8006d9e:	bf00      	nop
    }

    if (pclk != 0U)
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d018      	beq.n	8006dd8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	085a      	lsrs	r2, r3, #1
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	441a      	add	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	2b0f      	cmp	r3, #15
 8006dbe:	d909      	bls.n	8006dd4 <UART_SetConfig+0x4a0>
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dc6:	d205      	bcs.n	8006dd4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	60da      	str	r2, [r3, #12]
 8006dd2:	e001      	b.n	8006dd8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006de4:	7fbb      	ldrb	r3, [r7, #30]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3720      	adds	r7, #32
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	40007c00 	.word	0x40007c00
 8006df4:	40023800 	.word	0x40023800
 8006df8:	00f42400 	.word	0x00f42400

08006dfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e08:	f003 0308 	and.w	r3, r3, #8
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00a      	beq.n	8006e26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00a      	beq.n	8006e48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4c:	f003 0302 	and.w	r3, r3, #2
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00a      	beq.n	8006e6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6e:	f003 0304 	and.w	r3, r3, #4
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00a      	beq.n	8006e8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e90:	f003 0310 	and.w	r3, r3, #16
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00a      	beq.n	8006eae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb2:	f003 0320 	and.w	r3, r3, #32
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00a      	beq.n	8006ed0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	430a      	orrs	r2, r1
 8006ece:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d01a      	beq.n	8006f12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006efa:	d10a      	bne.n	8006f12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	605a      	str	r2, [r3, #4]
  }
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b098      	sub	sp, #96	@ 0x60
 8006f44:	af02      	add	r7, sp, #8
 8006f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f50:	f7fc f93e 	bl	80031d0 <HAL_GetTick>
 8006f54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0308 	and.w	r3, r3, #8
 8006f60:	2b08      	cmp	r3, #8
 8006f62:	d12e      	bne.n	8006fc2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f88c 	bl	8007090 <UART_WaitOnFlagUntilTimeout>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d021      	beq.n	8006fc2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f86:	e853 3f00 	ldrex	r3, [r3]
 8006f8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f92:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f9e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006fa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fa4:	e841 2300 	strex	r3, r2, [r1]
 8006fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006faa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1e6      	bne.n	8006f7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e062      	b.n	8007088 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0304 	and.w	r3, r3, #4
 8006fcc:	2b04      	cmp	r3, #4
 8006fce:	d149      	bne.n	8007064 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f856 	bl	8007090 <UART_WaitOnFlagUntilTimeout>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d03c      	beq.n	8007064 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff2:	e853 3f00 	ldrex	r3, [r3]
 8006ff6:	623b      	str	r3, [r7, #32]
   return(result);
 8006ff8:	6a3b      	ldr	r3, [r7, #32]
 8006ffa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	461a      	mov	r2, r3
 8007006:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007008:	633b      	str	r3, [r7, #48]	@ 0x30
 800700a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800700e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007010:	e841 2300 	strex	r3, r2, [r1]
 8007014:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1e6      	bne.n	8006fea <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	3308      	adds	r3, #8
 8007022:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	e853 3f00 	ldrex	r3, [r3]
 800702a:	60fb      	str	r3, [r7, #12]
   return(result);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f023 0301 	bic.w	r3, r3, #1
 8007032:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	3308      	adds	r3, #8
 800703a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800703c:	61fa      	str	r2, [r7, #28]
 800703e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007040:	69b9      	ldr	r1, [r7, #24]
 8007042:	69fa      	ldr	r2, [r7, #28]
 8007044:	e841 2300 	strex	r3, r2, [r1]
 8007048:	617b      	str	r3, [r7, #20]
   return(result);
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1e5      	bne.n	800701c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2220      	movs	r2, #32
 8007054:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007060:	2303      	movs	r3, #3
 8007062:	e011      	b.n	8007088 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2220      	movs	r2, #32
 8007068:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2220      	movs	r2, #32
 800706e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3758      	adds	r7, #88	@ 0x58
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	603b      	str	r3, [r7, #0]
 800709c:	4613      	mov	r3, r2
 800709e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070a0:	e04f      	b.n	8007142 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a8:	d04b      	beq.n	8007142 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070aa:	f7fc f891 	bl	80031d0 <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d302      	bcc.n	80070c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e04e      	b.n	8007162 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0304 	and.w	r3, r3, #4
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d037      	beq.n	8007142 <UART_WaitOnFlagUntilTimeout+0xb2>
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2b80      	cmp	r3, #128	@ 0x80
 80070d6:	d034      	beq.n	8007142 <UART_WaitOnFlagUntilTimeout+0xb2>
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2b40      	cmp	r3, #64	@ 0x40
 80070dc:	d031      	beq.n	8007142 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	69db      	ldr	r3, [r3, #28]
 80070e4:	f003 0308 	and.w	r3, r3, #8
 80070e8:	2b08      	cmp	r3, #8
 80070ea:	d110      	bne.n	800710e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2208      	movs	r2, #8
 80070f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 f8ff 	bl	80072f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2208      	movs	r2, #8
 80070fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e029      	b.n	8007162 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	69db      	ldr	r3, [r3, #28]
 8007114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007118:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800711c:	d111      	bne.n	8007142 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007126:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 f8e5 	bl	80072f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2220      	movs	r2, #32
 8007132:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e00f      	b.n	8007162 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	69da      	ldr	r2, [r3, #28]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	4013      	ands	r3, r2
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	429a      	cmp	r2, r3
 8007150:	bf0c      	ite	eq
 8007152:	2301      	moveq	r3, #1
 8007154:	2300      	movne	r3, #0
 8007156:	b2db      	uxtb	r3, r3
 8007158:	461a      	mov	r2, r3
 800715a:	79fb      	ldrb	r3, [r7, #7]
 800715c:	429a      	cmp	r2, r3
 800715e:	d0a0      	beq.n	80070a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800716c:	b480      	push	{r7}
 800716e:	b097      	sub	sp, #92	@ 0x5c
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	4613      	mov	r3, r2
 8007178:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	88fa      	ldrh	r2, [r7, #6]
 8007184:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	88fa      	ldrh	r2, [r7, #6]
 800718c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800719e:	d10e      	bne.n	80071be <UART_Start_Receive_IT+0x52>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d105      	bne.n	80071b4 <UART_Start_Receive_IT+0x48>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80071ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80071b2:	e02d      	b.n	8007210 <UART_Start_Receive_IT+0xa4>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	22ff      	movs	r2, #255	@ 0xff
 80071b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80071bc:	e028      	b.n	8007210 <UART_Start_Receive_IT+0xa4>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10d      	bne.n	80071e2 <UART_Start_Receive_IT+0x76>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d104      	bne.n	80071d8 <UART_Start_Receive_IT+0x6c>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	22ff      	movs	r2, #255	@ 0xff
 80071d2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80071d6:	e01b      	b.n	8007210 <UART_Start_Receive_IT+0xa4>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	227f      	movs	r2, #127	@ 0x7f
 80071dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80071e0:	e016      	b.n	8007210 <UART_Start_Receive_IT+0xa4>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071ea:	d10d      	bne.n	8007208 <UART_Start_Receive_IT+0x9c>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d104      	bne.n	80071fe <UART_Start_Receive_IT+0x92>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	227f      	movs	r2, #127	@ 0x7f
 80071f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80071fc:	e008      	b.n	8007210 <UART_Start_Receive_IT+0xa4>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	223f      	movs	r2, #63	@ 0x3f
 8007202:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007206:	e003      	b.n	8007210 <UART_Start_Receive_IT+0xa4>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2222      	movs	r2, #34	@ 0x22
 800721c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	3308      	adds	r3, #8
 8007226:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800722a:	e853 3f00 	ldrex	r3, [r3]
 800722e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007232:	f043 0301 	orr.w	r3, r3, #1
 8007236:	657b      	str	r3, [r7, #84]	@ 0x54
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3308      	adds	r3, #8
 800723e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007240:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007242:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007244:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007246:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007248:	e841 2300 	strex	r3, r2, [r1]
 800724c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800724e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1e5      	bne.n	8007220 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800725c:	d107      	bne.n	800726e <UART_Start_Receive_IT+0x102>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d103      	bne.n	800726e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	4a21      	ldr	r2, [pc, #132]	@ (80072f0 <UART_Start_Receive_IT+0x184>)
 800726a:	669a      	str	r2, [r3, #104]	@ 0x68
 800726c:	e002      	b.n	8007274 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	4a20      	ldr	r2, [pc, #128]	@ (80072f4 <UART_Start_Receive_IT+0x188>)
 8007272:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d019      	beq.n	80072b0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007284:	e853 3f00 	ldrex	r3, [r3]
 8007288:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800728a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007290:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	461a      	mov	r2, r3
 8007298:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800729a:	637b      	str	r3, [r7, #52]	@ 0x34
 800729c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80072a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80072a2:	e841 2300 	strex	r3, r2, [r1]
 80072a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80072a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1e6      	bne.n	800727c <UART_Start_Receive_IT+0x110>
 80072ae:	e018      	b.n	80072e2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	e853 3f00 	ldrex	r3, [r3]
 80072bc:	613b      	str	r3, [r7, #16]
   return(result);
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	f043 0320 	orr.w	r3, r3, #32
 80072c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072ce:	623b      	str	r3, [r7, #32]
 80072d0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d2:	69f9      	ldr	r1, [r7, #28]
 80072d4:	6a3a      	ldr	r2, [r7, #32]
 80072d6:	e841 2300 	strex	r3, r2, [r1]
 80072da:	61bb      	str	r3, [r7, #24]
   return(result);
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1e6      	bne.n	80072b0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	375c      	adds	r7, #92	@ 0x5c
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	080075e1 	.word	0x080075e1
 80072f4:	08007439 	.word	0x08007439

080072f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b095      	sub	sp, #84	@ 0x54
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007308:	e853 3f00 	ldrex	r3, [r3]
 800730c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800730e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007310:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007314:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	461a      	mov	r2, r3
 800731c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800731e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007320:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007322:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007324:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007326:	e841 2300 	strex	r3, r2, [r1]
 800732a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800732c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1e6      	bne.n	8007300 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3308      	adds	r3, #8
 8007338:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	e853 3f00 	ldrex	r3, [r3]
 8007340:	61fb      	str	r3, [r7, #28]
   return(result);
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	f023 0301 	bic.w	r3, r3, #1
 8007348:	64bb      	str	r3, [r7, #72]	@ 0x48
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3308      	adds	r3, #8
 8007350:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007352:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007354:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007356:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007358:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800735a:	e841 2300 	strex	r3, r2, [r1]
 800735e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1e5      	bne.n	8007332 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800736a:	2b01      	cmp	r3, #1
 800736c:	d118      	bne.n	80073a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	e853 3f00 	ldrex	r3, [r3]
 800737a:	60bb      	str	r3, [r7, #8]
   return(result);
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	f023 0310 	bic.w	r3, r3, #16
 8007382:	647b      	str	r3, [r7, #68]	@ 0x44
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	461a      	mov	r2, r3
 800738a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800738c:	61bb      	str	r3, [r7, #24]
 800738e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007390:	6979      	ldr	r1, [r7, #20]
 8007392:	69ba      	ldr	r2, [r7, #24]
 8007394:	e841 2300 	strex	r3, r2, [r1]
 8007398:	613b      	str	r3, [r7, #16]
   return(result);
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1e6      	bne.n	800736e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2220      	movs	r2, #32
 80073a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80073b4:	bf00      	nop
 80073b6:	3754      	adds	r7, #84	@ 0x54
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f7f9 fd7e 	bl	8000ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073dc:	bf00      	nop
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b088      	sub	sp, #32
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	e853 3f00 	ldrex	r3, [r3]
 80073f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007400:	61fb      	str	r3, [r7, #28]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	61bb      	str	r3, [r7, #24]
 800740c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740e:	6979      	ldr	r1, [r7, #20]
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	e841 2300 	strex	r3, r2, [r1]
 8007416:	613b      	str	r3, [r7, #16]
   return(result);
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1e6      	bne.n	80073ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2220      	movs	r2, #32
 8007422:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f7ff fa62 	bl	80068f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007430:	bf00      	nop
 8007432:	3720      	adds	r7, #32
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b09c      	sub	sp, #112	@ 0x70
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007446:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007450:	2b22      	cmp	r3, #34	@ 0x22
 8007452:	f040 80b9 	bne.w	80075c8 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800745c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007460:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007464:	b2d9      	uxtb	r1, r3
 8007466:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800746a:	b2da      	uxtb	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007470:	400a      	ands	r2, r1
 8007472:	b2d2      	uxtb	r2, r2
 8007474:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800747a:	1c5a      	adds	r2, r3, #1
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007486:	b29b      	uxth	r3, r3
 8007488:	3b01      	subs	r3, #1
 800748a:	b29a      	uxth	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007498:	b29b      	uxth	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	f040 809c 	bne.w	80075d8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074a8:	e853 3f00 	ldrex	r3, [r3]
 80074ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80074ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	461a      	mov	r2, r3
 80074bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80074be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80074c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80074cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e6      	bne.n	80074a0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3308      	adds	r3, #8
 80074d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074dc:	e853 3f00 	ldrex	r3, [r3]
 80074e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e4:	f023 0301 	bic.w	r3, r3, #1
 80074e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3308      	adds	r3, #8
 80074f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80074f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80074f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1e5      	bne.n	80074d2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2220      	movs	r2, #32
 800750a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d018      	beq.n	800755a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007530:	e853 3f00 	ldrex	r3, [r3]
 8007534:	623b      	str	r3, [r7, #32]
   return(result);
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800753c:	663b      	str	r3, [r7, #96]	@ 0x60
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	461a      	mov	r2, r3
 8007544:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007546:	633b      	str	r3, [r7, #48]	@ 0x30
 8007548:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800754c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800754e:	e841 2300 	strex	r3, r2, [r1]
 8007552:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1e6      	bne.n	8007528 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800755e:	2b01      	cmp	r3, #1
 8007560:	d12e      	bne.n	80075c0 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	e853 3f00 	ldrex	r3, [r3]
 8007574:	60fb      	str	r3, [r7, #12]
   return(result);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f023 0310 	bic.w	r3, r3, #16
 800757c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	461a      	mov	r2, r3
 8007584:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007586:	61fb      	str	r3, [r7, #28]
 8007588:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758a:	69b9      	ldr	r1, [r7, #24]
 800758c:	69fa      	ldr	r2, [r7, #28]
 800758e:	e841 2300 	strex	r3, r2, [r1]
 8007592:	617b      	str	r3, [r7, #20]
   return(result);
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1e6      	bne.n	8007568 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	69db      	ldr	r3, [r3, #28]
 80075a0:	f003 0310 	and.w	r3, r3, #16
 80075a4:	2b10      	cmp	r3, #16
 80075a6:	d103      	bne.n	80075b0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2210      	movs	r2, #16
 80075ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7ff f9a5 	bl	8006908 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80075be:	e00b      	b.n	80075d8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7f9 fc39 	bl	8000e38 <HAL_UART_RxCpltCallback>
}
 80075c6:	e007      	b.n	80075d8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	699a      	ldr	r2, [r3, #24]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f042 0208 	orr.w	r2, r2, #8
 80075d6:	619a      	str	r2, [r3, #24]
}
 80075d8:	bf00      	nop
 80075da:	3770      	adds	r7, #112	@ 0x70
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b09c      	sub	sp, #112	@ 0x70
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80075ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075f8:	2b22      	cmp	r3, #34	@ 0x22
 80075fa:	f040 80b9 	bne.w	8007770 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007604:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800760c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800760e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007612:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007616:	4013      	ands	r3, r2
 8007618:	b29a      	uxth	r2, r3
 800761a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800761c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007622:	1c9a      	adds	r2, r3, #2
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800762e:	b29b      	uxth	r3, r3
 8007630:	3b01      	subs	r3, #1
 8007632:	b29a      	uxth	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007640:	b29b      	uxth	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	f040 809c 	bne.w	8007780 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007650:	e853 3f00 	ldrex	r3, [r3]
 8007654:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007656:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007658:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800765c:	667b      	str	r3, [r7, #100]	@ 0x64
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	461a      	mov	r2, r3
 8007664:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007666:	657b      	str	r3, [r7, #84]	@ 0x54
 8007668:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800766c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800766e:	e841 2300 	strex	r3, r2, [r1]
 8007672:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007674:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1e6      	bne.n	8007648 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	3308      	adds	r3, #8
 8007680:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007684:	e853 3f00 	ldrex	r3, [r3]
 8007688:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800768a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768c:	f023 0301 	bic.w	r3, r3, #1
 8007690:	663b      	str	r3, [r7, #96]	@ 0x60
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3308      	adds	r3, #8
 8007698:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800769a:	643a      	str	r2, [r7, #64]	@ 0x40
 800769c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076a2:	e841 2300 	strex	r3, r2, [r1]
 80076a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1e5      	bne.n	800767a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2220      	movs	r2, #32
 80076b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d018      	beq.n	8007702 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	e853 3f00 	ldrex	r3, [r3]
 80076dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80076e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	461a      	mov	r2, r3
 80076ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076f0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076f6:	e841 2300 	strex	r3, r2, [r1]
 80076fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1e6      	bne.n	80076d0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007706:	2b01      	cmp	r3, #1
 8007708:	d12e      	bne.n	8007768 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	e853 3f00 	ldrex	r3, [r3]
 800771c:	60bb      	str	r3, [r7, #8]
   return(result);
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	f023 0310 	bic.w	r3, r3, #16
 8007724:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800772e:	61bb      	str	r3, [r7, #24]
 8007730:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007732:	6979      	ldr	r1, [r7, #20]
 8007734:	69ba      	ldr	r2, [r7, #24]
 8007736:	e841 2300 	strex	r3, r2, [r1]
 800773a:	613b      	str	r3, [r7, #16]
   return(result);
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1e6      	bne.n	8007710 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	69db      	ldr	r3, [r3, #28]
 8007748:	f003 0310 	and.w	r3, r3, #16
 800774c:	2b10      	cmp	r3, #16
 800774e:	d103      	bne.n	8007758 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2210      	movs	r2, #16
 8007756:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800775e:	4619      	mov	r1, r3
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f7ff f8d1 	bl	8006908 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007766:	e00b      	b.n	8007780 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f7f9 fb65 	bl	8000e38 <HAL_UART_RxCpltCallback>
}
 800776e:	e007      	b.n	8007780 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	699a      	ldr	r2, [r3, #24]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f042 0208 	orr.w	r2, r2, #8
 800777e:	619a      	str	r2, [r3, #24]
}
 8007780:	bf00      	nop
 8007782:	3770      	adds	r7, #112	@ 0x70
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007788:	b084      	sub	sp, #16
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	f107 001c 	add.w	r0, r7, #28
 8007796:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800779a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d121      	bne.n	80077e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68da      	ldr	r2, [r3, #12]
 80077b2:	4b21      	ldr	r3, [pc, #132]	@ (8007838 <USB_CoreInit+0xb0>)
 80077b4:	4013      	ands	r3, r2
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80077c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d105      	bne.n	80077da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fa92 	bl	8007d04 <USB_CoreReset>
 80077e0:	4603      	mov	r3, r0
 80077e2:	73fb      	strb	r3, [r7, #15]
 80077e4:	e010      	b.n	8007808 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fa86 	bl	8007d04 <USB_CoreReset>
 80077f8:	4603      	mov	r3, r0
 80077fa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007800:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8007808:	7fbb      	ldrb	r3, [r7, #30]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d10b      	bne.n	8007826 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f043 0206 	orr.w	r2, r3, #6
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f043 0220 	orr.w	r2, r3, #32
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007826:	7bfb      	ldrb	r3, [r7, #15]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007832:	b004      	add	sp, #16
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	ffbdffbf 	.word	0xffbdffbf

0800783c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f023 0201 	bic.w	r2, r3, #1
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	460b      	mov	r3, r1
 8007868:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800786a:	2300      	movs	r3, #0
 800786c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800787a:	78fb      	ldrb	r3, [r7, #3]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d115      	bne.n	80078ac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800788c:	200a      	movs	r0, #10
 800788e:	f7fb fcab 	bl	80031e8 <HAL_Delay>
      ms += 10U;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	330a      	adds	r3, #10
 8007896:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fa25 	bl	8007ce8 <USB_GetMode>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d01e      	beq.n	80078e2 <USB_SetCurrentMode+0x84>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2bc7      	cmp	r3, #199	@ 0xc7
 80078a8:	d9f0      	bls.n	800788c <USB_SetCurrentMode+0x2e>
 80078aa:	e01a      	b.n	80078e2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80078ac:	78fb      	ldrb	r3, [r7, #3]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d115      	bne.n	80078de <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80078be:	200a      	movs	r0, #10
 80078c0:	f7fb fc92 	bl	80031e8 <HAL_Delay>
      ms += 10U;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	330a      	adds	r3, #10
 80078c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fa0c 	bl	8007ce8 <USB_GetMode>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d005      	beq.n	80078e2 <USB_SetCurrentMode+0x84>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2bc7      	cmp	r3, #199	@ 0xc7
 80078da:	d9f0      	bls.n	80078be <USB_SetCurrentMode+0x60>
 80078dc:	e001      	b.n	80078e2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e005      	b.n	80078ee <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2bc8      	cmp	r3, #200	@ 0xc8
 80078e6:	d101      	bne.n	80078ec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e000      	b.n	80078ee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
	...

080078f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078f8:	b084      	sub	sp, #16
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b086      	sub	sp, #24
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007906:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800790a:	2300      	movs	r3, #0
 800790c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007912:	2300      	movs	r3, #0
 8007914:	613b      	str	r3, [r7, #16]
 8007916:	e009      	b.n	800792c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	3340      	adds	r3, #64	@ 0x40
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4413      	add	r3, r2
 8007922:	2200      	movs	r2, #0
 8007924:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	3301      	adds	r3, #1
 800792a:	613b      	str	r3, [r7, #16]
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	2b0e      	cmp	r3, #14
 8007930:	d9f2      	bls.n	8007918 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007932:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007936:	2b00      	cmp	r3, #0
 8007938:	d11c      	bne.n	8007974 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007948:	f043 0302 	orr.w	r3, r3, #2
 800794c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007952:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	e005      	b.n	8007980 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007978:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007986:	461a      	mov	r2, r3
 8007988:	2300      	movs	r3, #0
 800798a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800798c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007990:	2b01      	cmp	r3, #1
 8007992:	d10d      	bne.n	80079b0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007994:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007998:	2b00      	cmp	r3, #0
 800799a:	d104      	bne.n	80079a6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800799c:	2100      	movs	r1, #0
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f968 	bl	8007c74 <USB_SetDevSpeed>
 80079a4:	e008      	b.n	80079b8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80079a6:	2101      	movs	r1, #1
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f963 	bl	8007c74 <USB_SetDevSpeed>
 80079ae:	e003      	b.n	80079b8 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80079b0:	2103      	movs	r1, #3
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f95e 	bl	8007c74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80079b8:	2110      	movs	r1, #16
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f8fa 	bl	8007bb4 <USB_FlushTxFifo>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d001      	beq.n	80079ca <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f924 	bl	8007c18 <USB_FlushRxFifo>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d001      	beq.n	80079da <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079e0:	461a      	mov	r2, r3
 80079e2:	2300      	movs	r3, #0
 80079e4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079ec:	461a      	mov	r2, r3
 80079ee:	2300      	movs	r3, #0
 80079f0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079f8:	461a      	mov	r2, r3
 80079fa:	2300      	movs	r3, #0
 80079fc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079fe:	2300      	movs	r3, #0
 8007a00:	613b      	str	r3, [r7, #16]
 8007a02:	e043      	b.n	8007a8c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	015a      	lsls	r2, r3, #5
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a1a:	d118      	bne.n	8007a4e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10a      	bne.n	8007a38 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	015a      	lsls	r2, r3, #5
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	4413      	add	r3, r2
 8007a2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a2e:	461a      	mov	r2, r3
 8007a30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007a34:	6013      	str	r3, [r2, #0]
 8007a36:	e013      	b.n	8007a60 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a44:	461a      	mov	r2, r3
 8007a46:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007a4a:	6013      	str	r3, [r2, #0]
 8007a4c:	e008      	b.n	8007a60 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	015a      	lsls	r2, r3, #5
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	4413      	add	r3, r2
 8007a56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	015a      	lsls	r2, r3, #5
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	4413      	add	r3, r2
 8007a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	2300      	movs	r3, #0
 8007a70:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	015a      	lsls	r2, r3, #5
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	4413      	add	r3, r2
 8007a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a7e:	461a      	mov	r2, r3
 8007a80:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	613b      	str	r3, [r7, #16]
 8007a8c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007a90:	461a      	mov	r2, r3
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d3b5      	bcc.n	8007a04 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a98:	2300      	movs	r3, #0
 8007a9a:	613b      	str	r3, [r7, #16]
 8007a9c:	e043      	b.n	8007b26 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ab4:	d118      	bne.n	8007ae8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10a      	bne.n	8007ad2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	015a      	lsls	r2, r3, #5
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ac8:	461a      	mov	r2, r3
 8007aca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007ace:	6013      	str	r3, [r2, #0]
 8007ad0:	e013      	b.n	8007afa <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	015a      	lsls	r2, r3, #5
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	4413      	add	r3, r2
 8007ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ade:	461a      	mov	r2, r3
 8007ae0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007ae4:	6013      	str	r3, [r2, #0]
 8007ae6:	e008      	b.n	8007afa <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	015a      	lsls	r2, r3, #5
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4413      	add	r3, r2
 8007af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007af4:	461a      	mov	r2, r3
 8007af6:	2300      	movs	r3, #0
 8007af8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	015a      	lsls	r2, r3, #5
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b06:	461a      	mov	r2, r3
 8007b08:	2300      	movs	r3, #0
 8007b0a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	015a      	lsls	r2, r3, #5
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	4413      	add	r3, r2
 8007b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b18:	461a      	mov	r2, r3
 8007b1a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007b1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	3301      	adds	r3, #1
 8007b24:	613b      	str	r3, [r7, #16]
 8007b26:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d3b5      	bcc.n	8007a9e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b44:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007b52:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b54:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d105      	bne.n	8007b68 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	f043 0210 	orr.w	r2, r3, #16
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	699a      	ldr	r2, [r3, #24]
 8007b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8007bac <USB_DevInit+0x2b4>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b74:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d005      	beq.n	8007b88 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	f043 0208 	orr.w	r2, r3, #8
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b88:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d105      	bne.n	8007b9c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	699a      	ldr	r2, [r3, #24]
 8007b94:	4b06      	ldr	r3, [pc, #24]	@ (8007bb0 <USB_DevInit+0x2b8>)
 8007b96:	4313      	orrs	r3, r2
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3718      	adds	r7, #24
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ba8:	b004      	add	sp, #16
 8007baa:	4770      	bx	lr
 8007bac:	803c3800 	.word	0x803c3800
 8007bb0:	40000004 	.word	0x40000004

08007bb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bce:	d901      	bls.n	8007bd4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e01b      	b.n	8007c0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	daf2      	bge.n	8007bc2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	019b      	lsls	r3, r3, #6
 8007be4:	f043 0220 	orr.w	r2, r3, #32
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bf8:	d901      	bls.n	8007bfe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e006      	b.n	8007c0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	f003 0320 	and.w	r3, r3, #32
 8007c06:	2b20      	cmp	r3, #32
 8007c08:	d0f0      	beq.n	8007bec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c20:	2300      	movs	r3, #0
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	3301      	adds	r3, #1
 8007c28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c30:	d901      	bls.n	8007c36 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c32:	2303      	movs	r3, #3
 8007c34:	e018      	b.n	8007c68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	daf2      	bge.n	8007c24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2210      	movs	r2, #16
 8007c46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c54:	d901      	bls.n	8007c5a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e006      	b.n	8007c68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	f003 0310 	and.w	r3, r3, #16
 8007c62:	2b10      	cmp	r3, #16
 8007c64:	d0f0      	beq.n	8007c48 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3714      	adds	r7, #20
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	78fb      	ldrb	r3, [r7, #3]
 8007c8e:	68f9      	ldr	r1, [r7, #12]
 8007c90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c94:	4313      	orrs	r3, r2
 8007c96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b085      	sub	sp, #20
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007cc0:	f023 0303 	bic.w	r3, r3, #3
 8007cc4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007cd4:	f043 0302 	orr.w	r3, r3, #2
 8007cd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3714      	adds	r7, #20
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	f003 0301 	and.w	r3, r3, #1
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	3301      	adds	r3, #1
 8007d14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d1c:	d901      	bls.n	8007d22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	e022      	b.n	8007d68 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	daf2      	bge.n	8007d10 <USB_CoreReset+0xc>

  count = 10U;
 8007d2a:	230a      	movs	r3, #10
 8007d2c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007d2e:	e002      	b.n	8007d36 <USB_CoreReset+0x32>
  {
    count--;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	3b01      	subs	r3, #1
 8007d34:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1f9      	bne.n	8007d30 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	f043 0201 	orr.w	r2, r3, #1
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d54:	d901      	bls.n	8007d5a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e006      	b.n	8007d68 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d0f0      	beq.n	8007d48 <USB_CoreReset+0x44>

  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3714      	adds	r7, #20
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007d78:	4904      	ldr	r1, [pc, #16]	@ (8007d8c <MX_FATFS_Init+0x18>)
 8007d7a:	4805      	ldr	r0, [pc, #20]	@ (8007d90 <MX_FATFS_Init+0x1c>)
 8007d7c:	f002 fb5a 	bl	800a434 <FATFS_LinkDriver>
 8007d80:	4603      	mov	r3, r0
 8007d82:	461a      	mov	r2, r3
 8007d84:	4b03      	ldr	r3, [pc, #12]	@ (8007d94 <MX_FATFS_Init+0x20>)
 8007d86:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007d88:	bf00      	nop
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	200010bc 	.word	0x200010bc
 8007d90:	2000000c 	.word	0x2000000c
 8007d94:	200010b8 	.word	0x200010b8

08007d98 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007d9c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	4603      	mov	r3, r0
 8007db0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8007db2:	4b06      	ldr	r3, [pc, #24]	@ (8007dcc <USER_initialize+0x24>)
 8007db4:	2201      	movs	r2, #1
 8007db6:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007db8:	4b04      	ldr	r3, [pc, #16]	@ (8007dcc <USER_initialize+0x24>)
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	20000009 	.word	0x20000009

08007dd0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8007dda:	4b06      	ldr	r3, [pc, #24]	@ (8007df4 <USER_status+0x24>)
 8007ddc:	2201      	movs	r2, #1
 8007dde:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007de0:	4b04      	ldr	r3, [pc, #16]	@ (8007df4 <USER_status+0x24>)
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	20000009 	.word	0x20000009

08007df8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60b9      	str	r1, [r7, #8]
 8007e00:	607a      	str	r2, [r7, #4]
 8007e02:	603b      	str	r3, [r7, #0]
 8007e04:	4603      	mov	r3, r0
 8007e06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8007e08:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3714      	adds	r7, #20
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b085      	sub	sp, #20
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
 8007e20:	603b      	str	r3, [r7, #0]
 8007e22:	4603      	mov	r3, r0
 8007e24:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8007e26:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3714      	adds	r7, #20
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	603a      	str	r2, [r7, #0]
 8007e3e:	71fb      	strb	r3, [r7, #7]
 8007e40:	460b      	mov	r3, r1
 8007e42:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	73fb      	strb	r3, [r7, #15]
    return res;
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
	...

08007e58 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	4603      	mov	r3, r0
 8007e60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007e62:	79fb      	ldrb	r3, [r7, #7]
 8007e64:	4a08      	ldr	r2, [pc, #32]	@ (8007e88 <disk_status+0x30>)
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	79fa      	ldrb	r2, [r7, #7]
 8007e70:	4905      	ldr	r1, [pc, #20]	@ (8007e88 <disk_status+0x30>)
 8007e72:	440a      	add	r2, r1
 8007e74:	7a12      	ldrb	r2, [r2, #8]
 8007e76:	4610      	mov	r0, r2
 8007e78:	4798      	blx	r3
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	200010e8 	.word	0x200010e8

08007e8c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	4603      	mov	r3, r0
 8007e94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007e96:	2300      	movs	r3, #0
 8007e98:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007e9a:	79fb      	ldrb	r3, [r7, #7]
 8007e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8007ed4 <disk_initialize+0x48>)
 8007e9e:	5cd3      	ldrb	r3, [r2, r3]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d111      	bne.n	8007ec8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007ea4:	79fb      	ldrb	r3, [r7, #7]
 8007ea6:	4a0b      	ldr	r2, [pc, #44]	@ (8007ed4 <disk_initialize+0x48>)
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007eac:	79fb      	ldrb	r3, [r7, #7]
 8007eae:	4a09      	ldr	r2, [pc, #36]	@ (8007ed4 <disk_initialize+0x48>)
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	79fa      	ldrb	r2, [r7, #7]
 8007eba:	4906      	ldr	r1, [pc, #24]	@ (8007ed4 <disk_initialize+0x48>)
 8007ebc:	440a      	add	r2, r1
 8007ebe:	7a12      	ldrb	r2, [r2, #8]
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	4798      	blx	r3
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	200010e8 	.word	0x200010e8

08007ed8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007ed8:	b590      	push	{r4, r7, lr}
 8007eda:	b087      	sub	sp, #28
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60b9      	str	r1, [r7, #8]
 8007ee0:	607a      	str	r2, [r7, #4]
 8007ee2:	603b      	str	r3, [r7, #0]
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007ee8:	7bfb      	ldrb	r3, [r7, #15]
 8007eea:	4a0a      	ldr	r2, [pc, #40]	@ (8007f14 <disk_read+0x3c>)
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	4413      	add	r3, r2
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	689c      	ldr	r4, [r3, #8]
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
 8007ef6:	4a07      	ldr	r2, [pc, #28]	@ (8007f14 <disk_read+0x3c>)
 8007ef8:	4413      	add	r3, r2
 8007efa:	7a18      	ldrb	r0, [r3, #8]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	68b9      	ldr	r1, [r7, #8]
 8007f02:	47a0      	blx	r4
 8007f04:	4603      	mov	r3, r0
 8007f06:	75fb      	strb	r3, [r7, #23]
  return res;
 8007f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	371c      	adds	r7, #28
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd90      	pop	{r4, r7, pc}
 8007f12:	bf00      	nop
 8007f14:	200010e8 	.word	0x200010e8

08007f18 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007f18:	b590      	push	{r4, r7, lr}
 8007f1a:	b087      	sub	sp, #28
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60b9      	str	r1, [r7, #8]
 8007f20:	607a      	str	r2, [r7, #4]
 8007f22:	603b      	str	r3, [r7, #0]
 8007f24:	4603      	mov	r3, r0
 8007f26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
 8007f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8007f54 <disk_write+0x3c>)
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	68dc      	ldr	r4, [r3, #12]
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
 8007f36:	4a07      	ldr	r2, [pc, #28]	@ (8007f54 <disk_write+0x3c>)
 8007f38:	4413      	add	r3, r2
 8007f3a:	7a18      	ldrb	r0, [r3, #8]
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	68b9      	ldr	r1, [r7, #8]
 8007f42:	47a0      	blx	r4
 8007f44:	4603      	mov	r3, r0
 8007f46:	75fb      	strb	r3, [r7, #23]
  return res;
 8007f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	371c      	adds	r7, #28
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd90      	pop	{r4, r7, pc}
 8007f52:	bf00      	nop
 8007f54:	200010e8 	.word	0x200010e8

08007f58 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	4603      	mov	r3, r0
 8007f60:	603a      	str	r2, [r7, #0]
 8007f62:	71fb      	strb	r3, [r7, #7]
 8007f64:	460b      	mov	r3, r1
 8007f66:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007f68:	79fb      	ldrb	r3, [r7, #7]
 8007f6a:	4a09      	ldr	r2, [pc, #36]	@ (8007f90 <disk_ioctl+0x38>)
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	79fa      	ldrb	r2, [r7, #7]
 8007f76:	4906      	ldr	r1, [pc, #24]	@ (8007f90 <disk_ioctl+0x38>)
 8007f78:	440a      	add	r2, r1
 8007f7a:	7a10      	ldrb	r0, [r2, #8]
 8007f7c:	79b9      	ldrb	r1, [r7, #6]
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	4798      	blx	r3
 8007f82:	4603      	mov	r3, r0
 8007f84:	73fb      	strb	r3, [r7, #15]
  return res;
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	200010e8 	.word	0x200010e8

08007f94 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007fa4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007fa8:	021b      	lsls	r3, r3, #8
 8007faa:	b21a      	sxth	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	b21b      	sxth	r3, r3
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	b21b      	sxth	r3, r3
 8007fb6:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007fb8:	89fb      	ldrh	r3, [r7, #14]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3714      	adds	r7, #20
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr

08007fc6 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b085      	sub	sp, #20
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	3303      	adds	r3, #3
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	021b      	lsls	r3, r3, #8
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	3202      	adds	r2, #2
 8007fde:	7812      	ldrb	r2, [r2, #0]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	021b      	lsls	r3, r3, #8
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	3201      	adds	r2, #1
 8007fec:	7812      	ldrb	r2, [r2, #0]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	021b      	lsls	r3, r3, #8
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	7812      	ldrb	r2, [r2, #0]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	60fb      	str	r3, [r7, #12]
	return rv;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3714      	adds	r7, #20
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	460b      	mov	r3, r1
 8008016:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	1c5a      	adds	r2, r3, #1
 800801c:	607a      	str	r2, [r7, #4]
 800801e:	887a      	ldrh	r2, [r7, #2]
 8008020:	b2d2      	uxtb	r2, r2
 8008022:	701a      	strb	r2, [r3, #0]
 8008024:	887b      	ldrh	r3, [r7, #2]
 8008026:	0a1b      	lsrs	r3, r3, #8
 8008028:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	1c5a      	adds	r2, r3, #1
 800802e:	607a      	str	r2, [r7, #4]
 8008030:	887a      	ldrh	r2, [r7, #2]
 8008032:	b2d2      	uxtb	r2, r2
 8008034:	701a      	strb	r2, [r3, #0]
}
 8008036:	bf00      	nop
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008042:	b480      	push	{r7}
 8008044:	b083      	sub	sp, #12
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	1c5a      	adds	r2, r3, #1
 8008050:	607a      	str	r2, [r7, #4]
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	b2d2      	uxtb	r2, r2
 8008056:	701a      	strb	r2, [r3, #0]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	0a1b      	lsrs	r3, r3, #8
 800805c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	1c5a      	adds	r2, r3, #1
 8008062:	607a      	str	r2, [r7, #4]
 8008064:	683a      	ldr	r2, [r7, #0]
 8008066:	b2d2      	uxtb	r2, r2
 8008068:	701a      	strb	r2, [r3, #0]
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	0a1b      	lsrs	r3, r3, #8
 800806e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	1c5a      	adds	r2, r3, #1
 8008074:	607a      	str	r2, [r7, #4]
 8008076:	683a      	ldr	r2, [r7, #0]
 8008078:	b2d2      	uxtb	r2, r2
 800807a:	701a      	strb	r2, [r3, #0]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	0a1b      	lsrs	r3, r3, #8
 8008080:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	607a      	str	r2, [r7, #4]
 8008088:	683a      	ldr	r2, [r7, #0]
 800808a:	b2d2      	uxtb	r2, r2
 800808c:	701a      	strb	r2, [r3, #0]
}
 800808e:	bf00      	nop
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr

0800809a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800809a:	b480      	push	{r7}
 800809c:	b087      	sub	sp, #28
 800809e:	af00      	add	r7, sp, #0
 80080a0:	60f8      	str	r0, [r7, #12]
 80080a2:	60b9      	str	r1, [r7, #8]
 80080a4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00d      	beq.n	80080d0 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80080b4:	693a      	ldr	r2, [r7, #16]
 80080b6:	1c53      	adds	r3, r2, #1
 80080b8:	613b      	str	r3, [r7, #16]
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	1c59      	adds	r1, r3, #1
 80080be:	6179      	str	r1, [r7, #20]
 80080c0:	7812      	ldrb	r2, [r2, #0]
 80080c2:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	3b01      	subs	r3, #1
 80080c8:	607b      	str	r3, [r7, #4]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1f1      	bne.n	80080b4 <mem_cpy+0x1a>
	}
}
 80080d0:	bf00      	nop
 80080d2:	371c      	adds	r7, #28
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80080dc:	b480      	push	{r7}
 80080de:	b087      	sub	sp, #28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	1c5a      	adds	r2, r3, #1
 80080f0:	617a      	str	r2, [r7, #20]
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	b2d2      	uxtb	r2, r2
 80080f6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	3b01      	subs	r3, #1
 80080fc:	607b      	str	r3, [r7, #4]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1f3      	bne.n	80080ec <mem_set+0x10>
}
 8008104:	bf00      	nop
 8008106:	bf00      	nop
 8008108:	371c      	adds	r7, #28
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008112:	b480      	push	{r7}
 8008114:	b089      	sub	sp, #36	@ 0x24
 8008116:	af00      	add	r7, sp, #0
 8008118:	60f8      	str	r0, [r7, #12]
 800811a:	60b9      	str	r1, [r7, #8]
 800811c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	61fb      	str	r3, [r7, #28]
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008126:	2300      	movs	r3, #0
 8008128:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	1c5a      	adds	r2, r3, #1
 800812e:	61fa      	str	r2, [r7, #28]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	4619      	mov	r1, r3
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	1c5a      	adds	r2, r3, #1
 8008138:	61ba      	str	r2, [r7, #24]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	1acb      	subs	r3, r1, r3
 800813e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	3b01      	subs	r3, #1
 8008144:	607b      	str	r3, [r7, #4]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d002      	beq.n	8008152 <mem_cmp+0x40>
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d0eb      	beq.n	800812a <mem_cmp+0x18>

	return r;
 8008152:	697b      	ldr	r3, [r7, #20]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3724      	adds	r7, #36	@ 0x24
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800816a:	e002      	b.n	8008172 <chk_chr+0x12>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	3301      	adds	r3, #1
 8008170:	607b      	str	r3, [r7, #4]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d005      	beq.n	8008186 <chk_chr+0x26>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	461a      	mov	r2, r3
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	4293      	cmp	r3, r2
 8008184:	d1f2      	bne.n	800816c <chk_chr+0xc>
	return *str;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	781b      	ldrb	r3, [r3, #0]
}
 800818a:	4618      	mov	r0, r3
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b082      	sub	sp, #8
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d009      	beq.n	80081b8 <lock_fs+0x22>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	4618      	mov	r0, r3
 80081aa:	f002 f979 	bl	800a4a0 <ff_req_grant>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d001      	beq.n	80081b8 <lock_fs+0x22>
 80081b4:	2301      	movs	r3, #1
 80081b6:	e000      	b.n	80081ba <lock_fs+0x24>
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b082      	sub	sp, #8
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	460b      	mov	r3, r1
 80081cc:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00d      	beq.n	80081f0 <unlock_fs+0x2e>
 80081d4:	78fb      	ldrb	r3, [r7, #3]
 80081d6:	2b0c      	cmp	r3, #12
 80081d8:	d00a      	beq.n	80081f0 <unlock_fs+0x2e>
 80081da:	78fb      	ldrb	r3, [r7, #3]
 80081dc:	2b0b      	cmp	r3, #11
 80081de:	d007      	beq.n	80081f0 <unlock_fs+0x2e>
 80081e0:	78fb      	ldrb	r3, [r7, #3]
 80081e2:	2b0f      	cmp	r3, #15
 80081e4:	d004      	beq.n	80081f0 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f002 f96d 	bl	800a4ca <ff_rel_grant>
	}
}
 80081f0:	bf00      	nop
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008202:	2300      	movs	r3, #0
 8008204:	60bb      	str	r3, [r7, #8]
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	60fb      	str	r3, [r7, #12]
 800820a:	e029      	b.n	8008260 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800820c:	4a27      	ldr	r2, [pc, #156]	@ (80082ac <chk_lock+0xb4>)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	011b      	lsls	r3, r3, #4
 8008212:	4413      	add	r3, r2
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d01d      	beq.n	8008256 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800821a:	4a24      	ldr	r2, [pc, #144]	@ (80082ac <chk_lock+0xb4>)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	011b      	lsls	r3, r3, #4
 8008220:	4413      	add	r3, r2
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	429a      	cmp	r2, r3
 800822a:	d116      	bne.n	800825a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800822c:	4a1f      	ldr	r2, [pc, #124]	@ (80082ac <chk_lock+0xb4>)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	011b      	lsls	r3, r3, #4
 8008232:	4413      	add	r3, r2
 8008234:	3304      	adds	r3, #4
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800823c:	429a      	cmp	r2, r3
 800823e:	d10c      	bne.n	800825a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008240:	4a1a      	ldr	r2, [pc, #104]	@ (80082ac <chk_lock+0xb4>)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	011b      	lsls	r3, r3, #4
 8008246:	4413      	add	r3, r2
 8008248:	3308      	adds	r3, #8
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008250:	429a      	cmp	r2, r3
 8008252:	d102      	bne.n	800825a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008254:	e007      	b.n	8008266 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008256:	2301      	movs	r3, #1
 8008258:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	3301      	adds	r3, #1
 800825e:	60fb      	str	r3, [r7, #12]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2b01      	cmp	r3, #1
 8008264:	d9d2      	bls.n	800820c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2b02      	cmp	r3, #2
 800826a:	d109      	bne.n	8008280 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d102      	bne.n	8008278 <chk_lock+0x80>
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	2b02      	cmp	r3, #2
 8008276:	d101      	bne.n	800827c <chk_lock+0x84>
 8008278:	2300      	movs	r3, #0
 800827a:	e010      	b.n	800829e <chk_lock+0xa6>
 800827c:	2312      	movs	r3, #18
 800827e:	e00e      	b.n	800829e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d108      	bne.n	8008298 <chk_lock+0xa0>
 8008286:	4a09      	ldr	r2, [pc, #36]	@ (80082ac <chk_lock+0xb4>)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	011b      	lsls	r3, r3, #4
 800828c:	4413      	add	r3, r2
 800828e:	330c      	adds	r3, #12
 8008290:	881b      	ldrh	r3, [r3, #0]
 8008292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008296:	d101      	bne.n	800829c <chk_lock+0xa4>
 8008298:	2310      	movs	r3, #16
 800829a:	e000      	b.n	800829e <chk_lock+0xa6>
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	200010c8 	.word	0x200010c8

080082b0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80082b6:	2300      	movs	r3, #0
 80082b8:	607b      	str	r3, [r7, #4]
 80082ba:	e002      	b.n	80082c2 <enq_lock+0x12>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	3301      	adds	r3, #1
 80082c0:	607b      	str	r3, [r7, #4]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d806      	bhi.n	80082d6 <enq_lock+0x26>
 80082c8:	4a09      	ldr	r2, [pc, #36]	@ (80082f0 <enq_lock+0x40>)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	011b      	lsls	r3, r3, #4
 80082ce:	4413      	add	r3, r2
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1f2      	bne.n	80082bc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2b02      	cmp	r3, #2
 80082da:	bf14      	ite	ne
 80082dc:	2301      	movne	r3, #1
 80082de:	2300      	moveq	r3, #0
 80082e0:	b2db      	uxtb	r3, r3
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	370c      	adds	r7, #12
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	200010c8 	.word	0x200010c8

080082f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80082fe:	2300      	movs	r3, #0
 8008300:	60fb      	str	r3, [r7, #12]
 8008302:	e01f      	b.n	8008344 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008304:	4a41      	ldr	r2, [pc, #260]	@ (800840c <inc_lock+0x118>)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	011b      	lsls	r3, r3, #4
 800830a:	4413      	add	r3, r2
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	429a      	cmp	r2, r3
 8008314:	d113      	bne.n	800833e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008316:	4a3d      	ldr	r2, [pc, #244]	@ (800840c <inc_lock+0x118>)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	011b      	lsls	r3, r3, #4
 800831c:	4413      	add	r3, r2
 800831e:	3304      	adds	r3, #4
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008326:	429a      	cmp	r2, r3
 8008328:	d109      	bne.n	800833e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800832a:	4a38      	ldr	r2, [pc, #224]	@ (800840c <inc_lock+0x118>)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	011b      	lsls	r3, r3, #4
 8008330:	4413      	add	r3, r2
 8008332:	3308      	adds	r3, #8
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800833a:	429a      	cmp	r2, r3
 800833c:	d006      	beq.n	800834c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	3301      	adds	r3, #1
 8008342:	60fb      	str	r3, [r7, #12]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2b01      	cmp	r3, #1
 8008348:	d9dc      	bls.n	8008304 <inc_lock+0x10>
 800834a:	e000      	b.n	800834e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800834c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2b02      	cmp	r3, #2
 8008352:	d132      	bne.n	80083ba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008354:	2300      	movs	r3, #0
 8008356:	60fb      	str	r3, [r7, #12]
 8008358:	e002      	b.n	8008360 <inc_lock+0x6c>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	3301      	adds	r3, #1
 800835e:	60fb      	str	r3, [r7, #12]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2b01      	cmp	r3, #1
 8008364:	d806      	bhi.n	8008374 <inc_lock+0x80>
 8008366:	4a29      	ldr	r2, [pc, #164]	@ (800840c <inc_lock+0x118>)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	011b      	lsls	r3, r3, #4
 800836c:	4413      	add	r3, r2
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1f2      	bne.n	800835a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2b02      	cmp	r3, #2
 8008378:	d101      	bne.n	800837e <inc_lock+0x8a>
 800837a:	2300      	movs	r3, #0
 800837c:	e040      	b.n	8008400 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	4922      	ldr	r1, [pc, #136]	@ (800840c <inc_lock+0x118>)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	011b      	lsls	r3, r3, #4
 8008388:	440b      	add	r3, r1
 800838a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	689a      	ldr	r2, [r3, #8]
 8008390:	491e      	ldr	r1, [pc, #120]	@ (800840c <inc_lock+0x118>)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	011b      	lsls	r3, r3, #4
 8008396:	440b      	add	r3, r1
 8008398:	3304      	adds	r3, #4
 800839a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	695a      	ldr	r2, [r3, #20]
 80083a0:	491a      	ldr	r1, [pc, #104]	@ (800840c <inc_lock+0x118>)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	011b      	lsls	r3, r3, #4
 80083a6:	440b      	add	r3, r1
 80083a8:	3308      	adds	r3, #8
 80083aa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80083ac:	4a17      	ldr	r2, [pc, #92]	@ (800840c <inc_lock+0x118>)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	011b      	lsls	r3, r3, #4
 80083b2:	4413      	add	r3, r2
 80083b4:	330c      	adds	r3, #12
 80083b6:	2200      	movs	r2, #0
 80083b8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d009      	beq.n	80083d4 <inc_lock+0xe0>
 80083c0:	4a12      	ldr	r2, [pc, #72]	@ (800840c <inc_lock+0x118>)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	011b      	lsls	r3, r3, #4
 80083c6:	4413      	add	r3, r2
 80083c8:	330c      	adds	r3, #12
 80083ca:	881b      	ldrh	r3, [r3, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d001      	beq.n	80083d4 <inc_lock+0xe0>
 80083d0:	2300      	movs	r3, #0
 80083d2:	e015      	b.n	8008400 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d108      	bne.n	80083ec <inc_lock+0xf8>
 80083da:	4a0c      	ldr	r2, [pc, #48]	@ (800840c <inc_lock+0x118>)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	011b      	lsls	r3, r3, #4
 80083e0:	4413      	add	r3, r2
 80083e2:	330c      	adds	r3, #12
 80083e4:	881b      	ldrh	r3, [r3, #0]
 80083e6:	3301      	adds	r3, #1
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	e001      	b.n	80083f0 <inc_lock+0xfc>
 80083ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80083f0:	4906      	ldr	r1, [pc, #24]	@ (800840c <inc_lock+0x118>)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	011b      	lsls	r3, r3, #4
 80083f6:	440b      	add	r3, r1
 80083f8:	330c      	adds	r3, #12
 80083fa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	3301      	adds	r3, #1
}
 8008400:	4618      	mov	r0, r3
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr
 800840c:	200010c8 	.word	0x200010c8

08008410 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	3b01      	subs	r3, #1
 800841c:	607b      	str	r3, [r7, #4]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d825      	bhi.n	8008470 <dec_lock+0x60>
		n = Files[i].ctr;
 8008424:	4a17      	ldr	r2, [pc, #92]	@ (8008484 <dec_lock+0x74>)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	011b      	lsls	r3, r3, #4
 800842a:	4413      	add	r3, r2
 800842c:	330c      	adds	r3, #12
 800842e:	881b      	ldrh	r3, [r3, #0]
 8008430:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008432:	89fb      	ldrh	r3, [r7, #14]
 8008434:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008438:	d101      	bne.n	800843e <dec_lock+0x2e>
 800843a:	2300      	movs	r3, #0
 800843c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800843e:	89fb      	ldrh	r3, [r7, #14]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d002      	beq.n	800844a <dec_lock+0x3a>
 8008444:	89fb      	ldrh	r3, [r7, #14]
 8008446:	3b01      	subs	r3, #1
 8008448:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800844a:	4a0e      	ldr	r2, [pc, #56]	@ (8008484 <dec_lock+0x74>)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	011b      	lsls	r3, r3, #4
 8008450:	4413      	add	r3, r2
 8008452:	330c      	adds	r3, #12
 8008454:	89fa      	ldrh	r2, [r7, #14]
 8008456:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008458:	89fb      	ldrh	r3, [r7, #14]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d105      	bne.n	800846a <dec_lock+0x5a>
 800845e:	4a09      	ldr	r2, [pc, #36]	@ (8008484 <dec_lock+0x74>)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	011b      	lsls	r3, r3, #4
 8008464:	4413      	add	r3, r2
 8008466:	2200      	movs	r2, #0
 8008468:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	737b      	strb	r3, [r7, #13]
 800846e:	e001      	b.n	8008474 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008470:	2302      	movs	r3, #2
 8008472:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008474:	7b7b      	ldrb	r3, [r7, #13]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	200010c8 	.word	0x200010c8

08008488 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008490:	2300      	movs	r3, #0
 8008492:	60fb      	str	r3, [r7, #12]
 8008494:	e010      	b.n	80084b8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008496:	4a0d      	ldr	r2, [pc, #52]	@ (80084cc <clear_lock+0x44>)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	011b      	lsls	r3, r3, #4
 800849c:	4413      	add	r3, r2
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d105      	bne.n	80084b2 <clear_lock+0x2a>
 80084a6:	4a09      	ldr	r2, [pc, #36]	@ (80084cc <clear_lock+0x44>)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	4413      	add	r3, r2
 80084ae:	2200      	movs	r2, #0
 80084b0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	3301      	adds	r3, #1
 80084b6:	60fb      	str	r3, [r7, #12]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d9eb      	bls.n	8008496 <clear_lock+0xe>
	}
}
 80084be:	bf00      	nop
 80084c0:	bf00      	nop
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	200010c8 	.word	0x200010c8

080084d0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80084d8:	2300      	movs	r3, #0
 80084da:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	78db      	ldrb	r3, [r3, #3]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d034      	beq.n	800854e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084e8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	7858      	ldrb	r0, [r3, #1]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80084f4:	2301      	movs	r3, #1
 80084f6:	697a      	ldr	r2, [r7, #20]
 80084f8:	f7ff fd0e 	bl	8007f18 <disk_write>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d002      	beq.n	8008508 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008502:	2301      	movs	r3, #1
 8008504:	73fb      	strb	r3, [r7, #15]
 8008506:	e022      	b.n	800854e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	1ad2      	subs	r2, r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	69db      	ldr	r3, [r3, #28]
 800851a:	429a      	cmp	r2, r3
 800851c:	d217      	bcs.n	800854e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	789b      	ldrb	r3, [r3, #2]
 8008522:	613b      	str	r3, [r7, #16]
 8008524:	e010      	b.n	8008548 <sync_window+0x78>
					wsect += fs->fsize;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	69db      	ldr	r3, [r3, #28]
 800852a:	697a      	ldr	r2, [r7, #20]
 800852c:	4413      	add	r3, r2
 800852e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	7858      	ldrb	r0, [r3, #1]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800853a:	2301      	movs	r3, #1
 800853c:	697a      	ldr	r2, [r7, #20]
 800853e:	f7ff fceb 	bl	8007f18 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	3b01      	subs	r3, #1
 8008546:	613b      	str	r3, [r7, #16]
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d8eb      	bhi.n	8008526 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800854e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3718      	adds	r7, #24
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	429a      	cmp	r2, r3
 800856e:	d01b      	beq.n	80085a8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7ff ffad 	bl	80084d0 <sync_window>
 8008576:	4603      	mov	r3, r0
 8008578:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800857a:	7bfb      	ldrb	r3, [r7, #15]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d113      	bne.n	80085a8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	7858      	ldrb	r0, [r3, #1]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800858a:	2301      	movs	r3, #1
 800858c:	683a      	ldr	r2, [r7, #0]
 800858e:	f7ff fca3 	bl	8007ed8 <disk_read>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d004      	beq.n	80085a2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008598:	f04f 33ff 	mov.w	r3, #4294967295
 800859c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800859e:	2301      	movs	r3, #1
 80085a0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
	...

080085b4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f7ff ff87 	bl	80084d0 <sync_window>
 80085c2:	4603      	mov	r3, r0
 80085c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80085c6:	7bfb      	ldrb	r3, [r7, #15]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d158      	bne.n	800867e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	2b03      	cmp	r3, #3
 80085d2:	d148      	bne.n	8008666 <sync_fs+0xb2>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	791b      	ldrb	r3, [r3, #4]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d144      	bne.n	8008666 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	3334      	adds	r3, #52	@ 0x34
 80085e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80085e4:	2100      	movs	r1, #0
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7ff fd78 	bl	80080dc <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	3334      	adds	r3, #52	@ 0x34
 80085f0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80085f4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7ff fd07 	bl	800800c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	3334      	adds	r3, #52	@ 0x34
 8008602:	4921      	ldr	r1, [pc, #132]	@ (8008688 <sync_fs+0xd4>)
 8008604:	4618      	mov	r0, r3
 8008606:	f7ff fd1c 	bl	8008042 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	3334      	adds	r3, #52	@ 0x34
 800860e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008612:	491e      	ldr	r1, [pc, #120]	@ (800868c <sync_fs+0xd8>)
 8008614:	4618      	mov	r0, r3
 8008616:	f7ff fd14 	bl	8008042 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	3334      	adds	r3, #52	@ 0x34
 800861e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	695b      	ldr	r3, [r3, #20]
 8008626:	4619      	mov	r1, r3
 8008628:	4610      	mov	r0, r2
 800862a:	f7ff fd0a 	bl	8008042 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	3334      	adds	r3, #52	@ 0x34
 8008632:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	4619      	mov	r1, r3
 800863c:	4610      	mov	r0, r2
 800863e:	f7ff fd00 	bl	8008042 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a1b      	ldr	r3, [r3, #32]
 8008646:	1c5a      	adds	r2, r3, #1
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	7858      	ldrb	r0, [r3, #1]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800865a:	2301      	movs	r3, #1
 800865c:	f7ff fc5c 	bl	8007f18 <disk_write>
			fs->fsi_flag = 0;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	785b      	ldrb	r3, [r3, #1]
 800866a:	2200      	movs	r2, #0
 800866c:	2100      	movs	r1, #0
 800866e:	4618      	mov	r0, r3
 8008670:	f7ff fc72 	bl	8007f58 <disk_ioctl>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <sync_fs+0xca>
 800867a:	2301      	movs	r3, #1
 800867c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800867e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	41615252 	.word	0x41615252
 800868c:	61417272 	.word	0x61417272

08008690 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	3b02      	subs	r3, #2
 800869e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	3b02      	subs	r3, #2
 80086a6:	683a      	ldr	r2, [r7, #0]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d301      	bcc.n	80086b0 <clust2sect+0x20>
 80086ac:	2300      	movs	r3, #0
 80086ae:	e008      	b.n	80086c2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	895b      	ldrh	r3, [r3, #10]
 80086b4:	461a      	mov	r2, r3
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	fb03 f202 	mul.w	r2, r3, r2
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086c0:	4413      	add	r3, r2
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b086      	sub	sp, #24
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d904      	bls.n	80086ee <get_fat+0x20>
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	699b      	ldr	r3, [r3, #24]
 80086e8:	683a      	ldr	r2, [r7, #0]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d302      	bcc.n	80086f4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80086ee:	2301      	movs	r3, #1
 80086f0:	617b      	str	r3, [r7, #20]
 80086f2:	e08e      	b.n	8008812 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80086f4:	f04f 33ff 	mov.w	r3, #4294967295
 80086f8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	2b03      	cmp	r3, #3
 8008700:	d061      	beq.n	80087c6 <get_fat+0xf8>
 8008702:	2b03      	cmp	r3, #3
 8008704:	dc7b      	bgt.n	80087fe <get_fat+0x130>
 8008706:	2b01      	cmp	r3, #1
 8008708:	d002      	beq.n	8008710 <get_fat+0x42>
 800870a:	2b02      	cmp	r3, #2
 800870c:	d041      	beq.n	8008792 <get_fat+0xc4>
 800870e:	e076      	b.n	80087fe <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	60fb      	str	r3, [r7, #12]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	085b      	lsrs	r3, r3, #1
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	4413      	add	r3, r2
 800871c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	0a5b      	lsrs	r3, r3, #9
 8008726:	4413      	add	r3, r2
 8008728:	4619      	mov	r1, r3
 800872a:	6938      	ldr	r0, [r7, #16]
 800872c:	f7ff ff14 	bl	8008558 <move_window>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d166      	bne.n	8008804 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	1c5a      	adds	r2, r3, #1
 800873a:	60fa      	str	r2, [r7, #12]
 800873c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008740:	693a      	ldr	r2, [r7, #16]
 8008742:	4413      	add	r3, r2
 8008744:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008748:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	0a5b      	lsrs	r3, r3, #9
 8008752:	4413      	add	r3, r2
 8008754:	4619      	mov	r1, r3
 8008756:	6938      	ldr	r0, [r7, #16]
 8008758:	f7ff fefe 	bl	8008558 <move_window>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d152      	bne.n	8008808 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008768:	693a      	ldr	r2, [r7, #16]
 800876a:	4413      	add	r3, r2
 800876c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008770:	021b      	lsls	r3, r3, #8
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	4313      	orrs	r3, r2
 8008776:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	2b00      	cmp	r3, #0
 8008780:	d002      	beq.n	8008788 <get_fat+0xba>
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	091b      	lsrs	r3, r3, #4
 8008786:	e002      	b.n	800878e <get_fat+0xc0>
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800878e:	617b      	str	r3, [r7, #20]
			break;
 8008790:	e03f      	b.n	8008812 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	0a1b      	lsrs	r3, r3, #8
 800879a:	4413      	add	r3, r2
 800879c:	4619      	mov	r1, r3
 800879e:	6938      	ldr	r0, [r7, #16]
 80087a0:	f7ff feda 	bl	8008558 <move_window>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d130      	bne.n	800880c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	005b      	lsls	r3, r3, #1
 80087b4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80087b8:	4413      	add	r3, r2
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7ff fbea 	bl	8007f94 <ld_word>
 80087c0:	4603      	mov	r3, r0
 80087c2:	617b      	str	r3, [r7, #20]
			break;
 80087c4:	e025      	b.n	8008812 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	09db      	lsrs	r3, r3, #7
 80087ce:	4413      	add	r3, r2
 80087d0:	4619      	mov	r1, r3
 80087d2:	6938      	ldr	r0, [r7, #16]
 80087d4:	f7ff fec0 	bl	8008558 <move_window>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d118      	bne.n	8008810 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80087ec:	4413      	add	r3, r2
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7ff fbe9 	bl	8007fc6 <ld_dword>
 80087f4:	4603      	mov	r3, r0
 80087f6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80087fa:	617b      	str	r3, [r7, #20]
			break;
 80087fc:	e009      	b.n	8008812 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80087fe:	2301      	movs	r3, #1
 8008800:	617b      	str	r3, [r7, #20]
 8008802:	e006      	b.n	8008812 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008804:	bf00      	nop
 8008806:	e004      	b.n	8008812 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008808:	bf00      	nop
 800880a:	e002      	b.n	8008812 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800880c:	bf00      	nop
 800880e:	e000      	b.n	8008812 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008810:	bf00      	nop
		}
	}

	return val;
 8008812:	697b      	ldr	r3, [r7, #20]
}
 8008814:	4618      	mov	r0, r3
 8008816:	3718      	adds	r7, #24
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800881c:	b590      	push	{r4, r7, lr}
 800881e:	b089      	sub	sp, #36	@ 0x24
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008828:	2302      	movs	r3, #2
 800882a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	2b01      	cmp	r3, #1
 8008830:	f240 80d9 	bls.w	80089e6 <put_fat+0x1ca>
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	68ba      	ldr	r2, [r7, #8]
 800883a:	429a      	cmp	r2, r3
 800883c:	f080 80d3 	bcs.w	80089e6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	2b03      	cmp	r3, #3
 8008846:	f000 8096 	beq.w	8008976 <put_fat+0x15a>
 800884a:	2b03      	cmp	r3, #3
 800884c:	f300 80cb 	bgt.w	80089e6 <put_fat+0x1ca>
 8008850:	2b01      	cmp	r3, #1
 8008852:	d002      	beq.n	800885a <put_fat+0x3e>
 8008854:	2b02      	cmp	r3, #2
 8008856:	d06e      	beq.n	8008936 <put_fat+0x11a>
 8008858:	e0c5      	b.n	80089e6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	61bb      	str	r3, [r7, #24]
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	085b      	lsrs	r3, r3, #1
 8008862:	69ba      	ldr	r2, [r7, #24]
 8008864:	4413      	add	r3, r2
 8008866:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	0a5b      	lsrs	r3, r3, #9
 8008870:	4413      	add	r3, r2
 8008872:	4619      	mov	r1, r3
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f7ff fe6f 	bl	8008558 <move_window>
 800887a:	4603      	mov	r3, r0
 800887c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800887e:	7ffb      	ldrb	r3, [r7, #31]
 8008880:	2b00      	cmp	r3, #0
 8008882:	f040 80a9 	bne.w	80089d8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	1c59      	adds	r1, r3, #1
 8008890:	61b9      	str	r1, [r7, #24]
 8008892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008896:	4413      	add	r3, r2
 8008898:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	f003 0301 	and.w	r3, r3, #1
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00d      	beq.n	80088c0 <put_fat+0xa4>
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	b25b      	sxtb	r3, r3
 80088aa:	f003 030f 	and.w	r3, r3, #15
 80088ae:	b25a      	sxtb	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	b25b      	sxtb	r3, r3
 80088b4:	011b      	lsls	r3, r3, #4
 80088b6:	b25b      	sxtb	r3, r3
 80088b8:	4313      	orrs	r3, r2
 80088ba:	b25b      	sxtb	r3, r3
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	e001      	b.n	80088c4 <put_fat+0xa8>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	697a      	ldr	r2, [r7, #20]
 80088c6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2201      	movs	r2, #1
 80088cc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	0a5b      	lsrs	r3, r3, #9
 80088d6:	4413      	add	r3, r2
 80088d8:	4619      	mov	r1, r3
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f7ff fe3c 	bl	8008558 <move_window>
 80088e0:	4603      	mov	r3, r0
 80088e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80088e4:	7ffb      	ldrb	r3, [r7, #31]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d178      	bne.n	80089dc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f6:	4413      	add	r3, r2
 80088f8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	f003 0301 	and.w	r3, r3, #1
 8008900:	2b00      	cmp	r3, #0
 8008902:	d003      	beq.n	800890c <put_fat+0xf0>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	091b      	lsrs	r3, r3, #4
 8008908:	b2db      	uxtb	r3, r3
 800890a:	e00e      	b.n	800892a <put_fat+0x10e>
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	b25b      	sxtb	r3, r3
 8008912:	f023 030f 	bic.w	r3, r3, #15
 8008916:	b25a      	sxtb	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	0a1b      	lsrs	r3, r3, #8
 800891c:	b25b      	sxtb	r3, r3
 800891e:	f003 030f 	and.w	r3, r3, #15
 8008922:	b25b      	sxtb	r3, r3
 8008924:	4313      	orrs	r3, r2
 8008926:	b25b      	sxtb	r3, r3
 8008928:	b2db      	uxtb	r3, r3
 800892a:	697a      	ldr	r2, [r7, #20]
 800892c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2201      	movs	r2, #1
 8008932:	70da      	strb	r2, [r3, #3]
			break;
 8008934:	e057      	b.n	80089e6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	0a1b      	lsrs	r3, r3, #8
 800893e:	4413      	add	r3, r2
 8008940:	4619      	mov	r1, r3
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f7ff fe08 	bl	8008558 <move_window>
 8008948:	4603      	mov	r3, r0
 800894a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800894c:	7ffb      	ldrb	r3, [r7, #31]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d146      	bne.n	80089e0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	005b      	lsls	r3, r3, #1
 800895c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008960:	4413      	add	r3, r2
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	b292      	uxth	r2, r2
 8008966:	4611      	mov	r1, r2
 8008968:	4618      	mov	r0, r3
 800896a:	f7ff fb4f 	bl	800800c <st_word>
			fs->wflag = 1;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2201      	movs	r2, #1
 8008972:	70da      	strb	r2, [r3, #3]
			break;
 8008974:	e037      	b.n	80089e6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	09db      	lsrs	r3, r3, #7
 800897e:	4413      	add	r3, r2
 8008980:	4619      	mov	r1, r3
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f7ff fde8 	bl	8008558 <move_window>
 8008988:	4603      	mov	r3, r0
 800898a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800898c:	7ffb      	ldrb	r3, [r7, #31]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d128      	bne.n	80089e4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80089a6:	4413      	add	r3, r2
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7ff fb0c 	bl	8007fc6 <ld_dword>
 80089ae:	4603      	mov	r3, r0
 80089b0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80089b4:	4323      	orrs	r3, r4
 80089b6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80089c6:	4413      	add	r3, r2
 80089c8:	6879      	ldr	r1, [r7, #4]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7ff fb39 	bl	8008042 <st_dword>
			fs->wflag = 1;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2201      	movs	r2, #1
 80089d4:	70da      	strb	r2, [r3, #3]
			break;
 80089d6:	e006      	b.n	80089e6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80089d8:	bf00      	nop
 80089da:	e004      	b.n	80089e6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80089dc:	bf00      	nop
 80089de:	e002      	b.n	80089e6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80089e0:	bf00      	nop
 80089e2:	e000      	b.n	80089e6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80089e4:	bf00      	nop
		}
	}
	return res;
 80089e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3724      	adds	r7, #36	@ 0x24
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd90      	pop	{r4, r7, pc}

080089f0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b088      	sub	sp, #32
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80089fc:	2300      	movs	r3, #0
 80089fe:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d904      	bls.n	8008a16 <remove_chain+0x26>
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	699b      	ldr	r3, [r3, #24]
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d301      	bcc.n	8008a1a <remove_chain+0x2a>
 8008a16:	2302      	movs	r3, #2
 8008a18:	e04b      	b.n	8008ab2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00c      	beq.n	8008a3a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008a20:	f04f 32ff 	mov.w	r2, #4294967295
 8008a24:	6879      	ldr	r1, [r7, #4]
 8008a26:	69b8      	ldr	r0, [r7, #24]
 8008a28:	f7ff fef8 	bl	800881c <put_fat>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008a30:	7ffb      	ldrb	r3, [r7, #31]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <remove_chain+0x4a>
 8008a36:	7ffb      	ldrb	r3, [r7, #31]
 8008a38:	e03b      	b.n	8008ab2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008a3a:	68b9      	ldr	r1, [r7, #8]
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f7ff fe46 	bl	80086ce <get_fat>
 8008a42:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d031      	beq.n	8008aae <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d101      	bne.n	8008a54 <remove_chain+0x64>
 8008a50:	2302      	movs	r3, #2
 8008a52:	e02e      	b.n	8008ab2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a5a:	d101      	bne.n	8008a60 <remove_chain+0x70>
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e028      	b.n	8008ab2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008a60:	2200      	movs	r2, #0
 8008a62:	68b9      	ldr	r1, [r7, #8]
 8008a64:	69b8      	ldr	r0, [r7, #24]
 8008a66:	f7ff fed9 	bl	800881c <put_fat>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008a6e:	7ffb      	ldrb	r3, [r7, #31]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <remove_chain+0x88>
 8008a74:	7ffb      	ldrb	r3, [r7, #31]
 8008a76:	e01c      	b.n	8008ab2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	695a      	ldr	r2, [r3, #20]
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	3b02      	subs	r3, #2
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d20b      	bcs.n	8008a9e <remove_chain+0xae>
			fs->free_clst++;
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	1c5a      	adds	r2, r3, #1
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	791b      	ldrb	r3, [r3, #4]
 8008a94:	f043 0301 	orr.w	r3, r3, #1
 8008a98:	b2da      	uxtb	r2, r3
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d3c6      	bcc.n	8008a3a <remove_chain+0x4a>
 8008aac:	e000      	b.n	8008ab0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008aae:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3720      	adds	r7, #32
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b088      	sub	sp, #32
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
 8008ac2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10d      	bne.n	8008aec <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d004      	beq.n	8008ae6 <create_chain+0x2c>
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	699b      	ldr	r3, [r3, #24]
 8008ae0:	69ba      	ldr	r2, [r7, #24]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d31b      	bcc.n	8008b1e <create_chain+0x64>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	61bb      	str	r3, [r7, #24]
 8008aea:	e018      	b.n	8008b1e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f7ff fded 	bl	80086ce <get_fat>
 8008af4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d801      	bhi.n	8008b00 <create_chain+0x46>
 8008afc:	2301      	movs	r3, #1
 8008afe:	e070      	b.n	8008be2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b06:	d101      	bne.n	8008b0c <create_chain+0x52>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	e06a      	b.n	8008be2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	699b      	ldr	r3, [r3, #24]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d201      	bcs.n	8008b1a <create_chain+0x60>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	e063      	b.n	8008be2 <create_chain+0x128>
		scl = clst;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	3301      	adds	r3, #1
 8008b26:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	699b      	ldr	r3, [r3, #24]
 8008b2c:	69fa      	ldr	r2, [r7, #28]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d307      	bcc.n	8008b42 <create_chain+0x88>
				ncl = 2;
 8008b32:	2302      	movs	r3, #2
 8008b34:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008b36:	69fa      	ldr	r2, [r7, #28]
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d901      	bls.n	8008b42 <create_chain+0x88>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	e04f      	b.n	8008be2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008b42:	69f9      	ldr	r1, [r7, #28]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f7ff fdc2 	bl	80086ce <get_fat>
 8008b4a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00e      	beq.n	8008b70 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d003      	beq.n	8008b60 <create_chain+0xa6>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b5e:	d101      	bne.n	8008b64 <create_chain+0xaa>
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	e03e      	b.n	8008be2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008b64:	69fa      	ldr	r2, [r7, #28]
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d1da      	bne.n	8008b22 <create_chain+0x68>
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	e038      	b.n	8008be2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008b70:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008b72:	f04f 32ff 	mov.w	r2, #4294967295
 8008b76:	69f9      	ldr	r1, [r7, #28]
 8008b78:	6938      	ldr	r0, [r7, #16]
 8008b7a:	f7ff fe4f 	bl	800881c <put_fat>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008b82:	7dfb      	ldrb	r3, [r7, #23]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d109      	bne.n	8008b9c <create_chain+0xe2>
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d006      	beq.n	8008b9c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008b8e:	69fa      	ldr	r2, [r7, #28]
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	6938      	ldr	r0, [r7, #16]
 8008b94:	f7ff fe42 	bl	800881c <put_fat>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008b9c:	7dfb      	ldrb	r3, [r7, #23]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d116      	bne.n	8008bd0 <create_chain+0x116>
		fs->last_clst = ncl;
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	69fa      	ldr	r2, [r7, #28]
 8008ba6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	695a      	ldr	r2, [r3, #20]
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	699b      	ldr	r3, [r3, #24]
 8008bb0:	3b02      	subs	r3, #2
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d804      	bhi.n	8008bc0 <create_chain+0x106>
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	695b      	ldr	r3, [r3, #20]
 8008bba:	1e5a      	subs	r2, r3, #1
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	791b      	ldrb	r3, [r3, #4]
 8008bc4:	f043 0301 	orr.w	r3, r3, #1
 8008bc8:	b2da      	uxtb	r2, r3
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	711a      	strb	r2, [r3, #4]
 8008bce:	e007      	b.n	8008be0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008bd0:	7dfb      	ldrb	r3, [r7, #23]
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d102      	bne.n	8008bdc <create_chain+0x122>
 8008bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8008bda:	e000      	b.n	8008bde <create_chain+0x124>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008be0:	69fb      	ldr	r3, [r7, #28]
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3720      	adds	r7, #32
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b087      	sub	sp, #28
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bfe:	3304      	adds	r3, #4
 8008c00:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	0a5b      	lsrs	r3, r3, #9
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	8952      	ldrh	r2, [r2, #10]
 8008c0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c0e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	1d1a      	adds	r2, r3, #4
 8008c14:	613a      	str	r2, [r7, #16]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d101      	bne.n	8008c24 <clmt_clust+0x3a>
 8008c20:	2300      	movs	r3, #0
 8008c22:	e010      	b.n	8008c46 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008c24:	697a      	ldr	r2, [r7, #20]
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d307      	bcc.n	8008c3c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	617b      	str	r3, [r7, #20]
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	3304      	adds	r3, #4
 8008c38:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008c3a:	e7e9      	b.n	8008c10 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008c3c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	4413      	add	r3, r2
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	371c      	adds	r7, #28
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr

08008c52 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b086      	sub	sp, #24
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
 8008c5a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c68:	d204      	bcs.n	8008c74 <dir_sdi+0x22>
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	f003 031f 	and.w	r3, r3, #31
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008c74:	2302      	movs	r3, #2
 8008c76:	e063      	b.n	8008d40 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	683a      	ldr	r2, [r7, #0]
 8008c7c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d106      	bne.n	8008c98 <dir_sdi+0x46>
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d902      	bls.n	8008c98 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c96:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10c      	bne.n	8008cb8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	095b      	lsrs	r3, r3, #5
 8008ca2:	693a      	ldr	r2, [r7, #16]
 8008ca4:	8912      	ldrh	r2, [r2, #8]
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d301      	bcc.n	8008cae <dir_sdi+0x5c>
 8008caa:	2302      	movs	r3, #2
 8008cac:	e048      	b.n	8008d40 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	61da      	str	r2, [r3, #28]
 8008cb6:	e029      	b.n	8008d0c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	895b      	ldrh	r3, [r3, #10]
 8008cbc:	025b      	lsls	r3, r3, #9
 8008cbe:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008cc0:	e019      	b.n	8008cf6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6979      	ldr	r1, [r7, #20]
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7ff fd01 	bl	80086ce <get_fat>
 8008ccc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd4:	d101      	bne.n	8008cda <dir_sdi+0x88>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e032      	b.n	8008d40 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d904      	bls.n	8008cea <dir_sdi+0x98>
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	697a      	ldr	r2, [r7, #20]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d301      	bcc.n	8008cee <dir_sdi+0x9c>
 8008cea:	2302      	movs	r3, #2
 8008cec:	e028      	b.n	8008d40 <dir_sdi+0xee>
			ofs -= csz;
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008cf6:	683a      	ldr	r2, [r7, #0]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d2e1      	bcs.n	8008cc2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008cfe:	6979      	ldr	r1, [r7, #20]
 8008d00:	6938      	ldr	r0, [r7, #16]
 8008d02:	f7ff fcc5 	bl	8008690 <clust2sect>
 8008d06:	4602      	mov	r2, r0
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	69db      	ldr	r3, [r3, #28]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d101      	bne.n	8008d1e <dir_sdi+0xcc>
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	e010      	b.n	8008d40 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	69da      	ldr	r2, [r3, #28]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	0a5b      	lsrs	r3, r3, #9
 8008d26:	441a      	add	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d38:	441a      	add	r2, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3718      	adds	r7, #24
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b086      	sub	sp, #24
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	695b      	ldr	r3, [r3, #20]
 8008d5c:	3320      	adds	r3, #32
 8008d5e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	69db      	ldr	r3, [r3, #28]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d003      	beq.n	8008d70 <dir_next+0x28>
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d6e:	d301      	bcc.n	8008d74 <dir_next+0x2c>
 8008d70:	2304      	movs	r3, #4
 8008d72:	e0aa      	b.n	8008eca <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f040 8098 	bne.w	8008eb0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	69db      	ldr	r3, [r3, #28]
 8008d84:	1c5a      	adds	r2, r3, #1
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	699b      	ldr	r3, [r3, #24]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10b      	bne.n	8008daa <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	095b      	lsrs	r3, r3, #5
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	8912      	ldrh	r2, [r2, #8]
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	f0c0 8088 	bcc.w	8008eb0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	61da      	str	r2, [r3, #28]
 8008da6:	2304      	movs	r3, #4
 8008da8:	e08f      	b.n	8008eca <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	0a5b      	lsrs	r3, r3, #9
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	8952      	ldrh	r2, [r2, #10]
 8008db2:	3a01      	subs	r2, #1
 8008db4:	4013      	ands	r3, r2
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d17a      	bne.n	8008eb0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	699b      	ldr	r3, [r3, #24]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	4610      	mov	r0, r2
 8008dc4:	f7ff fc83 	bl	80086ce <get_fat>
 8008dc8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d801      	bhi.n	8008dd4 <dir_next+0x8c>
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	e07a      	b.n	8008eca <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dda:	d101      	bne.n	8008de0 <dir_next+0x98>
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e074      	b.n	8008eca <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	697a      	ldr	r2, [r7, #20]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d358      	bcc.n	8008e9c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d104      	bne.n	8008dfa <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	61da      	str	r2, [r3, #28]
 8008df6:	2304      	movs	r3, #4
 8008df8:	e067      	b.n	8008eca <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	699b      	ldr	r3, [r3, #24]
 8008e00:	4619      	mov	r1, r3
 8008e02:	4610      	mov	r0, r2
 8008e04:	f7ff fe59 	bl	8008aba <create_chain>
 8008e08:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d101      	bne.n	8008e14 <dir_next+0xcc>
 8008e10:	2307      	movs	r3, #7
 8008e12:	e05a      	b.n	8008eca <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d101      	bne.n	8008e1e <dir_next+0xd6>
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	e055      	b.n	8008eca <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e24:	d101      	bne.n	8008e2a <dir_next+0xe2>
 8008e26:	2301      	movs	r3, #1
 8008e28:	e04f      	b.n	8008eca <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f7ff fb50 	bl	80084d0 <sync_window>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d001      	beq.n	8008e3a <dir_next+0xf2>
 8008e36:	2301      	movs	r3, #1
 8008e38:	e047      	b.n	8008eca <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	3334      	adds	r3, #52	@ 0x34
 8008e3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e42:	2100      	movs	r1, #0
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7ff f949 	bl	80080dc <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	613b      	str	r3, [r7, #16]
 8008e4e:	6979      	ldr	r1, [r7, #20]
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f7ff fc1d 	bl	8008690 <clust2sect>
 8008e56:	4602      	mov	r2, r0
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e5c:	e012      	b.n	8008e84 <dir_next+0x13c>
						fs->wflag = 1;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2201      	movs	r2, #1
 8008e62:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f7ff fb33 	bl	80084d0 <sync_window>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d001      	beq.n	8008e74 <dir_next+0x12c>
 8008e70:	2301      	movs	r3, #1
 8008e72:	e02a      	b.n	8008eca <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	3301      	adds	r3, #1
 8008e78:	613b      	str	r3, [r7, #16]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e7e:	1c5a      	adds	r2, r3, #1
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	895b      	ldrh	r3, [r3, #10]
 8008e88:	461a      	mov	r2, r3
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d3e6      	bcc.n	8008e5e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	1ad2      	subs	r2, r2, r3
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	697a      	ldr	r2, [r7, #20]
 8008ea0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008ea2:	6979      	ldr	r1, [r7, #20]
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f7ff fbf3 	bl	8008690 <clust2sect>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ec2:	441a      	add	r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3718      	adds	r7, #24
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b086      	sub	sp, #24
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f7ff feb4 	bl	8008c52 <dir_sdi>
 8008eea:	4603      	mov	r3, r0
 8008eec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008eee:	7dfb      	ldrb	r3, [r7, #23]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d12b      	bne.n	8008f4c <dir_alloc+0x7a>
		n = 0;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	69db      	ldr	r3, [r3, #28]
 8008efc:	4619      	mov	r1, r3
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	f7ff fb2a 	bl	8008558 <move_window>
 8008f04:	4603      	mov	r3, r0
 8008f06:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008f08:	7dfb      	ldrb	r3, [r7, #23]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d11d      	bne.n	8008f4a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	2be5      	cmp	r3, #229	@ 0xe5
 8008f16:	d004      	beq.n	8008f22 <dir_alloc+0x50>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a1b      	ldr	r3, [r3, #32]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d107      	bne.n	8008f32 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	3301      	adds	r3, #1
 8008f26:	613b      	str	r3, [r7, #16]
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d102      	bne.n	8008f36 <dir_alloc+0x64>
 8008f30:	e00c      	b.n	8008f4c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008f32:	2300      	movs	r3, #0
 8008f34:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008f36:	2101      	movs	r1, #1
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f7ff ff05 	bl	8008d48 <dir_next>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008f42:	7dfb      	ldrb	r3, [r7, #23]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d0d7      	beq.n	8008ef8 <dir_alloc+0x26>
 8008f48:	e000      	b.n	8008f4c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008f4a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008f4c:	7dfb      	ldrb	r3, [r7, #23]
 8008f4e:	2b04      	cmp	r3, #4
 8008f50:	d101      	bne.n	8008f56 <dir_alloc+0x84>
 8008f52:	2307      	movs	r3, #7
 8008f54:	75fb      	strb	r3, [r7, #23]
	return res;
 8008f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3718      	adds	r7, #24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	331a      	adds	r3, #26
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7ff f810 	bl	8007f94 <ld_word>
 8008f74:	4603      	mov	r3, r0
 8008f76:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	2b03      	cmp	r3, #3
 8008f7e:	d109      	bne.n	8008f94 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	3314      	adds	r3, #20
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7ff f805 	bl	8007f94 <ld_word>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	041b      	lsls	r3, r3, #16
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	4313      	orrs	r3, r2
 8008f92:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008f94:	68fb      	ldr	r3, [r7, #12]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b084      	sub	sp, #16
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	60f8      	str	r0, [r7, #12]
 8008fa6:	60b9      	str	r1, [r7, #8]
 8008fa8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	331a      	adds	r3, #26
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	b292      	uxth	r2, r2
 8008fb2:	4611      	mov	r1, r2
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7ff f829 	bl	800800c <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d109      	bne.n	8008fd6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	f103 0214 	add.w	r2, r3, #20
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	0c1b      	lsrs	r3, r3, #16
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	4619      	mov	r1, r3
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	f7ff f81b 	bl	800800c <st_word>
	}
}
 8008fd6:	bf00      	nop
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b086      	sub	sp, #24
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008fec:	2100      	movs	r1, #0
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7ff fe2f 	bl	8008c52 <dir_sdi>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008ff8:	7dfb      	ldrb	r3, [r7, #23]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d001      	beq.n	8009002 <dir_find+0x24>
 8008ffe:	7dfb      	ldrb	r3, [r7, #23]
 8009000:	e03e      	b.n	8009080 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	69db      	ldr	r3, [r3, #28]
 8009006:	4619      	mov	r1, r3
 8009008:	6938      	ldr	r0, [r7, #16]
 800900a:	f7ff faa5 	bl	8008558 <move_window>
 800900e:	4603      	mov	r3, r0
 8009010:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009012:	7dfb      	ldrb	r3, [r7, #23]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d12f      	bne.n	8009078 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6a1b      	ldr	r3, [r3, #32]
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009020:	7bfb      	ldrb	r3, [r7, #15]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d102      	bne.n	800902c <dir_find+0x4e>
 8009026:	2304      	movs	r3, #4
 8009028:	75fb      	strb	r3, [r7, #23]
 800902a:	e028      	b.n	800907e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6a1b      	ldr	r3, [r3, #32]
 8009030:	330b      	adds	r3, #11
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009038:	b2da      	uxtb	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a1b      	ldr	r3, [r3, #32]
 8009042:	330b      	adds	r3, #11
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	f003 0308 	and.w	r3, r3, #8
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10a      	bne.n	8009064 <dir_find+0x86>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a18      	ldr	r0, [r3, #32]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	3324      	adds	r3, #36	@ 0x24
 8009056:	220b      	movs	r2, #11
 8009058:	4619      	mov	r1, r3
 800905a:	f7ff f85a 	bl	8008112 <mem_cmp>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00b      	beq.n	800907c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009064:	2100      	movs	r1, #0
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f7ff fe6e 	bl	8008d48 <dir_next>
 800906c:	4603      	mov	r3, r0
 800906e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009070:	7dfb      	ldrb	r3, [r7, #23]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d0c5      	beq.n	8009002 <dir_find+0x24>
 8009076:	e002      	b.n	800907e <dir_find+0xa0>
		if (res != FR_OK) break;
 8009078:	bf00      	nop
 800907a:	e000      	b.n	800907e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800907c:	bf00      	nop

	return res;
 800907e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009080:	4618      	mov	r0, r3
 8009082:	3718      	adds	r7, #24
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009096:	2101      	movs	r1, #1
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f7ff ff1a 	bl	8008ed2 <dir_alloc>
 800909e:	4603      	mov	r3, r0
 80090a0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80090a2:	7bfb      	ldrb	r3, [r7, #15]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d11c      	bne.n	80090e2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	69db      	ldr	r3, [r3, #28]
 80090ac:	4619      	mov	r1, r3
 80090ae:	68b8      	ldr	r0, [r7, #8]
 80090b0:	f7ff fa52 	bl	8008558 <move_window>
 80090b4:	4603      	mov	r3, r0
 80090b6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80090b8:	7bfb      	ldrb	r3, [r7, #15]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d111      	bne.n	80090e2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	2220      	movs	r2, #32
 80090c4:	2100      	movs	r1, #0
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7ff f808 	bl	80080dc <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6a18      	ldr	r0, [r3, #32]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	3324      	adds	r3, #36	@ 0x24
 80090d4:	220b      	movs	r2, #11
 80090d6:	4619      	mov	r1, r3
 80090d8:	f7fe ffdf 	bl	800809a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	2201      	movs	r2, #1
 80090e0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80090e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b088      	sub	sp, #32
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	60fb      	str	r3, [r7, #12]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	3324      	adds	r3, #36	@ 0x24
 8009100:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009102:	220b      	movs	r2, #11
 8009104:	2120      	movs	r1, #32
 8009106:	68b8      	ldr	r0, [r7, #8]
 8009108:	f7fe ffe8 	bl	80080dc <mem_set>
	si = i = 0; ni = 8;
 800910c:	2300      	movs	r3, #0
 800910e:	613b      	str	r3, [r7, #16]
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	61fb      	str	r3, [r7, #28]
 8009114:	2308      	movs	r3, #8
 8009116:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	1c5a      	adds	r2, r3, #1
 800911c:	61fa      	str	r2, [r7, #28]
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	4413      	add	r3, r2
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009126:	7efb      	ldrb	r3, [r7, #27]
 8009128:	2b20      	cmp	r3, #32
 800912a:	d94e      	bls.n	80091ca <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800912c:	7efb      	ldrb	r3, [r7, #27]
 800912e:	2b2f      	cmp	r3, #47	@ 0x2f
 8009130:	d006      	beq.n	8009140 <create_name+0x54>
 8009132:	7efb      	ldrb	r3, [r7, #27]
 8009134:	2b5c      	cmp	r3, #92	@ 0x5c
 8009136:	d110      	bne.n	800915a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009138:	e002      	b.n	8009140 <create_name+0x54>
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	3301      	adds	r3, #1
 800913e:	61fb      	str	r3, [r7, #28]
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	4413      	add	r3, r2
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	2b2f      	cmp	r3, #47	@ 0x2f
 800914a:	d0f6      	beq.n	800913a <create_name+0x4e>
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	4413      	add	r3, r2
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	2b5c      	cmp	r3, #92	@ 0x5c
 8009156:	d0f0      	beq.n	800913a <create_name+0x4e>
			break;
 8009158:	e038      	b.n	80091cc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800915a:	7efb      	ldrb	r3, [r7, #27]
 800915c:	2b2e      	cmp	r3, #46	@ 0x2e
 800915e:	d003      	beq.n	8009168 <create_name+0x7c>
 8009160:	693a      	ldr	r2, [r7, #16]
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	429a      	cmp	r2, r3
 8009166:	d30c      	bcc.n	8009182 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	2b0b      	cmp	r3, #11
 800916c:	d002      	beq.n	8009174 <create_name+0x88>
 800916e:	7efb      	ldrb	r3, [r7, #27]
 8009170:	2b2e      	cmp	r3, #46	@ 0x2e
 8009172:	d001      	beq.n	8009178 <create_name+0x8c>
 8009174:	2306      	movs	r3, #6
 8009176:	e044      	b.n	8009202 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009178:	2308      	movs	r3, #8
 800917a:	613b      	str	r3, [r7, #16]
 800917c:	230b      	movs	r3, #11
 800917e:	617b      	str	r3, [r7, #20]
			continue;
 8009180:	e022      	b.n	80091c8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009182:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009186:	2b00      	cmp	r3, #0
 8009188:	da04      	bge.n	8009194 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800918a:	7efb      	ldrb	r3, [r7, #27]
 800918c:	3b80      	subs	r3, #128	@ 0x80
 800918e:	4a1f      	ldr	r2, [pc, #124]	@ (800920c <create_name+0x120>)
 8009190:	5cd3      	ldrb	r3, [r2, r3]
 8009192:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009194:	7efb      	ldrb	r3, [r7, #27]
 8009196:	4619      	mov	r1, r3
 8009198:	481d      	ldr	r0, [pc, #116]	@ (8009210 <create_name+0x124>)
 800919a:	f7fe ffe1 	bl	8008160 <chk_chr>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <create_name+0xbc>
 80091a4:	2306      	movs	r3, #6
 80091a6:	e02c      	b.n	8009202 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80091a8:	7efb      	ldrb	r3, [r7, #27]
 80091aa:	2b60      	cmp	r3, #96	@ 0x60
 80091ac:	d905      	bls.n	80091ba <create_name+0xce>
 80091ae:	7efb      	ldrb	r3, [r7, #27]
 80091b0:	2b7a      	cmp	r3, #122	@ 0x7a
 80091b2:	d802      	bhi.n	80091ba <create_name+0xce>
 80091b4:	7efb      	ldrb	r3, [r7, #27]
 80091b6:	3b20      	subs	r3, #32
 80091b8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	1c5a      	adds	r2, r3, #1
 80091be:	613a      	str	r2, [r7, #16]
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	4413      	add	r3, r2
 80091c4:	7efa      	ldrb	r2, [r7, #27]
 80091c6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80091c8:	e7a6      	b.n	8009118 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80091ca:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	441a      	add	r2, r3
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d101      	bne.n	80091e0 <create_name+0xf4>
 80091dc:	2306      	movs	r3, #6
 80091de:	e010      	b.n	8009202 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	2be5      	cmp	r3, #229	@ 0xe5
 80091e6:	d102      	bne.n	80091ee <create_name+0x102>
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	2205      	movs	r2, #5
 80091ec:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80091ee:	7efb      	ldrb	r3, [r7, #27]
 80091f0:	2b20      	cmp	r3, #32
 80091f2:	d801      	bhi.n	80091f8 <create_name+0x10c>
 80091f4:	2204      	movs	r2, #4
 80091f6:	e000      	b.n	80091fa <create_name+0x10e>
 80091f8:	2200      	movs	r2, #0
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	330b      	adds	r3, #11
 80091fe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009200:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009202:	4618      	mov	r0, r3
 8009204:	3720      	adds	r7, #32
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	08012abc 	.word	0x08012abc
 8009210:	08012a24 	.word	0x08012a24

08009214 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009228:	e002      	b.n	8009230 <follow_path+0x1c>
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	3301      	adds	r3, #1
 800922e:	603b      	str	r3, [r7, #0]
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	2b2f      	cmp	r3, #47	@ 0x2f
 8009236:	d0f8      	beq.n	800922a <follow_path+0x16>
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	2b5c      	cmp	r3, #92	@ 0x5c
 800923e:	d0f4      	beq.n	800922a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	2200      	movs	r2, #0
 8009244:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	2b1f      	cmp	r3, #31
 800924c:	d80a      	bhi.n	8009264 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2280      	movs	r2, #128	@ 0x80
 8009252:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8009256:	2100      	movs	r1, #0
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f7ff fcfa 	bl	8008c52 <dir_sdi>
 800925e:	4603      	mov	r3, r0
 8009260:	75fb      	strb	r3, [r7, #23]
 8009262:	e043      	b.n	80092ec <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009264:	463b      	mov	r3, r7
 8009266:	4619      	mov	r1, r3
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f7ff ff3f 	bl	80090ec <create_name>
 800926e:	4603      	mov	r3, r0
 8009270:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009272:	7dfb      	ldrb	r3, [r7, #23]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d134      	bne.n	80092e2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f7ff feb0 	bl	8008fde <dir_find>
 800927e:	4603      	mov	r3, r0
 8009280:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009288:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800928a:	7dfb      	ldrb	r3, [r7, #23]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00a      	beq.n	80092a6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009290:	7dfb      	ldrb	r3, [r7, #23]
 8009292:	2b04      	cmp	r3, #4
 8009294:	d127      	bne.n	80092e6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009296:	7afb      	ldrb	r3, [r7, #11]
 8009298:	f003 0304 	and.w	r3, r3, #4
 800929c:	2b00      	cmp	r3, #0
 800929e:	d122      	bne.n	80092e6 <follow_path+0xd2>
 80092a0:	2305      	movs	r3, #5
 80092a2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80092a4:	e01f      	b.n	80092e6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80092a6:	7afb      	ldrb	r3, [r7, #11]
 80092a8:	f003 0304 	and.w	r3, r3, #4
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d11c      	bne.n	80092ea <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	799b      	ldrb	r3, [r3, #6]
 80092b4:	f003 0310 	and.w	r3, r3, #16
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d102      	bne.n	80092c2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80092bc:	2305      	movs	r3, #5
 80092be:	75fb      	strb	r3, [r7, #23]
 80092c0:	e014      	b.n	80092ec <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	695b      	ldr	r3, [r3, #20]
 80092cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092d0:	4413      	add	r3, r2
 80092d2:	4619      	mov	r1, r3
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f7ff fe43 	bl	8008f60 <ld_clust>
 80092da:	4602      	mov	r2, r0
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80092e0:	e7c0      	b.n	8009264 <follow_path+0x50>
			if (res != FR_OK) break;
 80092e2:	bf00      	nop
 80092e4:	e002      	b.n	80092ec <follow_path+0xd8>
				break;
 80092e6:	bf00      	nop
 80092e8:	e000      	b.n	80092ec <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80092ea:	bf00      	nop
			}
		}
	}

	return res;
 80092ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3718      	adds	r7, #24
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80092f6:	b480      	push	{r7}
 80092f8:	b087      	sub	sp, #28
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80092fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009302:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d031      	beq.n	8009370 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	617b      	str	r3, [r7, #20]
 8009312:	e002      	b.n	800931a <get_ldnumber+0x24>
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	3301      	adds	r3, #1
 8009318:	617b      	str	r3, [r7, #20]
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	2b20      	cmp	r3, #32
 8009320:	d903      	bls.n	800932a <get_ldnumber+0x34>
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	2b3a      	cmp	r3, #58	@ 0x3a
 8009328:	d1f4      	bne.n	8009314 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	2b3a      	cmp	r3, #58	@ 0x3a
 8009330:	d11c      	bne.n	800936c <get_ldnumber+0x76>
			tp = *path;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	1c5a      	adds	r2, r3, #1
 800933c:	60fa      	str	r2, [r7, #12]
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	3b30      	subs	r3, #48	@ 0x30
 8009342:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	2b09      	cmp	r3, #9
 8009348:	d80e      	bhi.n	8009368 <get_ldnumber+0x72>
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	429a      	cmp	r2, r3
 8009350:	d10a      	bne.n	8009368 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d107      	bne.n	8009368 <get_ldnumber+0x72>
					vol = (int)i;
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	3301      	adds	r3, #1
 8009360:	617b      	str	r3, [r7, #20]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	697a      	ldr	r2, [r7, #20]
 8009366:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	e002      	b.n	8009372 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800936c:	2300      	movs	r3, #0
 800936e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009370:	693b      	ldr	r3, [r7, #16]
}
 8009372:	4618      	mov	r0, r3
 8009374:	371c      	adds	r7, #28
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr
	...

08009380 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	70da      	strb	r2, [r3, #3]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f04f 32ff 	mov.w	r2, #4294967295
 8009396:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009398:	6839      	ldr	r1, [r7, #0]
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f7ff f8dc 	bl	8008558 <move_window>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <check_fs+0x2a>
 80093a6:	2304      	movs	r3, #4
 80093a8:	e038      	b.n	800941c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	3334      	adds	r3, #52	@ 0x34
 80093ae:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fe fdee 	bl	8007f94 <ld_word>
 80093b8:	4603      	mov	r3, r0
 80093ba:	461a      	mov	r2, r3
 80093bc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d001      	beq.n	80093c8 <check_fs+0x48>
 80093c4:	2303      	movs	r3, #3
 80093c6:	e029      	b.n	800941c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80093ce:	2be9      	cmp	r3, #233	@ 0xe9
 80093d0:	d009      	beq.n	80093e6 <check_fs+0x66>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80093d8:	2beb      	cmp	r3, #235	@ 0xeb
 80093da:	d11e      	bne.n	800941a <check_fs+0x9a>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80093e2:	2b90      	cmp	r3, #144	@ 0x90
 80093e4:	d119      	bne.n	800941a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	3334      	adds	r3, #52	@ 0x34
 80093ea:	3336      	adds	r3, #54	@ 0x36
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7fe fdea 	bl	8007fc6 <ld_dword>
 80093f2:	4603      	mov	r3, r0
 80093f4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80093f8:	4a0a      	ldr	r2, [pc, #40]	@ (8009424 <check_fs+0xa4>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d101      	bne.n	8009402 <check_fs+0x82>
 80093fe:	2300      	movs	r3, #0
 8009400:	e00c      	b.n	800941c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	3334      	adds	r3, #52	@ 0x34
 8009406:	3352      	adds	r3, #82	@ 0x52
 8009408:	4618      	mov	r0, r3
 800940a:	f7fe fddc 	bl	8007fc6 <ld_dword>
 800940e:	4603      	mov	r3, r0
 8009410:	4a05      	ldr	r2, [pc, #20]	@ (8009428 <check_fs+0xa8>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d101      	bne.n	800941a <check_fs+0x9a>
 8009416:	2300      	movs	r3, #0
 8009418:	e000      	b.n	800941c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800941a:	2302      	movs	r3, #2
}
 800941c:	4618      	mov	r0, r3
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	00544146 	.word	0x00544146
 8009428:	33544146 	.word	0x33544146

0800942c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b096      	sub	sp, #88	@ 0x58
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	4613      	mov	r3, r2
 8009438:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	2200      	movs	r2, #0
 800943e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	f7ff ff58 	bl	80092f6 <get_ldnumber>
 8009446:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800944a:	2b00      	cmp	r3, #0
 800944c:	da01      	bge.n	8009452 <find_volume+0x26>
 800944e:	230b      	movs	r3, #11
 8009450:	e235      	b.n	80098be <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009452:	4aa5      	ldr	r2, [pc, #660]	@ (80096e8 <find_volume+0x2bc>)
 8009454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800945a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800945c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800945e:	2b00      	cmp	r3, #0
 8009460:	d101      	bne.n	8009466 <find_volume+0x3a>
 8009462:	230c      	movs	r3, #12
 8009464:	e22b      	b.n	80098be <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8009466:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009468:	f7fe fe95 	bl	8008196 <lock_fs>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d101      	bne.n	8009476 <find_volume+0x4a>
 8009472:	230f      	movs	r3, #15
 8009474:	e223      	b.n	80098be <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800947a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800947c:	79fb      	ldrb	r3, [r7, #7]
 800947e:	f023 0301 	bic.w	r3, r3, #1
 8009482:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d01a      	beq.n	80094c2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800948c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800948e:	785b      	ldrb	r3, [r3, #1]
 8009490:	4618      	mov	r0, r3
 8009492:	f7fe fce1 	bl	8007e58 <disk_status>
 8009496:	4603      	mov	r3, r0
 8009498:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800949c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80094a0:	f003 0301 	and.w	r3, r3, #1
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d10c      	bne.n	80094c2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80094a8:	79fb      	ldrb	r3, [r7, #7]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d007      	beq.n	80094be <find_volume+0x92>
 80094ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80094b2:	f003 0304 	and.w	r3, r3, #4
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d001      	beq.n	80094be <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80094ba:	230a      	movs	r3, #10
 80094bc:	e1ff      	b.n	80098be <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 80094be:	2300      	movs	r3, #0
 80094c0:	e1fd      	b.n	80098be <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80094c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c4:	2200      	movs	r2, #0
 80094c6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80094c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094ca:	b2da      	uxtb	r2, r3
 80094cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ce:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80094d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d2:	785b      	ldrb	r3, [r3, #1]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7fe fcd9 	bl	8007e8c <disk_initialize>
 80094da:	4603      	mov	r3, r0
 80094dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80094e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80094e4:	f003 0301 	and.w	r3, r3, #1
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d001      	beq.n	80094f0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80094ec:	2303      	movs	r3, #3
 80094ee:	e1e6      	b.n	80098be <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80094f0:	79fb      	ldrb	r3, [r7, #7]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d007      	beq.n	8009506 <find_volume+0xda>
 80094f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80094fa:	f003 0304 	and.w	r3, r3, #4
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d001      	beq.n	8009506 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8009502:	230a      	movs	r3, #10
 8009504:	e1db      	b.n	80098be <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009506:	2300      	movs	r3, #0
 8009508:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800950a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800950c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800950e:	f7ff ff37 	bl	8009380 <check_fs>
 8009512:	4603      	mov	r3, r0
 8009514:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009518:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800951c:	2b02      	cmp	r3, #2
 800951e:	d149      	bne.n	80095b4 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009520:	2300      	movs	r3, #0
 8009522:	643b      	str	r3, [r7, #64]	@ 0x40
 8009524:	e01e      	b.n	8009564 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009528:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800952c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800952e:	011b      	lsls	r3, r3, #4
 8009530:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009534:	4413      	add	r3, r2
 8009536:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800953a:	3304      	adds	r3, #4
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d006      	beq.n	8009550 <find_volume+0x124>
 8009542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009544:	3308      	adds	r3, #8
 8009546:	4618      	mov	r0, r3
 8009548:	f7fe fd3d 	bl	8007fc6 <ld_dword>
 800954c:	4602      	mov	r2, r0
 800954e:	e000      	b.n	8009552 <find_volume+0x126>
 8009550:	2200      	movs	r2, #0
 8009552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	3358      	adds	r3, #88	@ 0x58
 8009558:	443b      	add	r3, r7
 800955a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800955e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009560:	3301      	adds	r3, #1
 8009562:	643b      	str	r3, [r7, #64]	@ 0x40
 8009564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009566:	2b03      	cmp	r3, #3
 8009568:	d9dd      	bls.n	8009526 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800956a:	2300      	movs	r3, #0
 800956c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800956e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009570:	2b00      	cmp	r3, #0
 8009572:	d002      	beq.n	800957a <find_volume+0x14e>
 8009574:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009576:	3b01      	subs	r3, #1
 8009578:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800957a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	3358      	adds	r3, #88	@ 0x58
 8009580:	443b      	add	r3, r7
 8009582:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009586:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009588:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800958a:	2b00      	cmp	r3, #0
 800958c:	d005      	beq.n	800959a <find_volume+0x16e>
 800958e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009590:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009592:	f7ff fef5 	bl	8009380 <check_fs>
 8009596:	4603      	mov	r3, r0
 8009598:	e000      	b.n	800959c <find_volume+0x170>
 800959a:	2303      	movs	r3, #3
 800959c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80095a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d905      	bls.n	80095b4 <find_volume+0x188>
 80095a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095aa:	3301      	adds	r3, #1
 80095ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80095ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095b0:	2b03      	cmp	r3, #3
 80095b2:	d9e2      	bls.n	800957a <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80095b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80095b8:	2b04      	cmp	r3, #4
 80095ba:	d101      	bne.n	80095c0 <find_volume+0x194>
 80095bc:	2301      	movs	r3, #1
 80095be:	e17e      	b.n	80098be <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80095c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d901      	bls.n	80095cc <find_volume+0x1a0>
 80095c8:	230d      	movs	r3, #13
 80095ca:	e178      	b.n	80098be <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80095cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ce:	3334      	adds	r3, #52	@ 0x34
 80095d0:	330b      	adds	r3, #11
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7fe fcde 	bl	8007f94 <ld_word>
 80095d8:	4603      	mov	r3, r0
 80095da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095de:	d001      	beq.n	80095e4 <find_volume+0x1b8>
 80095e0:	230d      	movs	r3, #13
 80095e2:	e16c      	b.n	80098be <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80095e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e6:	3334      	adds	r3, #52	@ 0x34
 80095e8:	3316      	adds	r3, #22
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7fe fcd2 	bl	8007f94 <ld_word>
 80095f0:	4603      	mov	r3, r0
 80095f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80095f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d106      	bne.n	8009608 <find_volume+0x1dc>
 80095fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095fc:	3334      	adds	r3, #52	@ 0x34
 80095fe:	3324      	adds	r3, #36	@ 0x24
 8009600:	4618      	mov	r0, r3
 8009602:	f7fe fce0 	bl	8007fc6 <ld_dword>
 8009606:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800960a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800960c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800960e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009610:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009616:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800961a:	789b      	ldrb	r3, [r3, #2]
 800961c:	2b01      	cmp	r3, #1
 800961e:	d005      	beq.n	800962c <find_volume+0x200>
 8009620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009622:	789b      	ldrb	r3, [r3, #2]
 8009624:	2b02      	cmp	r3, #2
 8009626:	d001      	beq.n	800962c <find_volume+0x200>
 8009628:	230d      	movs	r3, #13
 800962a:	e148      	b.n	80098be <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800962c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800962e:	789b      	ldrb	r3, [r3, #2]
 8009630:	461a      	mov	r2, r3
 8009632:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009634:	fb02 f303 	mul.w	r3, r2, r3
 8009638:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800963a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800963c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009640:	461a      	mov	r2, r3
 8009642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009644:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009648:	895b      	ldrh	r3, [r3, #10]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d008      	beq.n	8009660 <find_volume+0x234>
 800964e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009650:	895b      	ldrh	r3, [r3, #10]
 8009652:	461a      	mov	r2, r3
 8009654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009656:	895b      	ldrh	r3, [r3, #10]
 8009658:	3b01      	subs	r3, #1
 800965a:	4013      	ands	r3, r2
 800965c:	2b00      	cmp	r3, #0
 800965e:	d001      	beq.n	8009664 <find_volume+0x238>
 8009660:	230d      	movs	r3, #13
 8009662:	e12c      	b.n	80098be <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009666:	3334      	adds	r3, #52	@ 0x34
 8009668:	3311      	adds	r3, #17
 800966a:	4618      	mov	r0, r3
 800966c:	f7fe fc92 	bl	8007f94 <ld_word>
 8009670:	4603      	mov	r3, r0
 8009672:	461a      	mov	r2, r3
 8009674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009676:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800967a:	891b      	ldrh	r3, [r3, #8]
 800967c:	f003 030f 	and.w	r3, r3, #15
 8009680:	b29b      	uxth	r3, r3
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <find_volume+0x25e>
 8009686:	230d      	movs	r3, #13
 8009688:	e119      	b.n	80098be <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800968a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968c:	3334      	adds	r3, #52	@ 0x34
 800968e:	3313      	adds	r3, #19
 8009690:	4618      	mov	r0, r3
 8009692:	f7fe fc7f 	bl	8007f94 <ld_word>
 8009696:	4603      	mov	r3, r0
 8009698:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800969a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800969c:	2b00      	cmp	r3, #0
 800969e:	d106      	bne.n	80096ae <find_volume+0x282>
 80096a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a2:	3334      	adds	r3, #52	@ 0x34
 80096a4:	3320      	adds	r3, #32
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fe fc8d 	bl	8007fc6 <ld_dword>
 80096ac:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80096ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b0:	3334      	adds	r3, #52	@ 0x34
 80096b2:	330e      	adds	r3, #14
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7fe fc6d 	bl	8007f94 <ld_word>
 80096ba:	4603      	mov	r3, r0
 80096bc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80096be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d101      	bne.n	80096c8 <find_volume+0x29c>
 80096c4:	230d      	movs	r3, #13
 80096c6:	e0fa      	b.n	80098be <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80096c8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80096ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096cc:	4413      	add	r3, r2
 80096ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80096d0:	8912      	ldrh	r2, [r2, #8]
 80096d2:	0912      	lsrs	r2, r2, #4
 80096d4:	b292      	uxth	r2, r2
 80096d6:	4413      	add	r3, r2
 80096d8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80096da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096de:	429a      	cmp	r2, r3
 80096e0:	d204      	bcs.n	80096ec <find_volume+0x2c0>
 80096e2:	230d      	movs	r3, #13
 80096e4:	e0eb      	b.n	80098be <find_volume+0x492>
 80096e6:	bf00      	nop
 80096e8:	200010c0 	.word	0x200010c0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80096ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80096f4:	8952      	ldrh	r2, [r2, #10]
 80096f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80096fa:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80096fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d101      	bne.n	8009706 <find_volume+0x2da>
 8009702:	230d      	movs	r3, #13
 8009704:	e0db      	b.n	80098be <find_volume+0x492>
		fmt = FS_FAT32;
 8009706:	2303      	movs	r3, #3
 8009708:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800970c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800970e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009712:	4293      	cmp	r3, r2
 8009714:	d802      	bhi.n	800971c <find_volume+0x2f0>
 8009716:	2302      	movs	r3, #2
 8009718:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800971c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800971e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009722:	4293      	cmp	r3, r2
 8009724:	d802      	bhi.n	800972c <find_volume+0x300>
 8009726:	2301      	movs	r3, #1
 8009728:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800972c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972e:	1c9a      	adds	r2, r3, #2
 8009730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009732:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009736:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009738:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800973a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800973c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800973e:	441a      	add	r2, r3
 8009740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009742:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009744:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009748:	441a      	add	r2, r3
 800974a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800974c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800974e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009752:	2b03      	cmp	r3, #3
 8009754:	d11e      	bne.n	8009794 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009758:	3334      	adds	r3, #52	@ 0x34
 800975a:	332a      	adds	r3, #42	@ 0x2a
 800975c:	4618      	mov	r0, r3
 800975e:	f7fe fc19 	bl	8007f94 <ld_word>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d001      	beq.n	800976c <find_volume+0x340>
 8009768:	230d      	movs	r3, #13
 800976a:	e0a8      	b.n	80098be <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800976c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800976e:	891b      	ldrh	r3, [r3, #8]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d001      	beq.n	8009778 <find_volume+0x34c>
 8009774:	230d      	movs	r3, #13
 8009776:	e0a2      	b.n	80098be <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800977a:	3334      	adds	r3, #52	@ 0x34
 800977c:	332c      	adds	r3, #44	@ 0x2c
 800977e:	4618      	mov	r0, r3
 8009780:	f7fe fc21 	bl	8007fc6 <ld_dword>
 8009784:	4602      	mov	r2, r0
 8009786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009788:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800978a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800978c:	699b      	ldr	r3, [r3, #24]
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	647b      	str	r3, [r7, #68]	@ 0x44
 8009792:	e01f      	b.n	80097d4 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009796:	891b      	ldrh	r3, [r3, #8]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d101      	bne.n	80097a0 <find_volume+0x374>
 800979c:	230d      	movs	r3, #13
 800979e:	e08e      	b.n	80098be <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80097a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80097a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097a6:	441a      	add	r2, r3
 80097a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097aa:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80097ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d103      	bne.n	80097bc <find_volume+0x390>
 80097b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b6:	699b      	ldr	r3, [r3, #24]
 80097b8:	005b      	lsls	r3, r3, #1
 80097ba:	e00a      	b.n	80097d2 <find_volume+0x3a6>
 80097bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097be:	699a      	ldr	r2, [r3, #24]
 80097c0:	4613      	mov	r3, r2
 80097c2:	005b      	lsls	r3, r3, #1
 80097c4:	4413      	add	r3, r2
 80097c6:	085a      	lsrs	r2, r3, #1
 80097c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ca:	699b      	ldr	r3, [r3, #24]
 80097cc:	f003 0301 	and.w	r3, r3, #1
 80097d0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80097d2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80097d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d6:	69da      	ldr	r2, [r3, #28]
 80097d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097da:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80097de:	0a5b      	lsrs	r3, r3, #9
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d201      	bcs.n	80097e8 <find_volume+0x3bc>
 80097e4:	230d      	movs	r3, #13
 80097e6:	e06a      	b.n	80098be <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80097e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ea:	f04f 32ff 	mov.w	r2, #4294967295
 80097ee:	615a      	str	r2, [r3, #20]
 80097f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f2:	695a      	ldr	r2, [r3, #20]
 80097f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80097f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097fa:	2280      	movs	r2, #128	@ 0x80
 80097fc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80097fe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009802:	2b03      	cmp	r3, #3
 8009804:	d149      	bne.n	800989a <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009808:	3334      	adds	r3, #52	@ 0x34
 800980a:	3330      	adds	r3, #48	@ 0x30
 800980c:	4618      	mov	r0, r3
 800980e:	f7fe fbc1 	bl	8007f94 <ld_word>
 8009812:	4603      	mov	r3, r0
 8009814:	2b01      	cmp	r3, #1
 8009816:	d140      	bne.n	800989a <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009818:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800981a:	3301      	adds	r3, #1
 800981c:	4619      	mov	r1, r3
 800981e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009820:	f7fe fe9a 	bl	8008558 <move_window>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d137      	bne.n	800989a <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800982a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800982c:	2200      	movs	r2, #0
 800982e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009832:	3334      	adds	r3, #52	@ 0x34
 8009834:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009838:	4618      	mov	r0, r3
 800983a:	f7fe fbab 	bl	8007f94 <ld_word>
 800983e:	4603      	mov	r3, r0
 8009840:	461a      	mov	r2, r3
 8009842:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009846:	429a      	cmp	r2, r3
 8009848:	d127      	bne.n	800989a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800984a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800984c:	3334      	adds	r3, #52	@ 0x34
 800984e:	4618      	mov	r0, r3
 8009850:	f7fe fbb9 	bl	8007fc6 <ld_dword>
 8009854:	4603      	mov	r3, r0
 8009856:	4a1c      	ldr	r2, [pc, #112]	@ (80098c8 <find_volume+0x49c>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d11e      	bne.n	800989a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800985c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800985e:	3334      	adds	r3, #52	@ 0x34
 8009860:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009864:	4618      	mov	r0, r3
 8009866:	f7fe fbae 	bl	8007fc6 <ld_dword>
 800986a:	4603      	mov	r3, r0
 800986c:	4a17      	ldr	r2, [pc, #92]	@ (80098cc <find_volume+0x4a0>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d113      	bne.n	800989a <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009874:	3334      	adds	r3, #52	@ 0x34
 8009876:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800987a:	4618      	mov	r0, r3
 800987c:	f7fe fba3 	bl	8007fc6 <ld_dword>
 8009880:	4602      	mov	r2, r0
 8009882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009884:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009888:	3334      	adds	r3, #52	@ 0x34
 800988a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800988e:	4618      	mov	r0, r3
 8009890:	f7fe fb99 	bl	8007fc6 <ld_dword>
 8009894:	4602      	mov	r2, r0
 8009896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009898:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800989a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800989c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80098a0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80098a2:	4b0b      	ldr	r3, [pc, #44]	@ (80098d0 <find_volume+0x4a4>)
 80098a4:	881b      	ldrh	r3, [r3, #0]
 80098a6:	3301      	adds	r3, #1
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	4b09      	ldr	r3, [pc, #36]	@ (80098d0 <find_volume+0x4a4>)
 80098ac:	801a      	strh	r2, [r3, #0]
 80098ae:	4b08      	ldr	r3, [pc, #32]	@ (80098d0 <find_volume+0x4a4>)
 80098b0:	881a      	ldrh	r2, [r3, #0]
 80098b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80098b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80098b8:	f7fe fde6 	bl	8008488 <clear_lock>
#endif
	return FR_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3758      	adds	r7, #88	@ 0x58
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	41615252 	.word	0x41615252
 80098cc:	61417272 	.word	0x61417272
 80098d0:	200010c4 	.word	0x200010c4

080098d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80098de:	2309      	movs	r3, #9
 80098e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d02e      	beq.n	8009946 <validate+0x72>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d02a      	beq.n	8009946 <validate+0x72>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d025      	beq.n	8009946 <validate+0x72>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	889a      	ldrh	r2, [r3, #4]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	88db      	ldrh	r3, [r3, #6]
 8009904:	429a      	cmp	r2, r3
 8009906:	d11e      	bne.n	8009946 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4618      	mov	r0, r3
 800990e:	f7fe fc42 	bl	8008196 <lock_fs>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d014      	beq.n	8009942 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	785b      	ldrb	r3, [r3, #1]
 800991e:	4618      	mov	r0, r3
 8009920:	f7fe fa9a 	bl	8007e58 <disk_status>
 8009924:	4603      	mov	r3, r0
 8009926:	f003 0301 	and.w	r3, r3, #1
 800992a:	2b00      	cmp	r3, #0
 800992c:	d102      	bne.n	8009934 <validate+0x60>
				res = FR_OK;
 800992e:	2300      	movs	r3, #0
 8009930:	73fb      	strb	r3, [r7, #15]
 8009932:	e008      	b.n	8009946 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2100      	movs	r1, #0
 800993a:	4618      	mov	r0, r3
 800993c:	f7fe fc41 	bl	80081c2 <unlock_fs>
 8009940:	e001      	b.n	8009946 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8009942:	230f      	movs	r3, #15
 8009944:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009946:	7bfb      	ldrb	r3, [r7, #15]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d102      	bne.n	8009952 <validate+0x7e>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	e000      	b.n	8009954 <validate+0x80>
 8009952:	2300      	movs	r3, #0
 8009954:	683a      	ldr	r2, [r7, #0]
 8009956:	6013      	str	r3, [r2, #0]
	return res;
 8009958:	7bfb      	ldrb	r3, [r7, #15]
}
 800995a:	4618      	mov	r0, r3
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
	...

08009964 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b088      	sub	sp, #32
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	4613      	mov	r3, r2
 8009970:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009976:	f107 0310 	add.w	r3, r7, #16
 800997a:	4618      	mov	r0, r3
 800997c:	f7ff fcbb 	bl	80092f6 <get_ldnumber>
 8009980:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	2b00      	cmp	r3, #0
 8009986:	da01      	bge.n	800998c <f_mount+0x28>
 8009988:	230b      	movs	r3, #11
 800998a:	e048      	b.n	8009a1e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800998c:	4a26      	ldr	r2, [pc, #152]	@ (8009a28 <f_mount+0xc4>)
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009994:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00f      	beq.n	80099bc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800999c:	69b8      	ldr	r0, [r7, #24]
 800999e:	f7fe fd73 	bl	8008488 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	4618      	mov	r0, r3
 80099a8:	f000 fd6e 	bl	800a488 <ff_del_syncobj>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d101      	bne.n	80099b6 <f_mount+0x52>
 80099b2:	2302      	movs	r3, #2
 80099b4:	e033      	b.n	8009a1e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	2200      	movs	r2, #0
 80099ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d00f      	beq.n	80099e2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2200      	movs	r2, #0
 80099c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80099c8:	69fb      	ldr	r3, [r7, #28]
 80099ca:	b2da      	uxtb	r2, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	330c      	adds	r3, #12
 80099d0:	4619      	mov	r1, r3
 80099d2:	4610      	mov	r0, r2
 80099d4:	f000 fd3d 	bl	800a452 <ff_cre_syncobj>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d101      	bne.n	80099e2 <f_mount+0x7e>
 80099de:	2302      	movs	r3, #2
 80099e0:	e01d      	b.n	8009a1e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	4910      	ldr	r1, [pc, #64]	@ (8009a28 <f_mount+0xc4>)
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d002      	beq.n	80099f8 <f_mount+0x94>
 80099f2:	79fb      	ldrb	r3, [r7, #7]
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d001      	beq.n	80099fc <f_mount+0x98>
 80099f8:	2300      	movs	r3, #0
 80099fa:	e010      	b.n	8009a1e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80099fc:	f107 010c 	add.w	r1, r7, #12
 8009a00:	f107 0308 	add.w	r3, r7, #8
 8009a04:	2200      	movs	r2, #0
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7ff fd10 	bl	800942c <find_volume>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	7dfa      	ldrb	r2, [r7, #23]
 8009a14:	4611      	mov	r1, r2
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fe fbd3 	bl	80081c2 <unlock_fs>
 8009a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3720      	adds	r7, #32
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	200010c0 	.word	0x200010c0

08009a2c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b098      	sub	sp, #96	@ 0x60
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	4613      	mov	r3, r2
 8009a38:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d101      	bne.n	8009a44 <f_open+0x18>
 8009a40:	2309      	movs	r3, #9
 8009a42:	e1b0      	b.n	8009da6 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009a44:	79fb      	ldrb	r3, [r7, #7]
 8009a46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a4a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009a4c:	79fa      	ldrb	r2, [r7, #7]
 8009a4e:	f107 0110 	add.w	r1, r7, #16
 8009a52:	f107 0308 	add.w	r3, r7, #8
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7ff fce8 	bl	800942c <find_volume>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8009a62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f040 818d 	bne.w	8009d86 <f_open+0x35a>
		dj.obj.fs = fs;
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	f107 0314 	add.w	r3, r7, #20
 8009a76:	4611      	mov	r1, r2
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7ff fbcb 	bl	8009214 <follow_path>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009a84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d118      	bne.n	8009abe <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009a8c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009a90:	b25b      	sxtb	r3, r3
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	da03      	bge.n	8009a9e <f_open+0x72>
				res = FR_INVALID_NAME;
 8009a96:	2306      	movs	r3, #6
 8009a98:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009a9c:	e00f      	b.n	8009abe <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009a9e:	79fb      	ldrb	r3, [r7, #7]
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	bf8c      	ite	hi
 8009aa4:	2301      	movhi	r3, #1
 8009aa6:	2300      	movls	r3, #0
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	461a      	mov	r2, r3
 8009aac:	f107 0314 	add.w	r3, r7, #20
 8009ab0:	4611      	mov	r1, r2
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7fe fba0 	bl	80081f8 <chk_lock>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009abe:	79fb      	ldrb	r3, [r7, #7]
 8009ac0:	f003 031c 	and.w	r3, r3, #28
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d07f      	beq.n	8009bc8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8009ac8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d017      	beq.n	8009b00 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009ad0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009ad4:	2b04      	cmp	r3, #4
 8009ad6:	d10e      	bne.n	8009af6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009ad8:	f7fe fbea 	bl	80082b0 <enq_lock>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d006      	beq.n	8009af0 <f_open+0xc4>
 8009ae2:	f107 0314 	add.w	r3, r7, #20
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7ff face 	bl	8009088 <dir_register>
 8009aec:	4603      	mov	r3, r0
 8009aee:	e000      	b.n	8009af2 <f_open+0xc6>
 8009af0:	2312      	movs	r3, #18
 8009af2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009af6:	79fb      	ldrb	r3, [r7, #7]
 8009af8:	f043 0308 	orr.w	r3, r3, #8
 8009afc:	71fb      	strb	r3, [r7, #7]
 8009afe:	e010      	b.n	8009b22 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009b00:	7ebb      	ldrb	r3, [r7, #26]
 8009b02:	f003 0311 	and.w	r3, r3, #17
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d003      	beq.n	8009b12 <f_open+0xe6>
					res = FR_DENIED;
 8009b0a:	2307      	movs	r3, #7
 8009b0c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009b10:	e007      	b.n	8009b22 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009b12:	79fb      	ldrb	r3, [r7, #7]
 8009b14:	f003 0304 	and.w	r3, r3, #4
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d002      	beq.n	8009b22 <f_open+0xf6>
 8009b1c:	2308      	movs	r3, #8
 8009b1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009b22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d168      	bne.n	8009bfc <f_open+0x1d0>
 8009b2a:	79fb      	ldrb	r3, [r7, #7]
 8009b2c:	f003 0308 	and.w	r3, r3, #8
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d063      	beq.n	8009bfc <f_open+0x1d0>
				dw = GET_FATTIME();
 8009b34:	f7fe f930 	bl	8007d98 <get_fattime>
 8009b38:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b3c:	330e      	adds	r3, #14
 8009b3e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7fe fa7e 	bl	8008042 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b48:	3316      	adds	r3, #22
 8009b4a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7fe fa78 	bl	8008042 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b54:	330b      	adds	r3, #11
 8009b56:	2220      	movs	r2, #32
 8009b58:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b5e:	4611      	mov	r1, r2
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7ff f9fd 	bl	8008f60 <ld_clust>
 8009b66:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7ff fa15 	bl	8008f9e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b76:	331c      	adds	r3, #28
 8009b78:	2100      	movs	r1, #0
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7fe fa61 	bl	8008042 <st_dword>
					fs->wflag = 1;
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	2201      	movs	r2, #1
 8009b84:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d037      	beq.n	8009bfc <f_open+0x1d0>
						dw = fs->winsect;
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b90:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009b92:	f107 0314 	add.w	r3, r7, #20
 8009b96:	2200      	movs	r2, #0
 8009b98:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7fe ff28 	bl	80089f0 <remove_chain>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8009ba6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d126      	bne.n	8009bfc <f_open+0x1d0>
							res = move_window(fs, dw);
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7fe fcd0 	bl	8008558 <move_window>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009bc2:	3a01      	subs	r2, #1
 8009bc4:	611a      	str	r2, [r3, #16]
 8009bc6:	e019      	b.n	8009bfc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009bc8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d115      	bne.n	8009bfc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009bd0:	7ebb      	ldrb	r3, [r7, #26]
 8009bd2:	f003 0310 	and.w	r3, r3, #16
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d003      	beq.n	8009be2 <f_open+0x1b6>
					res = FR_NO_FILE;
 8009bda:	2304      	movs	r3, #4
 8009bdc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009be0:	e00c      	b.n	8009bfc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009be2:	79fb      	ldrb	r3, [r7, #7]
 8009be4:	f003 0302 	and.w	r3, r3, #2
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d007      	beq.n	8009bfc <f_open+0x1d0>
 8009bec:	7ebb      	ldrb	r3, [r7, #26]
 8009bee:	f003 0301 	and.w	r3, r3, #1
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d002      	beq.n	8009bfc <f_open+0x1d0>
						res = FR_DENIED;
 8009bf6:	2307      	movs	r3, #7
 8009bf8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009bfc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d126      	bne.n	8009c52 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009c04:	79fb      	ldrb	r3, [r7, #7]
 8009c06:	f003 0308 	and.w	r3, r3, #8
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d003      	beq.n	8009c16 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8009c0e:	79fb      	ldrb	r3, [r7, #7]
 8009c10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c14:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009c1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009c24:	79fb      	ldrb	r3, [r7, #7]
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	bf8c      	ite	hi
 8009c2a:	2301      	movhi	r3, #1
 8009c2c:	2300      	movls	r3, #0
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	461a      	mov	r2, r3
 8009c32:	f107 0314 	add.w	r3, r7, #20
 8009c36:	4611      	mov	r1, r2
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7fe fb5b 	bl	80082f4 <inc_lock>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d102      	bne.n	8009c52 <f_open+0x226>
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009c52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f040 8095 	bne.w	8009d86 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c60:	4611      	mov	r1, r2
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7ff f97c 	bl	8008f60 <ld_clust>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c70:	331c      	adds	r3, #28
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fe f9a7 	bl	8007fc6 <ld_dword>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2200      	movs	r2, #0
 8009c82:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009c84:	693a      	ldr	r2, [r7, #16]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	88da      	ldrh	r2, [r3, #6]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	79fa      	ldrb	r2, [r7, #7]
 8009c96:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	3330      	adds	r3, #48	@ 0x30
 8009cae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7fe fa11 	bl	80080dc <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009cba:	79fb      	ldrb	r3, [r7, #7]
 8009cbc:	f003 0320 	and.w	r3, r3, #32
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d060      	beq.n	8009d86 <f_open+0x35a>
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d05c      	beq.n	8009d86 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	68da      	ldr	r2, [r3, #12]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	895b      	ldrh	r3, [r3, #10]
 8009cd8:	025b      	lsls	r3, r3, #9
 8009cda:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ce8:	e016      	b.n	8009d18 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7fe fced 	bl	80086ce <get_fat>
 8009cf4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009cf6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d802      	bhi.n	8009d02 <f_open+0x2d6>
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009d02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d08:	d102      	bne.n	8009d10 <f_open+0x2e4>
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009d10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009d12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d14:	1ad3      	subs	r3, r2, r3
 8009d16:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d18:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d103      	bne.n	8009d28 <f_open+0x2fc>
 8009d20:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d8e0      	bhi.n	8009cea <f_open+0x2be>
				}
				fp->clust = clst;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d2c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009d2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d127      	bne.n	8009d86 <f_open+0x35a>
 8009d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d022      	beq.n	8009d86 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009d44:	4618      	mov	r0, r3
 8009d46:	f7fe fca3 	bl	8008690 <clust2sect>
 8009d4a:	6478      	str	r0, [r7, #68]	@ 0x44
 8009d4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d103      	bne.n	8009d5a <f_open+0x32e>
						res = FR_INT_ERR;
 8009d52:	2302      	movs	r3, #2
 8009d54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009d58:	e015      	b.n	8009d86 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d5c:	0a5a      	lsrs	r2, r3, #9
 8009d5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d60:	441a      	add	r2, r3
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	7858      	ldrb	r0, [r3, #1]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6a1a      	ldr	r2, [r3, #32]
 8009d74:	2301      	movs	r3, #1
 8009d76:	f7fe f8af 	bl	8007ed8 <disk_read>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d002      	beq.n	8009d86 <f_open+0x35a>
 8009d80:	2301      	movs	r3, #1
 8009d82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009d86:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d002      	beq.n	8009d94 <f_open+0x368>
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2200      	movs	r2, #0
 8009d92:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8009d9a:	4611      	mov	r1, r2
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7fe fa10 	bl	80081c2 <unlock_fs>
 8009da2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3760      	adds	r7, #96	@ 0x60
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b08c      	sub	sp, #48	@ 0x30
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	60f8      	str	r0, [r7, #12]
 8009db6:	60b9      	str	r1, [r7, #8]
 8009db8:	607a      	str	r2, [r7, #4]
 8009dba:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f107 0210 	add.w	r2, r7, #16
 8009dcc:	4611      	mov	r1, r2
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7ff fd80 	bl	80098d4 <validate>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009dda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d107      	bne.n	8009df2 <f_write+0x44>
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	7d5b      	ldrb	r3, [r3, #21]
 8009de6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009dea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d009      	beq.n	8009e06 <f_write+0x58>
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8009df8:	4611      	mov	r1, r2
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7fe f9e1 	bl	80081c2 <unlock_fs>
 8009e00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009e04:	e173      	b.n	800a0ee <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	7d1b      	ldrb	r3, [r3, #20]
 8009e0a:	f003 0302 	and.w	r3, r3, #2
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d106      	bne.n	8009e20 <f_write+0x72>
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	2107      	movs	r1, #7
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fe f9d3 	bl	80081c2 <unlock_fs>
 8009e1c:	2307      	movs	r3, #7
 8009e1e:	e166      	b.n	800a0ee <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	699a      	ldr	r2, [r3, #24]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	441a      	add	r2, r3
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	699b      	ldr	r3, [r3, #24]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	f080 814b 	bcs.w	800a0c8 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	699b      	ldr	r3, [r3, #24]
 8009e36:	43db      	mvns	r3, r3
 8009e38:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009e3a:	e145      	b.n	800a0c8 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	699b      	ldr	r3, [r3, #24]
 8009e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	f040 8101 	bne.w	800a04c <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	699b      	ldr	r3, [r3, #24]
 8009e4e:	0a5b      	lsrs	r3, r3, #9
 8009e50:	693a      	ldr	r2, [r7, #16]
 8009e52:	8952      	ldrh	r2, [r2, #10]
 8009e54:	3a01      	subs	r2, #1
 8009e56:	4013      	ands	r3, r2
 8009e58:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d14d      	bne.n	8009efc <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	699b      	ldr	r3, [r3, #24]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10c      	bne.n	8009e82 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d11a      	bne.n	8009eaa <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2100      	movs	r1, #0
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7fe fe1e 	bl	8008aba <create_chain>
 8009e7e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009e80:	e013      	b.n	8009eaa <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d007      	beq.n	8009e9a <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	699b      	ldr	r3, [r3, #24]
 8009e8e:	4619      	mov	r1, r3
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f7fe feaa 	bl	8008bea <clmt_clust>
 8009e96:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009e98:	e007      	b.n	8009eaa <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009e9a:	68fa      	ldr	r2, [r7, #12]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	69db      	ldr	r3, [r3, #28]
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	4610      	mov	r0, r2
 8009ea4:	f7fe fe09 	bl	8008aba <create_chain>
 8009ea8:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f000 8110 	beq.w	800a0d2 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d109      	bne.n	8009ecc <f_write+0x11e>
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2202      	movs	r2, #2
 8009ebc:	755a      	strb	r2, [r3, #21]
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	2102      	movs	r1, #2
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7fe f97d 	bl	80081c2 <unlock_fs>
 8009ec8:	2302      	movs	r3, #2
 8009eca:	e110      	b.n	800a0ee <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ed2:	d109      	bne.n	8009ee8 <f_write+0x13a>
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	755a      	strb	r2, [r3, #21]
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	2101      	movs	r1, #1
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7fe f96f 	bl	80081c2 <unlock_fs>
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	e102      	b.n	800a0ee <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009eec:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d102      	bne.n	8009efc <f_write+0x14e>
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009efa:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	7d1b      	ldrb	r3, [r3, #20]
 8009f00:	b25b      	sxtb	r3, r3
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	da1d      	bge.n	8009f42 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	7858      	ldrb	r0, [r3, #1]
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6a1a      	ldr	r2, [r3, #32]
 8009f14:	2301      	movs	r3, #1
 8009f16:	f7fd ffff 	bl	8007f18 <disk_write>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d009      	beq.n	8009f34 <f_write+0x186>
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2201      	movs	r2, #1
 8009f24:	755a      	strb	r2, [r3, #21]
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	2101      	movs	r1, #1
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7fe f949 	bl	80081c2 <unlock_fs>
 8009f30:	2301      	movs	r3, #1
 8009f32:	e0dc      	b.n	800a0ee <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	7d1b      	ldrb	r3, [r3, #20]
 8009f38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f3c:	b2da      	uxtb	r2, r3
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009f42:	693a      	ldr	r2, [r7, #16]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	69db      	ldr	r3, [r3, #28]
 8009f48:	4619      	mov	r1, r3
 8009f4a:	4610      	mov	r0, r2
 8009f4c:	f7fe fba0 	bl	8008690 <clust2sect>
 8009f50:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d109      	bne.n	8009f6c <f_write+0x1be>
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2202      	movs	r2, #2
 8009f5c:	755a      	strb	r2, [r3, #21]
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	2102      	movs	r1, #2
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7fe f92d 	bl	80081c2 <unlock_fs>
 8009f68:	2302      	movs	r3, #2
 8009f6a:	e0c0      	b.n	800a0ee <f_write+0x340>
			sect += csect;
 8009f6c:	697a      	ldr	r2, [r7, #20]
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	4413      	add	r3, r2
 8009f72:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	0a5b      	lsrs	r3, r3, #9
 8009f78:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009f7a:	6a3b      	ldr	r3, [r7, #32]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d041      	beq.n	800a004 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009f80:	69ba      	ldr	r2, [r7, #24]
 8009f82:	6a3b      	ldr	r3, [r7, #32]
 8009f84:	4413      	add	r3, r2
 8009f86:	693a      	ldr	r2, [r7, #16]
 8009f88:	8952      	ldrh	r2, [r2, #10]
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d905      	bls.n	8009f9a <f_write+0x1ec>
					cc = fs->csize - csect;
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	895b      	ldrh	r3, [r3, #10]
 8009f92:	461a      	mov	r2, r3
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	1ad3      	subs	r3, r2, r3
 8009f98:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	7858      	ldrb	r0, [r3, #1]
 8009f9e:	6a3b      	ldr	r3, [r7, #32]
 8009fa0:	697a      	ldr	r2, [r7, #20]
 8009fa2:	69f9      	ldr	r1, [r7, #28]
 8009fa4:	f7fd ffb8 	bl	8007f18 <disk_write>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d009      	beq.n	8009fc2 <f_write+0x214>
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	755a      	strb	r2, [r3, #21]
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	2101      	movs	r1, #1
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7fe f902 	bl	80081c2 <unlock_fs>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e095      	b.n	800a0ee <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6a1a      	ldr	r2, [r3, #32]
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	1ad3      	subs	r3, r2, r3
 8009fca:	6a3a      	ldr	r2, [r7, #32]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d915      	bls.n	8009ffc <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6a1a      	ldr	r2, [r3, #32]
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	1ad3      	subs	r3, r2, r3
 8009fde:	025b      	lsls	r3, r3, #9
 8009fe0:	69fa      	ldr	r2, [r7, #28]
 8009fe2:	4413      	add	r3, r2
 8009fe4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009fe8:	4619      	mov	r1, r3
 8009fea:	f7fe f856 	bl	800809a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	7d1b      	ldrb	r3, [r3, #20]
 8009ff2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ff6:	b2da      	uxtb	r2, r3
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009ffc:	6a3b      	ldr	r3, [r7, #32]
 8009ffe:	025b      	lsls	r3, r3, #9
 800a000:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800a002:	e044      	b.n	800a08e <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6a1b      	ldr	r3, [r3, #32]
 800a008:	697a      	ldr	r2, [r7, #20]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d01b      	beq.n	800a046 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	699a      	ldr	r2, [r3, #24]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a016:	429a      	cmp	r2, r3
 800a018:	d215      	bcs.n	800a046 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	7858      	ldrb	r0, [r3, #1]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a024:	2301      	movs	r3, #1
 800a026:	697a      	ldr	r2, [r7, #20]
 800a028:	f7fd ff56 	bl	8007ed8 <disk_read>
 800a02c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d009      	beq.n	800a046 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2201      	movs	r2, #1
 800a036:	755a      	strb	r2, [r3, #21]
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	2101      	movs	r1, #1
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7fe f8c0 	bl	80081c2 <unlock_fs>
 800a042:	2301      	movs	r3, #1
 800a044:	e053      	b.n	800a0ee <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	697a      	ldr	r2, [r7, #20]
 800a04a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	699b      	ldr	r3, [r3, #24]
 800a050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a054:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800a058:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a05a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d901      	bls.n	800a066 <f_write+0x2b8>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	699b      	ldr	r3, [r3, #24]
 800a070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a074:	4413      	add	r3, r2
 800a076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a078:	69f9      	ldr	r1, [r7, #28]
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7fe f80d 	bl	800809a <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	7d1b      	ldrb	r3, [r3, #20]
 800a084:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a088:	b2da      	uxtb	r2, r3
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a08e:	69fa      	ldr	r2, [r7, #28]
 800a090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a092:	4413      	add	r3, r2
 800a094:	61fb      	str	r3, [r7, #28]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	699a      	ldr	r2, [r3, #24]
 800a09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a09c:	441a      	add	r2, r3
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	619a      	str	r2, [r3, #24]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	68da      	ldr	r2, [r3, #12]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	699b      	ldr	r3, [r3, #24]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	bf38      	it	cc
 800a0ae:	461a      	movcc	r2, r3
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	60da      	str	r2, [r3, #12]
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ba:	441a      	add	r2, r3
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	601a      	str	r2, [r3, #0]
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c4:	1ad3      	subs	r3, r2, r3
 800a0c6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f47f aeb6 	bne.w	8009e3c <f_write+0x8e>
 800a0d0:	e000      	b.n	800a0d4 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a0d2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	7d1b      	ldrb	r3, [r3, #20]
 800a0d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0dc:	b2da      	uxtb	r2, r3
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7fe f86b 	bl	80081c2 <unlock_fs>
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3730      	adds	r7, #48	@ 0x30
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b086      	sub	sp, #24
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f107 0208 	add.w	r2, r7, #8
 800a104:	4611      	mov	r1, r2
 800a106:	4618      	mov	r0, r3
 800a108:	f7ff fbe4 	bl	80098d4 <validate>
 800a10c:	4603      	mov	r3, r0
 800a10e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a110:	7dfb      	ldrb	r3, [r7, #23]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d16d      	bne.n	800a1f2 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	7d1b      	ldrb	r3, [r3, #20]
 800a11a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d067      	beq.n	800a1f2 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	7d1b      	ldrb	r3, [r3, #20]
 800a126:	b25b      	sxtb	r3, r3
 800a128:	2b00      	cmp	r3, #0
 800a12a:	da1a      	bge.n	800a162 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	7858      	ldrb	r0, [r3, #1]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a1a      	ldr	r2, [r3, #32]
 800a13a:	2301      	movs	r3, #1
 800a13c:	f7fd feec 	bl	8007f18 <disk_write>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d006      	beq.n	800a154 <f_sync+0x5e>
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	2101      	movs	r1, #1
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fe f839 	bl	80081c2 <unlock_fs>
 800a150:	2301      	movs	r3, #1
 800a152:	e055      	b.n	800a200 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	7d1b      	ldrb	r3, [r3, #20]
 800a158:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a15c:	b2da      	uxtb	r2, r3
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a162:	f7fd fe19 	bl	8007d98 <get_fattime>
 800a166:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a168:	68ba      	ldr	r2, [r7, #8]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a16e:	4619      	mov	r1, r3
 800a170:	4610      	mov	r0, r2
 800a172:	f7fe f9f1 	bl	8008558 <move_window>
 800a176:	4603      	mov	r3, r0
 800a178:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a17a:	7dfb      	ldrb	r3, [r7, #23]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d138      	bne.n	800a1f2 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a184:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	330b      	adds	r3, #11
 800a18a:	781a      	ldrb	r2, [r3, #0]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	330b      	adds	r3, #11
 800a190:	f042 0220 	orr.w	r2, r2, #32
 800a194:	b2d2      	uxtb	r2, r2
 800a196:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6818      	ldr	r0, [r3, #0]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	68f9      	ldr	r1, [r7, #12]
 800a1a4:	f7fe fefb 	bl	8008f9e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f103 021c 	add.w	r2, r3, #28
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	4610      	mov	r0, r2
 800a1b6:	f7fd ff44 	bl	8008042 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	3316      	adds	r3, #22
 800a1be:	6939      	ldr	r1, [r7, #16]
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7fd ff3e 	bl	8008042 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	3312      	adds	r3, #18
 800a1ca:	2100      	movs	r1, #0
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7fd ff1d 	bl	800800c <st_word>
					fs->wflag = 1;
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7fe f9ea 	bl	80085b4 <sync_fs>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	7d1b      	ldrb	r3, [r3, #20]
 800a1e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1ec:	b2da      	uxtb	r2, r3
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	7dfa      	ldrb	r2, [r7, #23]
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7fd ffe2 	bl	80081c2 <unlock_fs>
 800a1fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a200:	4618      	mov	r0, r3
 800a202:	3718      	adds	r7, #24
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f7ff ff70 	bl	800a0f6 <f_sync>
 800a216:	4603      	mov	r3, r0
 800a218:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a21a:	7bfb      	ldrb	r3, [r7, #15]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d11d      	bne.n	800a25c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f107 0208 	add.w	r2, r7, #8
 800a226:	4611      	mov	r1, r2
 800a228:	4618      	mov	r0, r3
 800a22a:	f7ff fb53 	bl	80098d4 <validate>
 800a22e:	4603      	mov	r3, r0
 800a230:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a232:	7bfb      	ldrb	r3, [r7, #15]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d111      	bne.n	800a25c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7fe f8e7 	bl	8008410 <dec_lock>
 800a242:	4603      	mov	r3, r0
 800a244:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a246:	7bfb      	ldrb	r3, [r7, #15]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d102      	bne.n	800a252 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	2100      	movs	r1, #0
 800a256:	4618      	mov	r0, r3
 800a258:	f7fd ffb3 	bl	80081c2 <unlock_fs>
#endif
		}
	}
	return res;
 800a25c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b084      	sub	sp, #16
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
 800a26e:	460b      	mov	r3, r1
 800a270:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a272:	78fb      	ldrb	r3, [r7, #3]
 800a274:	2b0a      	cmp	r3, #10
 800a276:	d103      	bne.n	800a280 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a278:	210d      	movs	r1, #13
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f7ff fff3 	bl	800a266 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	db25      	blt.n	800a2d8 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	1c5a      	adds	r2, r3, #1
 800a290:	60fa      	str	r2, [r7, #12]
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	4413      	add	r3, r2
 800a296:	78fa      	ldrb	r2, [r7, #3]
 800a298:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2b3c      	cmp	r3, #60	@ 0x3c
 800a29e:	dd12      	ble.n	800a2c6 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6818      	ldr	r0, [r3, #0]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f103 010c 	add.w	r1, r3, #12
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	f107 0308 	add.w	r3, r7, #8
 800a2b0:	f7ff fd7d 	bl	8009dae <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d101      	bne.n	800a2c0 <putc_bfd+0x5a>
 800a2bc:	2300      	movs	r3, #0
 800a2be:	e001      	b.n	800a2c4 <putc_bfd+0x5e>
 800a2c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2c4:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	1c5a      	adds	r2, r3, #1
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	609a      	str	r2, [r3, #8]
 800a2d6:	e000      	b.n	800a2da <putc_bfd+0x74>
	if (i < 0) return;
 800a2d8:	bf00      	nop
}
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	db16      	blt.n	800a31e <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6818      	ldr	r0, [r3, #0]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f103 010c 	add.w	r1, r3, #12
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	461a      	mov	r2, r3
 800a300:	f107 030c 	add.w	r3, r7, #12
 800a304:	f7ff fd53 	bl	8009dae <f_write>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d107      	bne.n	800a31e <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	68fa      	ldr	r2, [r7, #12]
 800a314:	4293      	cmp	r3, r2
 800a316:	d102      	bne.n	800a31e <putc_flush+0x3e>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	e001      	b.n	800a322 <putc_flush+0x42>
	return EOF;
 800a31e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a322:	4618      	mov	r0, r3
 800a324:	3710      	adds	r7, #16
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a32a:	b480      	push	{r7}
 800a32c:	b083      	sub	sp, #12
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
 800a332:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	683a      	ldr	r2, [r7, #0]
 800a338:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2200      	movs	r2, #0
 800a33e:	605a      	str	r2, [r3, #4]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	685a      	ldr	r2, [r3, #4]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	609a      	str	r2, [r3, #8]
}
 800a348:	bf00      	nop
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b096      	sub	sp, #88	@ 0x58
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800a35e:	f107 030c 	add.w	r3, r7, #12
 800a362:	6839      	ldr	r1, [r7, #0]
 800a364:	4618      	mov	r0, r3
 800a366:	f7ff ffe0 	bl	800a32a <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800a36a:	e009      	b.n	800a380 <f_puts+0x2c>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	1c5a      	adds	r2, r3, #1
 800a370:	607a      	str	r2, [r7, #4]
 800a372:	781a      	ldrb	r2, [r3, #0]
 800a374:	f107 030c 	add.w	r3, r7, #12
 800a378:	4611      	mov	r1, r2
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7ff ff73 	bl	800a266 <putc_bfd>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d1f1      	bne.n	800a36c <f_puts+0x18>
	return putc_flush(&pb);
 800a388:	f107 030c 	add.w	r3, r7, #12
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7ff ffa7 	bl	800a2e0 <putc_flush>
 800a392:	4603      	mov	r3, r0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3758      	adds	r7, #88	@ 0x58
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b087      	sub	sp, #28
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a3b2:	4b1f      	ldr	r3, [pc, #124]	@ (800a430 <FATFS_LinkDriverEx+0x94>)
 800a3b4:	7a5b      	ldrb	r3, [r3, #9]
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d131      	bne.n	800a420 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a3bc:	4b1c      	ldr	r3, [pc, #112]	@ (800a430 <FATFS_LinkDriverEx+0x94>)
 800a3be:	7a5b      	ldrb	r3, [r3, #9]
 800a3c0:	b2db      	uxtb	r3, r3
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	4b1a      	ldr	r3, [pc, #104]	@ (800a430 <FATFS_LinkDriverEx+0x94>)
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a3ca:	4b19      	ldr	r3, [pc, #100]	@ (800a430 <FATFS_LinkDriverEx+0x94>)
 800a3cc:	7a5b      	ldrb	r3, [r3, #9]
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	4a17      	ldr	r2, [pc, #92]	@ (800a430 <FATFS_LinkDriverEx+0x94>)
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	4413      	add	r3, r2
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a3da:	4b15      	ldr	r3, [pc, #84]	@ (800a430 <FATFS_LinkDriverEx+0x94>)
 800a3dc:	7a5b      	ldrb	r3, [r3, #9]
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	4b13      	ldr	r3, [pc, #76]	@ (800a430 <FATFS_LinkDriverEx+0x94>)
 800a3e4:	4413      	add	r3, r2
 800a3e6:	79fa      	ldrb	r2, [r7, #7]
 800a3e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a3ea:	4b11      	ldr	r3, [pc, #68]	@ (800a430 <FATFS_LinkDriverEx+0x94>)
 800a3ec:	7a5b      	ldrb	r3, [r3, #9]
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	1c5a      	adds	r2, r3, #1
 800a3f2:	b2d1      	uxtb	r1, r2
 800a3f4:	4a0e      	ldr	r2, [pc, #56]	@ (800a430 <FATFS_LinkDriverEx+0x94>)
 800a3f6:	7251      	strb	r1, [r2, #9]
 800a3f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a3fa:	7dbb      	ldrb	r3, [r7, #22]
 800a3fc:	3330      	adds	r3, #48	@ 0x30
 800a3fe:	b2da      	uxtb	r2, r3
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	3301      	adds	r3, #1
 800a408:	223a      	movs	r2, #58	@ 0x3a
 800a40a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	3302      	adds	r3, #2
 800a410:	222f      	movs	r2, #47	@ 0x2f
 800a412:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	3303      	adds	r3, #3
 800a418:	2200      	movs	r2, #0
 800a41a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a41c:	2300      	movs	r3, #0
 800a41e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a420:	7dfb      	ldrb	r3, [r7, #23]
}
 800a422:	4618      	mov	r0, r3
 800a424:	371c      	adds	r7, #28
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop
 800a430:	200010e8 	.word	0x200010e8

0800a434 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a43e:	2200      	movs	r2, #0
 800a440:	6839      	ldr	r1, [r7, #0]
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f7ff ffaa 	bl	800a39c <FATFS_LinkDriverEx>
 800a448:	4603      	mov	r3, r0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b084      	sub	sp, #16
 800a456:	af00      	add	r7, sp, #0
 800a458:	4603      	mov	r3, r0
 800a45a:	6039      	str	r1, [r7, #0]
 800a45c:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800a45e:	2200      	movs	r2, #0
 800a460:	2101      	movs	r1, #1
 800a462:	2001      	movs	r0, #1
 800a464:	f000 f982 	bl	800a76c <osSemaphoreNew>
 800a468:	4602      	mov	r2, r0
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	bf14      	ite	ne
 800a476:	2301      	movne	r3, #1
 800a478:	2300      	moveq	r3, #0
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	60fb      	str	r3, [r7, #12]

    return ret;
 800a47e:	68fb      	ldr	r3, [r7, #12]
}
 800a480:	4618      	mov	r0, r3
 800a482:	3710      	adds	r7, #16
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fac5 	bl	800aa20 <osSemaphoreDelete>
#endif
    return 1;
 800a496:	2301      	movs	r3, #1
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3708      	adds	r7, #8
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800a4ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 f9f7 	bl	800a8a4 <osSemaphoreAcquire>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d101      	bne.n	800a4c0 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b082      	sub	sp, #8
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 fa4c 	bl	800a970 <osSemaphoreRelease>
#endif
}
 800a4d8:	bf00      	nop
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a4e0:	b480      	push	{r7}
 800a4e2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a4e4:	bf00      	nop
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr
	...

0800a4f0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a4f0:	b480      	push	{r7}
 800a4f2:	b085      	sub	sp, #20
 800a4f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4f6:	f3ef 8305 	mrs	r3, IPSR
 800a4fa:	60bb      	str	r3, [r7, #8]
  return(result);
 800a4fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d10f      	bne.n	800a522 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a502:	f3ef 8310 	mrs	r3, PRIMASK
 800a506:	607b      	str	r3, [r7, #4]
  return(result);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d105      	bne.n	800a51a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a50e:	f3ef 8311 	mrs	r3, BASEPRI
 800a512:	603b      	str	r3, [r7, #0]
  return(result);
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d007      	beq.n	800a52a <osKernelInitialize+0x3a>
 800a51a:	4b0e      	ldr	r3, [pc, #56]	@ (800a554 <osKernelInitialize+0x64>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2b02      	cmp	r3, #2
 800a520:	d103      	bne.n	800a52a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a522:	f06f 0305 	mvn.w	r3, #5
 800a526:	60fb      	str	r3, [r7, #12]
 800a528:	e00c      	b.n	800a544 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a52a:	4b0a      	ldr	r3, [pc, #40]	@ (800a554 <osKernelInitialize+0x64>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d105      	bne.n	800a53e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a532:	4b08      	ldr	r3, [pc, #32]	@ (800a554 <osKernelInitialize+0x64>)
 800a534:	2201      	movs	r2, #1
 800a536:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a538:	2300      	movs	r3, #0
 800a53a:	60fb      	str	r3, [r7, #12]
 800a53c:	e002      	b.n	800a544 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a53e:	f04f 33ff 	mov.w	r3, #4294967295
 800a542:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a544:	68fb      	ldr	r3, [r7, #12]
}
 800a546:	4618      	mov	r0, r3
 800a548:	3714      	adds	r7, #20
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	200010f4 	.word	0x200010f4

0800a558 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a55e:	f3ef 8305 	mrs	r3, IPSR
 800a562:	60bb      	str	r3, [r7, #8]
  return(result);
 800a564:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a566:	2b00      	cmp	r3, #0
 800a568:	d10f      	bne.n	800a58a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a56a:	f3ef 8310 	mrs	r3, PRIMASK
 800a56e:	607b      	str	r3, [r7, #4]
  return(result);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d105      	bne.n	800a582 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a576:	f3ef 8311 	mrs	r3, BASEPRI
 800a57a:	603b      	str	r3, [r7, #0]
  return(result);
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d007      	beq.n	800a592 <osKernelStart+0x3a>
 800a582:	4b0f      	ldr	r3, [pc, #60]	@ (800a5c0 <osKernelStart+0x68>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2b02      	cmp	r3, #2
 800a588:	d103      	bne.n	800a592 <osKernelStart+0x3a>
    stat = osErrorISR;
 800a58a:	f06f 0305 	mvn.w	r3, #5
 800a58e:	60fb      	str	r3, [r7, #12]
 800a590:	e010      	b.n	800a5b4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a592:	4b0b      	ldr	r3, [pc, #44]	@ (800a5c0 <osKernelStart+0x68>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	2b01      	cmp	r3, #1
 800a598:	d109      	bne.n	800a5ae <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a59a:	f7ff ffa1 	bl	800a4e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a59e:	4b08      	ldr	r3, [pc, #32]	@ (800a5c0 <osKernelStart+0x68>)
 800a5a0:	2202      	movs	r2, #2
 800a5a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a5a4:	f001 fde6 	bl	800c174 <vTaskStartScheduler>
      stat = osOK;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	60fb      	str	r3, [r7, #12]
 800a5ac:	e002      	b.n	800a5b4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a5b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	200010f4 	.word	0x200010f4

0800a5c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b090      	sub	sp, #64	@ 0x40
 800a5c8:	af04      	add	r7, sp, #16
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5d4:	f3ef 8305 	mrs	r3, IPSR
 800a5d8:	61fb      	str	r3, [r7, #28]
  return(result);
 800a5da:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	f040 808f 	bne.w	800a700 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5e2:	f3ef 8310 	mrs	r3, PRIMASK
 800a5e6:	61bb      	str	r3, [r7, #24]
  return(result);
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d105      	bne.n	800a5fa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a5ee:	f3ef 8311 	mrs	r3, BASEPRI
 800a5f2:	617b      	str	r3, [r7, #20]
  return(result);
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d003      	beq.n	800a602 <osThreadNew+0x3e>
 800a5fa:	4b44      	ldr	r3, [pc, #272]	@ (800a70c <osThreadNew+0x148>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d07e      	beq.n	800a700 <osThreadNew+0x13c>
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d07b      	beq.n	800a700 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800a608:	2380      	movs	r3, #128	@ 0x80
 800a60a:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a60c:	2318      	movs	r3, #24
 800a60e:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800a610:	2300      	movs	r3, #0
 800a612:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800a614:	f04f 33ff 	mov.w	r3, #4294967295
 800a618:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d045      	beq.n	800a6ac <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d002      	beq.n	800a62e <osThreadNew+0x6a>
        name = attr->name;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	699b      	ldr	r3, [r3, #24]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d002      	beq.n	800a63c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	699b      	ldr	r3, [r3, #24]
 800a63a:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d008      	beq.n	800a654 <osThreadNew+0x90>
 800a642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a644:	2b38      	cmp	r3, #56	@ 0x38
 800a646:	d805      	bhi.n	800a654 <osThreadNew+0x90>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	f003 0301 	and.w	r3, r3, #1
 800a650:	2b00      	cmp	r3, #0
 800a652:	d001      	beq.n	800a658 <osThreadNew+0x94>
        return (NULL);
 800a654:	2300      	movs	r3, #0
 800a656:	e054      	b.n	800a702 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	695b      	ldr	r3, [r3, #20]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d003      	beq.n	800a668 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	695b      	ldr	r3, [r3, #20]
 800a664:	089b      	lsrs	r3, r3, #2
 800a666:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d00e      	beq.n	800a68e <osThreadNew+0xca>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	2b5b      	cmp	r3, #91	@ 0x5b
 800a676:	d90a      	bls.n	800a68e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d006      	beq.n	800a68e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	695b      	ldr	r3, [r3, #20]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d002      	beq.n	800a68e <osThreadNew+0xca>
        mem = 1;
 800a688:	2301      	movs	r3, #1
 800a68a:	623b      	str	r3, [r7, #32]
 800a68c:	e010      	b.n	800a6b0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d10c      	bne.n	800a6b0 <osThreadNew+0xec>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d108      	bne.n	800a6b0 <osThreadNew+0xec>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	691b      	ldr	r3, [r3, #16]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d104      	bne.n	800a6b0 <osThreadNew+0xec>
          mem = 0;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	623b      	str	r3, [r7, #32]
 800a6aa:	e001      	b.n	800a6b0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a6b0:	6a3b      	ldr	r3, [r7, #32]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d110      	bne.n	800a6d8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a6be:	9202      	str	r2, [sp, #8]
 800a6c0:	9301      	str	r3, [sp, #4]
 800a6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c4:	9300      	str	r3, [sp, #0]
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	f001 fb6b 	bl	800bda8 <xTaskCreateStatic>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	613b      	str	r3, [r7, #16]
 800a6d6:	e013      	b.n	800a700 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800a6d8:	6a3b      	ldr	r3, [r7, #32]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d110      	bne.n	800a700 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a6de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e0:	b29a      	uxth	r2, r3
 800a6e2:	f107 0310 	add.w	r3, r7, #16
 800a6e6:	9301      	str	r3, [sp, #4]
 800a6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ea:	9300      	str	r3, [sp, #0]
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f001 fbbf 	bl	800be74 <xTaskCreate>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d001      	beq.n	800a700 <osThreadNew+0x13c>
          hTask = NULL;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a700:	693b      	ldr	r3, [r7, #16]
}
 800a702:	4618      	mov	r0, r3
 800a704:	3730      	adds	r7, #48	@ 0x30
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	200010f4 	.word	0x200010f4

0800a710 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a710:	b580      	push	{r7, lr}
 800a712:	b086      	sub	sp, #24
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a718:	f3ef 8305 	mrs	r3, IPSR
 800a71c:	613b      	str	r3, [r7, #16]
  return(result);
 800a71e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a720:	2b00      	cmp	r3, #0
 800a722:	d10f      	bne.n	800a744 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a724:	f3ef 8310 	mrs	r3, PRIMASK
 800a728:	60fb      	str	r3, [r7, #12]
  return(result);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d105      	bne.n	800a73c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a730:	f3ef 8311 	mrs	r3, BASEPRI
 800a734:	60bb      	str	r3, [r7, #8]
  return(result);
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d007      	beq.n	800a74c <osDelay+0x3c>
 800a73c:	4b0a      	ldr	r3, [pc, #40]	@ (800a768 <osDelay+0x58>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2b02      	cmp	r3, #2
 800a742:	d103      	bne.n	800a74c <osDelay+0x3c>
    stat = osErrorISR;
 800a744:	f06f 0305 	mvn.w	r3, #5
 800a748:	617b      	str	r3, [r7, #20]
 800a74a:	e007      	b.n	800a75c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a74c:	2300      	movs	r3, #0
 800a74e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d002      	beq.n	800a75c <osDelay+0x4c>
      vTaskDelay(ticks);
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f001 fcd4 	bl	800c104 <vTaskDelay>
    }
  }

  return (stat);
 800a75c:	697b      	ldr	r3, [r7, #20]
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3718      	adds	r7, #24
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	200010f4 	.word	0x200010f4

0800a76c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b08c      	sub	sp, #48	@ 0x30
 800a770:	af02      	add	r7, sp, #8
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a778:	2300      	movs	r3, #0
 800a77a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a77c:	f3ef 8305 	mrs	r3, IPSR
 800a780:	61bb      	str	r3, [r7, #24]
  return(result);
 800a782:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a784:	2b00      	cmp	r3, #0
 800a786:	f040 8086 	bne.w	800a896 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a78a:	f3ef 8310 	mrs	r3, PRIMASK
 800a78e:	617b      	str	r3, [r7, #20]
  return(result);
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d105      	bne.n	800a7a2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a796:	f3ef 8311 	mrs	r3, BASEPRI
 800a79a:	613b      	str	r3, [r7, #16]
  return(result);
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d003      	beq.n	800a7aa <osSemaphoreNew+0x3e>
 800a7a2:	4b3f      	ldr	r3, [pc, #252]	@ (800a8a0 <osSemaphoreNew+0x134>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	2b02      	cmp	r3, #2
 800a7a8:	d075      	beq.n	800a896 <osSemaphoreNew+0x12a>
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d072      	beq.n	800a896 <osSemaphoreNew+0x12a>
 800a7b0:	68ba      	ldr	r2, [r7, #8]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d86e      	bhi.n	800a896 <osSemaphoreNew+0x12a>
    mem = -1;
 800a7b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a7bc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d015      	beq.n	800a7f0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d006      	beq.n	800a7da <osSemaphoreNew+0x6e>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	2b4f      	cmp	r3, #79	@ 0x4f
 800a7d2:	d902      	bls.n	800a7da <osSemaphoreNew+0x6e>
        mem = 1;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	623b      	str	r3, [r7, #32]
 800a7d8:	e00c      	b.n	800a7f4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d108      	bne.n	800a7f4 <osSemaphoreNew+0x88>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d104      	bne.n	800a7f4 <osSemaphoreNew+0x88>
          mem = 0;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	623b      	str	r3, [r7, #32]
 800a7ee:	e001      	b.n	800a7f4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800a7f4:	6a3b      	ldr	r3, [r7, #32]
 800a7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7fa:	d04c      	beq.n	800a896 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d128      	bne.n	800a854 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800a802:	6a3b      	ldr	r3, [r7, #32]
 800a804:	2b01      	cmp	r3, #1
 800a806:	d10a      	bne.n	800a81e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	2203      	movs	r2, #3
 800a80e:	9200      	str	r2, [sp, #0]
 800a810:	2200      	movs	r2, #0
 800a812:	2100      	movs	r1, #0
 800a814:	2001      	movs	r0, #1
 800a816:	f000 fa8d 	bl	800ad34 <xQueueGenericCreateStatic>
 800a81a:	6278      	str	r0, [r7, #36]	@ 0x24
 800a81c:	e005      	b.n	800a82a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800a81e:	2203      	movs	r2, #3
 800a820:	2100      	movs	r1, #0
 800a822:	2001      	movs	r0, #1
 800a824:	f000 fb0d 	bl	800ae42 <xQueueGenericCreate>
 800a828:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d022      	beq.n	800a876 <osSemaphoreNew+0x10a>
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d01f      	beq.n	800a876 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a836:	2300      	movs	r3, #0
 800a838:	2200      	movs	r2, #0
 800a83a:	2100      	movs	r1, #0
 800a83c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a83e:	f000 fc0f 	bl	800b060 <xQueueGenericSend>
 800a842:	4603      	mov	r3, r0
 800a844:	2b01      	cmp	r3, #1
 800a846:	d016      	beq.n	800a876 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800a848:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a84a:	f001 f8d7 	bl	800b9fc <vQueueDelete>
            hSemaphore = NULL;
 800a84e:	2300      	movs	r3, #0
 800a850:	627b      	str	r3, [r7, #36]	@ 0x24
 800a852:	e010      	b.n	800a876 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800a854:	6a3b      	ldr	r3, [r7, #32]
 800a856:	2b01      	cmp	r3, #1
 800a858:	d108      	bne.n	800a86c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	689b      	ldr	r3, [r3, #8]
 800a85e:	461a      	mov	r2, r3
 800a860:	68b9      	ldr	r1, [r7, #8]
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	f000 fb85 	bl	800af72 <xQueueCreateCountingSemaphoreStatic>
 800a868:	6278      	str	r0, [r7, #36]	@ 0x24
 800a86a:	e004      	b.n	800a876 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a86c:	68b9      	ldr	r1, [r7, #8]
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	f000 fbbc 	bl	800afec <xQueueCreateCountingSemaphore>
 800a874:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d00c      	beq.n	800a896 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d003      	beq.n	800a88a <osSemaphoreNew+0x11e>
          name = attr->name;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	61fb      	str	r3, [r7, #28]
 800a888:	e001      	b.n	800a88e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800a88a:	2300      	movs	r3, #0
 800a88c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a88e:	69f9      	ldr	r1, [r7, #28]
 800a890:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a892:	f001 fa01 	bl	800bc98 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3728      	adds	r7, #40	@ 0x28
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	200010f4 	.word	0x200010f4

0800a8a4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b088      	sub	sp, #32
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800a8b6:	69bb      	ldr	r3, [r7, #24]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d103      	bne.n	800a8c4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a8bc:	f06f 0303 	mvn.w	r3, #3
 800a8c0:	61fb      	str	r3, [r7, #28]
 800a8c2:	e04b      	b.n	800a95c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8c4:	f3ef 8305 	mrs	r3, IPSR
 800a8c8:	617b      	str	r3, [r7, #20]
  return(result);
 800a8ca:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d10f      	bne.n	800a8f0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8d0:	f3ef 8310 	mrs	r3, PRIMASK
 800a8d4:	613b      	str	r3, [r7, #16]
  return(result);
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d105      	bne.n	800a8e8 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a8dc:	f3ef 8311 	mrs	r3, BASEPRI
 800a8e0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d026      	beq.n	800a936 <osSemaphoreAcquire+0x92>
 800a8e8:	4b1f      	ldr	r3, [pc, #124]	@ (800a968 <osSemaphoreAcquire+0xc4>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	2b02      	cmp	r3, #2
 800a8ee:	d122      	bne.n	800a936 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d003      	beq.n	800a8fe <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800a8f6:	f06f 0303 	mvn.w	r3, #3
 800a8fa:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800a8fc:	e02d      	b.n	800a95a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800a8fe:	2300      	movs	r3, #0
 800a900:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a902:	f107 0308 	add.w	r3, r7, #8
 800a906:	461a      	mov	r2, r3
 800a908:	2100      	movs	r1, #0
 800a90a:	69b8      	ldr	r0, [r7, #24]
 800a90c:	f000 ffee 	bl	800b8ec <xQueueReceiveFromISR>
 800a910:	4603      	mov	r3, r0
 800a912:	2b01      	cmp	r3, #1
 800a914:	d003      	beq.n	800a91e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800a916:	f06f 0302 	mvn.w	r3, #2
 800a91a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800a91c:	e01d      	b.n	800a95a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d01a      	beq.n	800a95a <osSemaphoreAcquire+0xb6>
 800a924:	4b11      	ldr	r3, [pc, #68]	@ (800a96c <osSemaphoreAcquire+0xc8>)
 800a926:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a92a:	601a      	str	r2, [r3, #0]
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800a934:	e011      	b.n	800a95a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a936:	6839      	ldr	r1, [r7, #0]
 800a938:	69b8      	ldr	r0, [r7, #24]
 800a93a:	f000 febf 	bl	800b6bc <xQueueSemaphoreTake>
 800a93e:	4603      	mov	r3, r0
 800a940:	2b01      	cmp	r3, #1
 800a942:	d00b      	beq.n	800a95c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d003      	beq.n	800a952 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800a94a:	f06f 0301 	mvn.w	r3, #1
 800a94e:	61fb      	str	r3, [r7, #28]
 800a950:	e004      	b.n	800a95c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800a952:	f06f 0302 	mvn.w	r3, #2
 800a956:	61fb      	str	r3, [r7, #28]
 800a958:	e000      	b.n	800a95c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800a95a:	bf00      	nop
      }
    }
  }

  return (stat);
 800a95c:	69fb      	ldr	r3, [r7, #28]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3720      	adds	r7, #32
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	200010f4 	.word	0x200010f4
 800a96c:	e000ed04 	.word	0xe000ed04

0800a970 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a970:	b580      	push	{r7, lr}
 800a972:	b088      	sub	sp, #32
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a97c:	2300      	movs	r3, #0
 800a97e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800a980:	69bb      	ldr	r3, [r7, #24]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d103      	bne.n	800a98e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a986:	f06f 0303 	mvn.w	r3, #3
 800a98a:	61fb      	str	r3, [r7, #28]
 800a98c:	e03e      	b.n	800aa0c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a98e:	f3ef 8305 	mrs	r3, IPSR
 800a992:	617b      	str	r3, [r7, #20]
  return(result);
 800a994:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a996:	2b00      	cmp	r3, #0
 800a998:	d10f      	bne.n	800a9ba <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a99a:	f3ef 8310 	mrs	r3, PRIMASK
 800a99e:	613b      	str	r3, [r7, #16]
  return(result);
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d105      	bne.n	800a9b2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a9a6:	f3ef 8311 	mrs	r3, BASEPRI
 800a9aa:	60fb      	str	r3, [r7, #12]
  return(result);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d01e      	beq.n	800a9f0 <osSemaphoreRelease+0x80>
 800a9b2:	4b19      	ldr	r3, [pc, #100]	@ (800aa18 <osSemaphoreRelease+0xa8>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d11a      	bne.n	800a9f0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a9be:	f107 0308 	add.w	r3, r7, #8
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	69b8      	ldr	r0, [r7, #24]
 800a9c6:	f000 fcf8 	bl	800b3ba <xQueueGiveFromISR>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d003      	beq.n	800a9d8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800a9d0:	f06f 0302 	mvn.w	r3, #2
 800a9d4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a9d6:	e018      	b.n	800aa0a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d015      	beq.n	800aa0a <osSemaphoreRelease+0x9a>
 800a9de:	4b0f      	ldr	r3, [pc, #60]	@ (800aa1c <osSemaphoreRelease+0xac>)
 800a9e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9e4:	601a      	str	r2, [r3, #0]
 800a9e6:	f3bf 8f4f 	dsb	sy
 800a9ea:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a9ee:	e00c      	b.n	800aa0a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	69b8      	ldr	r0, [r7, #24]
 800a9f8:	f000 fb32 	bl	800b060 <xQueueGenericSend>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d004      	beq.n	800aa0c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800aa02:	f06f 0302 	mvn.w	r3, #2
 800aa06:	61fb      	str	r3, [r7, #28]
 800aa08:	e000      	b.n	800aa0c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800aa0a:	bf00      	nop
    }
  }

  return (stat);
 800aa0c:	69fb      	ldr	r3, [r7, #28]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3720      	adds	r7, #32
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	200010f4 	.word	0x200010f4
 800aa1c:	e000ed04 	.word	0xe000ed04

0800aa20 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b088      	sub	sp, #32
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa2c:	f3ef 8305 	mrs	r3, IPSR
 800aa30:	617b      	str	r3, [r7, #20]
  return(result);
 800aa32:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d10f      	bne.n	800aa58 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa38:	f3ef 8310 	mrs	r3, PRIMASK
 800aa3c:	613b      	str	r3, [r7, #16]
  return(result);
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d105      	bne.n	800aa50 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aa44:	f3ef 8311 	mrs	r3, BASEPRI
 800aa48:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d007      	beq.n	800aa60 <osSemaphoreDelete+0x40>
 800aa50:	4b0d      	ldr	r3, [pc, #52]	@ (800aa88 <osSemaphoreDelete+0x68>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	2b02      	cmp	r3, #2
 800aa56:	d103      	bne.n	800aa60 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 800aa58:	f06f 0305 	mvn.w	r3, #5
 800aa5c:	61fb      	str	r3, [r7, #28]
 800aa5e:	e00e      	b.n	800aa7e <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d103      	bne.n	800aa6e <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800aa66:	f06f 0303 	mvn.w	r3, #3
 800aa6a:	61fb      	str	r3, [r7, #28]
 800aa6c:	e007      	b.n	800aa7e <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800aa6e:	69b8      	ldr	r0, [r7, #24]
 800aa70:	f001 f93c 	bl	800bcec <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800aa74:	2300      	movs	r3, #0
 800aa76:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 800aa78:	69b8      	ldr	r0, [r7, #24]
 800aa7a:	f000 ffbf 	bl	800b9fc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800aa7e:	69fb      	ldr	r3, [r7, #28]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3720      	adds	r7, #32
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	200010f4 	.word	0x200010f4

0800aa8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800aa8c:	b480      	push	{r7}
 800aa8e:	b085      	sub	sp, #20
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	60b9      	str	r1, [r7, #8]
 800aa96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	4a07      	ldr	r2, [pc, #28]	@ (800aab8 <vApplicationGetIdleTaskMemory+0x2c>)
 800aa9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	4a06      	ldr	r2, [pc, #24]	@ (800aabc <vApplicationGetIdleTaskMemory+0x30>)
 800aaa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2280      	movs	r2, #128	@ 0x80
 800aaa8:	601a      	str	r2, [r3, #0]
}
 800aaaa:	bf00      	nop
 800aaac:	3714      	adds	r7, #20
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr
 800aab6:	bf00      	nop
 800aab8:	200010f8 	.word	0x200010f8
 800aabc:	20001154 	.word	0x20001154

0800aac0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800aac0:	b480      	push	{r7}
 800aac2:	b085      	sub	sp, #20
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	4a07      	ldr	r2, [pc, #28]	@ (800aaec <vApplicationGetTimerTaskMemory+0x2c>)
 800aad0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	4a06      	ldr	r2, [pc, #24]	@ (800aaf0 <vApplicationGetTimerTaskMemory+0x30>)
 800aad6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aade:	601a      	str	r2, [r3, #0]
}
 800aae0:	bf00      	nop
 800aae2:	3714      	adds	r7, #20
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr
 800aaec:	20001354 	.word	0x20001354
 800aaf0:	200013b0 	.word	0x200013b0

0800aaf4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f103 0208 	add.w	r2, r3, #8
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f04f 32ff 	mov.w	r2, #4294967295
 800ab0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f103 0208 	add.w	r2, r3, #8
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f103 0208 	add.w	r2, r3, #8
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ab28:	bf00      	nop
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ab42:	bf00      	nop
 800ab44:	370c      	adds	r7, #12
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr

0800ab4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab4e:	b480      	push	{r7}
 800ab50:	b085      	sub	sp, #20
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
 800ab56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	689a      	ldr	r2, [r3, #8]
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	683a      	ldr	r2, [r7, #0]
 800ab72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	683a      	ldr	r2, [r7, #0]
 800ab78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	1c5a      	adds	r2, r3, #1
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	601a      	str	r2, [r3, #0]
}
 800ab8a:	bf00      	nop
 800ab8c:	3714      	adds	r7, #20
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr

0800ab96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab96:	b480      	push	{r7}
 800ab98:	b085      	sub	sp, #20
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abac:	d103      	bne.n	800abb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	691b      	ldr	r3, [r3, #16]
 800abb2:	60fb      	str	r3, [r7, #12]
 800abb4:	e00c      	b.n	800abd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	3308      	adds	r3, #8
 800abba:	60fb      	str	r3, [r7, #12]
 800abbc:	e002      	b.n	800abc4 <vListInsert+0x2e>
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	60fb      	str	r3, [r7, #12]
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	68ba      	ldr	r2, [r7, #8]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d2f6      	bcs.n	800abbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	685a      	ldr	r2, [r3, #4]
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	683a      	ldr	r2, [r7, #0]
 800abde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	68fa      	ldr	r2, [r7, #12]
 800abe4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	683a      	ldr	r2, [r7, #0]
 800abea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	1c5a      	adds	r2, r3, #1
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	601a      	str	r2, [r3, #0]
}
 800abfc:	bf00      	nop
 800abfe:	3714      	adds	r7, #20
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	691b      	ldr	r3, [r3, #16]
 800ac14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	6892      	ldr	r2, [r2, #8]
 800ac1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	6852      	ldr	r2, [r2, #4]
 800ac28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d103      	bne.n	800ac3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	689a      	ldr	r2, [r3, #8]
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	1e5a      	subs	r2, r3, #1
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3714      	adds	r7, #20
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d10d      	bne.n	800ac8c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ac70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac74:	b672      	cpsid	i
 800ac76:	f383 8811 	msr	BASEPRI, r3
 800ac7a:	f3bf 8f6f 	isb	sy
 800ac7e:	f3bf 8f4f 	dsb	sy
 800ac82:	b662      	cpsie	i
 800ac84:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ac86:	bf00      	nop
 800ac88:	bf00      	nop
 800ac8a:	e7fd      	b.n	800ac88 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800ac8c:	f002 fe3e 	bl	800d90c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681a      	ldr	r2, [r3, #0]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac98:	68f9      	ldr	r1, [r7, #12]
 800ac9a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ac9c:	fb01 f303 	mul.w	r3, r1, r3
 800aca0:	441a      	add	r2, r3
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2200      	movs	r2, #0
 800acaa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acbc:	3b01      	subs	r3, #1
 800acbe:	68f9      	ldr	r1, [r7, #12]
 800acc0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800acc2:	fb01 f303 	mul.w	r3, r1, r3
 800acc6:	441a      	add	r2, r3
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	22ff      	movs	r2, #255	@ 0xff
 800acd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	22ff      	movs	r2, #255	@ 0xff
 800acd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d114      	bne.n	800ad0c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	691b      	ldr	r3, [r3, #16]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d01a      	beq.n	800ad20 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	3310      	adds	r3, #16
 800acee:	4618      	mov	r0, r3
 800acf0:	f001 fcdc 	bl	800c6ac <xTaskRemoveFromEventList>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d012      	beq.n	800ad20 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800acfa:	4b0d      	ldr	r3, [pc, #52]	@ (800ad30 <xQueueGenericReset+0xd4>)
 800acfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad00:	601a      	str	r2, [r3, #0]
 800ad02:	f3bf 8f4f 	dsb	sy
 800ad06:	f3bf 8f6f 	isb	sy
 800ad0a:	e009      	b.n	800ad20 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	3310      	adds	r3, #16
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7ff feef 	bl	800aaf4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	3324      	adds	r3, #36	@ 0x24
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7ff feea 	bl	800aaf4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ad20:	f002 fe2a 	bl	800d978 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ad24:	2301      	movs	r3, #1
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3710      	adds	r7, #16
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	e000ed04 	.word	0xe000ed04

0800ad34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b08e      	sub	sp, #56	@ 0x38
 800ad38:	af02      	add	r7, sp, #8
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
 800ad40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d10d      	bne.n	800ad64 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800ad48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad4c:	b672      	cpsid	i
 800ad4e:	f383 8811 	msr	BASEPRI, r3
 800ad52:	f3bf 8f6f 	isb	sy
 800ad56:	f3bf 8f4f 	dsb	sy
 800ad5a:	b662      	cpsie	i
 800ad5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ad5e:	bf00      	nop
 800ad60:	bf00      	nop
 800ad62:	e7fd      	b.n	800ad60 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d10d      	bne.n	800ad86 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800ad6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad6e:	b672      	cpsid	i
 800ad70:	f383 8811 	msr	BASEPRI, r3
 800ad74:	f3bf 8f6f 	isb	sy
 800ad78:	f3bf 8f4f 	dsb	sy
 800ad7c:	b662      	cpsie	i
 800ad7e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ad80:	bf00      	nop
 800ad82:	bf00      	nop
 800ad84:	e7fd      	b.n	800ad82 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d002      	beq.n	800ad92 <xQueueGenericCreateStatic+0x5e>
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d001      	beq.n	800ad96 <xQueueGenericCreateStatic+0x62>
 800ad92:	2301      	movs	r3, #1
 800ad94:	e000      	b.n	800ad98 <xQueueGenericCreateStatic+0x64>
 800ad96:	2300      	movs	r3, #0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10d      	bne.n	800adb8 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800ad9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada0:	b672      	cpsid	i
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	b662      	cpsie	i
 800adb0:	623b      	str	r3, [r7, #32]
}
 800adb2:	bf00      	nop
 800adb4:	bf00      	nop
 800adb6:	e7fd      	b.n	800adb4 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d102      	bne.n	800adc4 <xQueueGenericCreateStatic+0x90>
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d101      	bne.n	800adc8 <xQueueGenericCreateStatic+0x94>
 800adc4:	2301      	movs	r3, #1
 800adc6:	e000      	b.n	800adca <xQueueGenericCreateStatic+0x96>
 800adc8:	2300      	movs	r3, #0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d10d      	bne.n	800adea <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800adce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800add2:	b672      	cpsid	i
 800add4:	f383 8811 	msr	BASEPRI, r3
 800add8:	f3bf 8f6f 	isb	sy
 800addc:	f3bf 8f4f 	dsb	sy
 800ade0:	b662      	cpsie	i
 800ade2:	61fb      	str	r3, [r7, #28]
}
 800ade4:	bf00      	nop
 800ade6:	bf00      	nop
 800ade8:	e7fd      	b.n	800ade6 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800adea:	2350      	movs	r3, #80	@ 0x50
 800adec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	2b50      	cmp	r3, #80	@ 0x50
 800adf2:	d00d      	beq.n	800ae10 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800adf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adf8:	b672      	cpsid	i
 800adfa:	f383 8811 	msr	BASEPRI, r3
 800adfe:	f3bf 8f6f 	isb	sy
 800ae02:	f3bf 8f4f 	dsb	sy
 800ae06:	b662      	cpsie	i
 800ae08:	61bb      	str	r3, [r7, #24]
}
 800ae0a:	bf00      	nop
 800ae0c:	bf00      	nop
 800ae0e:	e7fd      	b.n	800ae0c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ae10:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ae16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d00d      	beq.n	800ae38 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ae1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae1e:	2201      	movs	r2, #1
 800ae20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae24:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ae28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae2a:	9300      	str	r3, [sp, #0]
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	68b9      	ldr	r1, [r7, #8]
 800ae32:	68f8      	ldr	r0, [r7, #12]
 800ae34:	f000 f848 	bl	800aec8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ae38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3730      	adds	r7, #48	@ 0x30
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}

0800ae42 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b08a      	sub	sp, #40	@ 0x28
 800ae46:	af02      	add	r7, sp, #8
 800ae48:	60f8      	str	r0, [r7, #12]
 800ae4a:	60b9      	str	r1, [r7, #8]
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d10d      	bne.n	800ae72 <xQueueGenericCreate+0x30>
	__asm volatile
 800ae56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae5a:	b672      	cpsid	i
 800ae5c:	f383 8811 	msr	BASEPRI, r3
 800ae60:	f3bf 8f6f 	isb	sy
 800ae64:	f3bf 8f4f 	dsb	sy
 800ae68:	b662      	cpsie	i
 800ae6a:	613b      	str	r3, [r7, #16]
}
 800ae6c:	bf00      	nop
 800ae6e:	bf00      	nop
 800ae70:	e7fd      	b.n	800ae6e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d102      	bne.n	800ae7e <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	61fb      	str	r3, [r7, #28]
 800ae7c:	e004      	b.n	800ae88 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	68ba      	ldr	r2, [r7, #8]
 800ae82:	fb02 f303 	mul.w	r3, r2, r3
 800ae86:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	3350      	adds	r3, #80	@ 0x50
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f002 fe6b 	bl	800db68 <pvPortMalloc>
 800ae92:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d011      	beq.n	800aebe <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ae9a:	69bb      	ldr	r3, [r7, #24]
 800ae9c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	3350      	adds	r3, #80	@ 0x50
 800aea2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aea4:	69bb      	ldr	r3, [r7, #24]
 800aea6:	2200      	movs	r2, #0
 800aea8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aeac:	79fa      	ldrb	r2, [r7, #7]
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	9300      	str	r3, [sp, #0]
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	697a      	ldr	r2, [r7, #20]
 800aeb6:	68b9      	ldr	r1, [r7, #8]
 800aeb8:	68f8      	ldr	r0, [r7, #12]
 800aeba:	f000 f805 	bl	800aec8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aebe:	69bb      	ldr	r3, [r7, #24]
	}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3720      	adds	r7, #32
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	607a      	str	r2, [r7, #4]
 800aed4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d103      	bne.n	800aee4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aedc:	69bb      	ldr	r3, [r7, #24]
 800aede:	69ba      	ldr	r2, [r7, #24]
 800aee0:	601a      	str	r2, [r3, #0]
 800aee2:	e002      	b.n	800aeea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aeea:	69bb      	ldr	r3, [r7, #24]
 800aeec:	68fa      	ldr	r2, [r7, #12]
 800aeee:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aef0:	69bb      	ldr	r3, [r7, #24]
 800aef2:	68ba      	ldr	r2, [r7, #8]
 800aef4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aef6:	2101      	movs	r1, #1
 800aef8:	69b8      	ldr	r0, [r7, #24]
 800aefa:	f7ff feaf 	bl	800ac5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800aefe:	69bb      	ldr	r3, [r7, #24]
 800af00:	78fa      	ldrb	r2, [r7, #3]
 800af02:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800af06:	bf00      	nop
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b082      	sub	sp, #8
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d00e      	beq.n	800af3a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800af2e:	2300      	movs	r3, #0
 800af30:	2200      	movs	r2, #0
 800af32:	2100      	movs	r1, #0
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f000 f893 	bl	800b060 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800af3a:	bf00      	nop
 800af3c:	3708      	adds	r7, #8
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800af42:	b580      	push	{r7, lr}
 800af44:	b086      	sub	sp, #24
 800af46:	af00      	add	r7, sp, #0
 800af48:	4603      	mov	r3, r0
 800af4a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800af4c:	2301      	movs	r3, #1
 800af4e:	617b      	str	r3, [r7, #20]
 800af50:	2300      	movs	r3, #0
 800af52:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800af54:	79fb      	ldrb	r3, [r7, #7]
 800af56:	461a      	mov	r2, r3
 800af58:	6939      	ldr	r1, [r7, #16]
 800af5a:	6978      	ldr	r0, [r7, #20]
 800af5c:	f7ff ff71 	bl	800ae42 <xQueueGenericCreate>
 800af60:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	f7ff ffd3 	bl	800af0e <prvInitialiseMutex>

		return xNewQueue;
 800af68:	68fb      	ldr	r3, [r7, #12]
	}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3718      	adds	r7, #24
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800af72:	b580      	push	{r7, lr}
 800af74:	b08a      	sub	sp, #40	@ 0x28
 800af76:	af02      	add	r7, sp, #8
 800af78:	60f8      	str	r0, [r7, #12]
 800af7a:	60b9      	str	r1, [r7, #8]
 800af7c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d10d      	bne.n	800afa0 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800af84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af88:	b672      	cpsid	i
 800af8a:	f383 8811 	msr	BASEPRI, r3
 800af8e:	f3bf 8f6f 	isb	sy
 800af92:	f3bf 8f4f 	dsb	sy
 800af96:	b662      	cpsie	i
 800af98:	61bb      	str	r3, [r7, #24]
}
 800af9a:	bf00      	nop
 800af9c:	bf00      	nop
 800af9e:	e7fd      	b.n	800af9c <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800afa0:	68ba      	ldr	r2, [r7, #8]
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d90d      	bls.n	800afc4 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800afa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afac:	b672      	cpsid	i
 800afae:	f383 8811 	msr	BASEPRI, r3
 800afb2:	f3bf 8f6f 	isb	sy
 800afb6:	f3bf 8f4f 	dsb	sy
 800afba:	b662      	cpsie	i
 800afbc:	617b      	str	r3, [r7, #20]
}
 800afbe:	bf00      	nop
 800afc0:	bf00      	nop
 800afc2:	e7fd      	b.n	800afc0 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800afc4:	2302      	movs	r3, #2
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	2100      	movs	r1, #0
 800afce:	68f8      	ldr	r0, [r7, #12]
 800afd0:	f7ff feb0 	bl	800ad34 <xQueueGenericCreateStatic>
 800afd4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800afd6:	69fb      	ldr	r3, [r7, #28]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d002      	beq.n	800afe2 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	68ba      	ldr	r2, [r7, #8]
 800afe0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800afe2:	69fb      	ldr	r3, [r7, #28]
	}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3720      	adds	r7, #32
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800afec:	b580      	push	{r7, lr}
 800afee:	b086      	sub	sp, #24
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d10d      	bne.n	800b018 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800affc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b000:	b672      	cpsid	i
 800b002:	f383 8811 	msr	BASEPRI, r3
 800b006:	f3bf 8f6f 	isb	sy
 800b00a:	f3bf 8f4f 	dsb	sy
 800b00e:	b662      	cpsie	i
 800b010:	613b      	str	r3, [r7, #16]
}
 800b012:	bf00      	nop
 800b014:	bf00      	nop
 800b016:	e7fd      	b.n	800b014 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b018:	683a      	ldr	r2, [r7, #0]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d90d      	bls.n	800b03c <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800b020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b024:	b672      	cpsid	i
 800b026:	f383 8811 	msr	BASEPRI, r3
 800b02a:	f3bf 8f6f 	isb	sy
 800b02e:	f3bf 8f4f 	dsb	sy
 800b032:	b662      	cpsie	i
 800b034:	60fb      	str	r3, [r7, #12]
}
 800b036:	bf00      	nop
 800b038:	bf00      	nop
 800b03a:	e7fd      	b.n	800b038 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b03c:	2202      	movs	r2, #2
 800b03e:	2100      	movs	r1, #0
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f7ff fefe 	bl	800ae42 <xQueueGenericCreate>
 800b046:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d002      	beq.n	800b054 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	683a      	ldr	r2, [r7, #0]
 800b052:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b054:	697b      	ldr	r3, [r7, #20]
	}
 800b056:	4618      	mov	r0, r3
 800b058:	3718      	adds	r7, #24
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
	...

0800b060 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b08e      	sub	sp, #56	@ 0x38
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	607a      	str	r2, [r7, #4]
 800b06c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b06e:	2300      	movs	r3, #0
 800b070:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d10d      	bne.n	800b098 <xQueueGenericSend+0x38>
	__asm volatile
 800b07c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b080:	b672      	cpsid	i
 800b082:	f383 8811 	msr	BASEPRI, r3
 800b086:	f3bf 8f6f 	isb	sy
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	b662      	cpsie	i
 800b090:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b092:	bf00      	nop
 800b094:	bf00      	nop
 800b096:	e7fd      	b.n	800b094 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d103      	bne.n	800b0a6 <xQueueGenericSend+0x46>
 800b09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d101      	bne.n	800b0aa <xQueueGenericSend+0x4a>
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	e000      	b.n	800b0ac <xQueueGenericSend+0x4c>
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d10d      	bne.n	800b0cc <xQueueGenericSend+0x6c>
	__asm volatile
 800b0b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0b4:	b672      	cpsid	i
 800b0b6:	f383 8811 	msr	BASEPRI, r3
 800b0ba:	f3bf 8f6f 	isb	sy
 800b0be:	f3bf 8f4f 	dsb	sy
 800b0c2:	b662      	cpsie	i
 800b0c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b0c6:	bf00      	nop
 800b0c8:	bf00      	nop
 800b0ca:	e7fd      	b.n	800b0c8 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	2b02      	cmp	r3, #2
 800b0d0:	d103      	bne.n	800b0da <xQueueGenericSend+0x7a>
 800b0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0d6:	2b01      	cmp	r3, #1
 800b0d8:	d101      	bne.n	800b0de <xQueueGenericSend+0x7e>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e000      	b.n	800b0e0 <xQueueGenericSend+0x80>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10d      	bne.n	800b100 <xQueueGenericSend+0xa0>
	__asm volatile
 800b0e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e8:	b672      	cpsid	i
 800b0ea:	f383 8811 	msr	BASEPRI, r3
 800b0ee:	f3bf 8f6f 	isb	sy
 800b0f2:	f3bf 8f4f 	dsb	sy
 800b0f6:	b662      	cpsie	i
 800b0f8:	623b      	str	r3, [r7, #32]
}
 800b0fa:	bf00      	nop
 800b0fc:	bf00      	nop
 800b0fe:	e7fd      	b.n	800b0fc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b100:	f001 fc9c 	bl	800ca3c <xTaskGetSchedulerState>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d102      	bne.n	800b110 <xQueueGenericSend+0xb0>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d101      	bne.n	800b114 <xQueueGenericSend+0xb4>
 800b110:	2301      	movs	r3, #1
 800b112:	e000      	b.n	800b116 <xQueueGenericSend+0xb6>
 800b114:	2300      	movs	r3, #0
 800b116:	2b00      	cmp	r3, #0
 800b118:	d10d      	bne.n	800b136 <xQueueGenericSend+0xd6>
	__asm volatile
 800b11a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b11e:	b672      	cpsid	i
 800b120:	f383 8811 	msr	BASEPRI, r3
 800b124:	f3bf 8f6f 	isb	sy
 800b128:	f3bf 8f4f 	dsb	sy
 800b12c:	b662      	cpsie	i
 800b12e:	61fb      	str	r3, [r7, #28]
}
 800b130:	bf00      	nop
 800b132:	bf00      	nop
 800b134:	e7fd      	b.n	800b132 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b136:	f002 fbe9 	bl	800d90c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b13c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b142:	429a      	cmp	r2, r3
 800b144:	d302      	bcc.n	800b14c <xQueueGenericSend+0xec>
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	2b02      	cmp	r3, #2
 800b14a:	d129      	bne.n	800b1a0 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b14c:	683a      	ldr	r2, [r7, #0]
 800b14e:	68b9      	ldr	r1, [r7, #8]
 800b150:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b152:	f000 fc91 	bl	800ba78 <prvCopyDataToQueue>
 800b156:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b15a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d010      	beq.n	800b182 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b162:	3324      	adds	r3, #36	@ 0x24
 800b164:	4618      	mov	r0, r3
 800b166:	f001 faa1 	bl	800c6ac <xTaskRemoveFromEventList>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d013      	beq.n	800b198 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b170:	4b3f      	ldr	r3, [pc, #252]	@ (800b270 <xQueueGenericSend+0x210>)
 800b172:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b176:	601a      	str	r2, [r3, #0]
 800b178:	f3bf 8f4f 	dsb	sy
 800b17c:	f3bf 8f6f 	isb	sy
 800b180:	e00a      	b.n	800b198 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b184:	2b00      	cmp	r3, #0
 800b186:	d007      	beq.n	800b198 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b188:	4b39      	ldr	r3, [pc, #228]	@ (800b270 <xQueueGenericSend+0x210>)
 800b18a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b18e:	601a      	str	r2, [r3, #0]
 800b190:	f3bf 8f4f 	dsb	sy
 800b194:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b198:	f002 fbee 	bl	800d978 <vPortExitCritical>
				return pdPASS;
 800b19c:	2301      	movs	r3, #1
 800b19e:	e063      	b.n	800b268 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d103      	bne.n	800b1ae <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b1a6:	f002 fbe7 	bl	800d978 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	e05c      	b.n	800b268 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b1ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d106      	bne.n	800b1c2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b1b4:	f107 0314 	add.w	r3, r7, #20
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f001 fadd 	bl	800c778 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b1c2:	f002 fbd9 	bl	800d978 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b1c6:	f001 f841 	bl	800c24c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b1ca:	f002 fb9f 	bl	800d90c <vPortEnterCritical>
 800b1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b1d4:	b25b      	sxtb	r3, r3
 800b1d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1da:	d103      	bne.n	800b1e4 <xQueueGenericSend+0x184>
 800b1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b1e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b1ea:	b25b      	sxtb	r3, r3
 800b1ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1f0:	d103      	bne.n	800b1fa <xQueueGenericSend+0x19a>
 800b1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b1fa:	f002 fbbd 	bl	800d978 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b1fe:	1d3a      	adds	r2, r7, #4
 800b200:	f107 0314 	add.w	r3, r7, #20
 800b204:	4611      	mov	r1, r2
 800b206:	4618      	mov	r0, r3
 800b208:	f001 facc 	bl	800c7a4 <xTaskCheckForTimeOut>
 800b20c:	4603      	mov	r3, r0
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d124      	bne.n	800b25c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b212:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b214:	f000 fd28 	bl	800bc68 <prvIsQueueFull>
 800b218:	4603      	mov	r3, r0
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d018      	beq.n	800b250 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b220:	3310      	adds	r3, #16
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	4611      	mov	r1, r2
 800b226:	4618      	mov	r0, r3
 800b228:	f001 f9ea 	bl	800c600 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b22c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b22e:	f000 fcb3 	bl	800bb98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b232:	f001 f819 	bl	800c268 <xTaskResumeAll>
 800b236:	4603      	mov	r3, r0
 800b238:	2b00      	cmp	r3, #0
 800b23a:	f47f af7c 	bne.w	800b136 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800b23e:	4b0c      	ldr	r3, [pc, #48]	@ (800b270 <xQueueGenericSend+0x210>)
 800b240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b244:	601a      	str	r2, [r3, #0]
 800b246:	f3bf 8f4f 	dsb	sy
 800b24a:	f3bf 8f6f 	isb	sy
 800b24e:	e772      	b.n	800b136 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b250:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b252:	f000 fca1 	bl	800bb98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b256:	f001 f807 	bl	800c268 <xTaskResumeAll>
 800b25a:	e76c      	b.n	800b136 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b25c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b25e:	f000 fc9b 	bl	800bb98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b262:	f001 f801 	bl	800c268 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b266:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3738      	adds	r7, #56	@ 0x38
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	e000ed04 	.word	0xe000ed04

0800b274 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b08e      	sub	sp, #56	@ 0x38
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
 800b280:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d10d      	bne.n	800b2a8 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800b28c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b290:	b672      	cpsid	i
 800b292:	f383 8811 	msr	BASEPRI, r3
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	f3bf 8f4f 	dsb	sy
 800b29e:	b662      	cpsie	i
 800b2a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b2a2:	bf00      	nop
 800b2a4:	bf00      	nop
 800b2a6:	e7fd      	b.n	800b2a4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d103      	bne.n	800b2b6 <xQueueGenericSendFromISR+0x42>
 800b2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d101      	bne.n	800b2ba <xQueueGenericSendFromISR+0x46>
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	e000      	b.n	800b2bc <xQueueGenericSendFromISR+0x48>
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d10d      	bne.n	800b2dc <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800b2c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2c4:	b672      	cpsid	i
 800b2c6:	f383 8811 	msr	BASEPRI, r3
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	b662      	cpsie	i
 800b2d4:	623b      	str	r3, [r7, #32]
}
 800b2d6:	bf00      	nop
 800b2d8:	bf00      	nop
 800b2da:	e7fd      	b.n	800b2d8 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	2b02      	cmp	r3, #2
 800b2e0:	d103      	bne.n	800b2ea <xQueueGenericSendFromISR+0x76>
 800b2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	d101      	bne.n	800b2ee <xQueueGenericSendFromISR+0x7a>
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	e000      	b.n	800b2f0 <xQueueGenericSendFromISR+0x7c>
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d10d      	bne.n	800b310 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800b2f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2f8:	b672      	cpsid	i
 800b2fa:	f383 8811 	msr	BASEPRI, r3
 800b2fe:	f3bf 8f6f 	isb	sy
 800b302:	f3bf 8f4f 	dsb	sy
 800b306:	b662      	cpsie	i
 800b308:	61fb      	str	r3, [r7, #28]
}
 800b30a:	bf00      	nop
 800b30c:	bf00      	nop
 800b30e:	e7fd      	b.n	800b30c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b310:	f002 fbe4 	bl	800dadc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b314:	f3ef 8211 	mrs	r2, BASEPRI
 800b318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b31c:	b672      	cpsid	i
 800b31e:	f383 8811 	msr	BASEPRI, r3
 800b322:	f3bf 8f6f 	isb	sy
 800b326:	f3bf 8f4f 	dsb	sy
 800b32a:	b662      	cpsie	i
 800b32c:	61ba      	str	r2, [r7, #24]
 800b32e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b330:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b332:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b336:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b33a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d302      	bcc.n	800b346 <xQueueGenericSendFromISR+0xd2>
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	2b02      	cmp	r3, #2
 800b344:	d12c      	bne.n	800b3a0 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b348:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b34c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b350:	683a      	ldr	r2, [r7, #0]
 800b352:	68b9      	ldr	r1, [r7, #8]
 800b354:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b356:	f000 fb8f 	bl	800ba78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b35a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800b35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b362:	d112      	bne.n	800b38a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d016      	beq.n	800b39a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b36e:	3324      	adds	r3, #36	@ 0x24
 800b370:	4618      	mov	r0, r3
 800b372:	f001 f99b 	bl	800c6ac <xTaskRemoveFromEventList>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d00e      	beq.n	800b39a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00b      	beq.n	800b39a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2201      	movs	r2, #1
 800b386:	601a      	str	r2, [r3, #0]
 800b388:	e007      	b.n	800b39a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b38a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b38e:	3301      	adds	r3, #1
 800b390:	b2db      	uxtb	r3, r3
 800b392:	b25a      	sxtb	r2, r3
 800b394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b396:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b39a:	2301      	movs	r3, #1
 800b39c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800b39e:	e001      	b.n	800b3a4 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3a6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b3ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b3b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3738      	adds	r7, #56	@ 0x38
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b3ba:	b580      	push	{r7, lr}
 800b3bc:	b08e      	sub	sp, #56	@ 0x38
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
 800b3c2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d10d      	bne.n	800b3ea <xQueueGiveFromISR+0x30>
	__asm volatile
 800b3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3d2:	b672      	cpsid	i
 800b3d4:	f383 8811 	msr	BASEPRI, r3
 800b3d8:	f3bf 8f6f 	isb	sy
 800b3dc:	f3bf 8f4f 	dsb	sy
 800b3e0:	b662      	cpsie	i
 800b3e2:	623b      	str	r3, [r7, #32]
}
 800b3e4:	bf00      	nop
 800b3e6:	bf00      	nop
 800b3e8:	e7fd      	b.n	800b3e6 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d00d      	beq.n	800b40e <xQueueGiveFromISR+0x54>
	__asm volatile
 800b3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3f6:	b672      	cpsid	i
 800b3f8:	f383 8811 	msr	BASEPRI, r3
 800b3fc:	f3bf 8f6f 	isb	sy
 800b400:	f3bf 8f4f 	dsb	sy
 800b404:	b662      	cpsie	i
 800b406:	61fb      	str	r3, [r7, #28]
}
 800b408:	bf00      	nop
 800b40a:	bf00      	nop
 800b40c:	e7fd      	b.n	800b40a <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d103      	bne.n	800b41e <xQueueGiveFromISR+0x64>
 800b416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b418:	689b      	ldr	r3, [r3, #8]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d101      	bne.n	800b422 <xQueueGiveFromISR+0x68>
 800b41e:	2301      	movs	r3, #1
 800b420:	e000      	b.n	800b424 <xQueueGiveFromISR+0x6a>
 800b422:	2300      	movs	r3, #0
 800b424:	2b00      	cmp	r3, #0
 800b426:	d10d      	bne.n	800b444 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800b428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b42c:	b672      	cpsid	i
 800b42e:	f383 8811 	msr	BASEPRI, r3
 800b432:	f3bf 8f6f 	isb	sy
 800b436:	f3bf 8f4f 	dsb	sy
 800b43a:	b662      	cpsie	i
 800b43c:	61bb      	str	r3, [r7, #24]
}
 800b43e:	bf00      	nop
 800b440:	bf00      	nop
 800b442:	e7fd      	b.n	800b440 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b444:	f002 fb4a 	bl	800dadc <vPortValidateInterruptPriority>
	__asm volatile
 800b448:	f3ef 8211 	mrs	r2, BASEPRI
 800b44c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b450:	b672      	cpsid	i
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	b662      	cpsie	i
 800b460:	617a      	str	r2, [r7, #20]
 800b462:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b464:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b466:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b46a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b46c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b472:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b474:	429a      	cmp	r2, r3
 800b476:	d22b      	bcs.n	800b4d0 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b47a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b47e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b484:	1c5a      	adds	r2, r3, #1
 800b486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b488:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b48a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b492:	d112      	bne.n	800b4ba <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d016      	beq.n	800b4ca <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b49c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b49e:	3324      	adds	r3, #36	@ 0x24
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f001 f903 	bl	800c6ac <xTaskRemoveFromEventList>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d00e      	beq.n	800b4ca <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00b      	beq.n	800b4ca <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	601a      	str	r2, [r3, #0]
 800b4b8:	e007      	b.n	800b4ca <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b4ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4be:	3301      	adds	r3, #1
 800b4c0:	b2db      	uxtb	r3, r3
 800b4c2:	b25a      	sxtb	r2, r3
 800b4c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4ce:	e001      	b.n	800b4d4 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4d6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f383 8811 	msr	BASEPRI, r3
}
 800b4de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b4e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3738      	adds	r7, #56	@ 0x38
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
	...

0800b4ec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b08c      	sub	sp, #48	@ 0x30
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	60b9      	str	r1, [r7, #8]
 800b4f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b502:	2b00      	cmp	r3, #0
 800b504:	d10d      	bne.n	800b522 <xQueueReceive+0x36>
	__asm volatile
 800b506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b50a:	b672      	cpsid	i
 800b50c:	f383 8811 	msr	BASEPRI, r3
 800b510:	f3bf 8f6f 	isb	sy
 800b514:	f3bf 8f4f 	dsb	sy
 800b518:	b662      	cpsie	i
 800b51a:	623b      	str	r3, [r7, #32]
}
 800b51c:	bf00      	nop
 800b51e:	bf00      	nop
 800b520:	e7fd      	b.n	800b51e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d103      	bne.n	800b530 <xQueueReceive+0x44>
 800b528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b52a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d101      	bne.n	800b534 <xQueueReceive+0x48>
 800b530:	2301      	movs	r3, #1
 800b532:	e000      	b.n	800b536 <xQueueReceive+0x4a>
 800b534:	2300      	movs	r3, #0
 800b536:	2b00      	cmp	r3, #0
 800b538:	d10d      	bne.n	800b556 <xQueueReceive+0x6a>
	__asm volatile
 800b53a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b53e:	b672      	cpsid	i
 800b540:	f383 8811 	msr	BASEPRI, r3
 800b544:	f3bf 8f6f 	isb	sy
 800b548:	f3bf 8f4f 	dsb	sy
 800b54c:	b662      	cpsie	i
 800b54e:	61fb      	str	r3, [r7, #28]
}
 800b550:	bf00      	nop
 800b552:	bf00      	nop
 800b554:	e7fd      	b.n	800b552 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b556:	f001 fa71 	bl	800ca3c <xTaskGetSchedulerState>
 800b55a:	4603      	mov	r3, r0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d102      	bne.n	800b566 <xQueueReceive+0x7a>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d101      	bne.n	800b56a <xQueueReceive+0x7e>
 800b566:	2301      	movs	r3, #1
 800b568:	e000      	b.n	800b56c <xQueueReceive+0x80>
 800b56a:	2300      	movs	r3, #0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d10d      	bne.n	800b58c <xQueueReceive+0xa0>
	__asm volatile
 800b570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b574:	b672      	cpsid	i
 800b576:	f383 8811 	msr	BASEPRI, r3
 800b57a:	f3bf 8f6f 	isb	sy
 800b57e:	f3bf 8f4f 	dsb	sy
 800b582:	b662      	cpsie	i
 800b584:	61bb      	str	r3, [r7, #24]
}
 800b586:	bf00      	nop
 800b588:	bf00      	nop
 800b58a:	e7fd      	b.n	800b588 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b58c:	f002 f9be 	bl	800d90c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b594:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d01f      	beq.n	800b5dc <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b59c:	68b9      	ldr	r1, [r7, #8]
 800b59e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5a0:	f000 fad4 	bl	800bb4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a6:	1e5a      	subs	r2, r3, #1
 800b5a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5aa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b5ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ae:	691b      	ldr	r3, [r3, #16]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d00f      	beq.n	800b5d4 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5b6:	3310      	adds	r3, #16
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f001 f877 	bl	800c6ac <xTaskRemoveFromEventList>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d007      	beq.n	800b5d4 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b5c4:	4b3c      	ldr	r3, [pc, #240]	@ (800b6b8 <xQueueReceive+0x1cc>)
 800b5c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5ca:	601a      	str	r2, [r3, #0]
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b5d4:	f002 f9d0 	bl	800d978 <vPortExitCritical>
				return pdPASS;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	e069      	b.n	800b6b0 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d103      	bne.n	800b5ea <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b5e2:	f002 f9c9 	bl	800d978 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	e062      	b.n	800b6b0 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b5ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d106      	bne.n	800b5fe <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b5f0:	f107 0310 	add.w	r3, r7, #16
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f001 f8bf 	bl	800c778 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b5fe:	f002 f9bb 	bl	800d978 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b602:	f000 fe23 	bl	800c24c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b606:	f002 f981 	bl	800d90c <vPortEnterCritical>
 800b60a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b60c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b610:	b25b      	sxtb	r3, r3
 800b612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b616:	d103      	bne.n	800b620 <xQueueReceive+0x134>
 800b618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b61a:	2200      	movs	r2, #0
 800b61c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b622:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b626:	b25b      	sxtb	r3, r3
 800b628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b62c:	d103      	bne.n	800b636 <xQueueReceive+0x14a>
 800b62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b630:	2200      	movs	r2, #0
 800b632:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b636:	f002 f99f 	bl	800d978 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b63a:	1d3a      	adds	r2, r7, #4
 800b63c:	f107 0310 	add.w	r3, r7, #16
 800b640:	4611      	mov	r1, r2
 800b642:	4618      	mov	r0, r3
 800b644:	f001 f8ae 	bl	800c7a4 <xTaskCheckForTimeOut>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d123      	bne.n	800b696 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b64e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b650:	f000 faf4 	bl	800bc3c <prvIsQueueEmpty>
 800b654:	4603      	mov	r3, r0
 800b656:	2b00      	cmp	r3, #0
 800b658:	d017      	beq.n	800b68a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b65c:	3324      	adds	r3, #36	@ 0x24
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	4611      	mov	r1, r2
 800b662:	4618      	mov	r0, r3
 800b664:	f000 ffcc 	bl	800c600 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b668:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b66a:	f000 fa95 	bl	800bb98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b66e:	f000 fdfb 	bl	800c268 <xTaskResumeAll>
 800b672:	4603      	mov	r3, r0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d189      	bne.n	800b58c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800b678:	4b0f      	ldr	r3, [pc, #60]	@ (800b6b8 <xQueueReceive+0x1cc>)
 800b67a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b67e:	601a      	str	r2, [r3, #0]
 800b680:	f3bf 8f4f 	dsb	sy
 800b684:	f3bf 8f6f 	isb	sy
 800b688:	e780      	b.n	800b58c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b68a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b68c:	f000 fa84 	bl	800bb98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b690:	f000 fdea 	bl	800c268 <xTaskResumeAll>
 800b694:	e77a      	b.n	800b58c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b696:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b698:	f000 fa7e 	bl	800bb98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b69c:	f000 fde4 	bl	800c268 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b6a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b6a2:	f000 facb 	bl	800bc3c <prvIsQueueEmpty>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	f43f af6f 	beq.w	800b58c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b6ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3730      	adds	r7, #48	@ 0x30
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	e000ed04 	.word	0xe000ed04

0800b6bc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b08e      	sub	sp, #56	@ 0x38
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b6d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d10d      	bne.n	800b6f4 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800b6d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6dc:	b672      	cpsid	i
 800b6de:	f383 8811 	msr	BASEPRI, r3
 800b6e2:	f3bf 8f6f 	isb	sy
 800b6e6:	f3bf 8f4f 	dsb	sy
 800b6ea:	b662      	cpsie	i
 800b6ec:	623b      	str	r3, [r7, #32]
}
 800b6ee:	bf00      	nop
 800b6f0:	bf00      	nop
 800b6f2:	e7fd      	b.n	800b6f0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b6f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d00d      	beq.n	800b718 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800b6fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b700:	b672      	cpsid	i
 800b702:	f383 8811 	msr	BASEPRI, r3
 800b706:	f3bf 8f6f 	isb	sy
 800b70a:	f3bf 8f4f 	dsb	sy
 800b70e:	b662      	cpsie	i
 800b710:	61fb      	str	r3, [r7, #28]
}
 800b712:	bf00      	nop
 800b714:	bf00      	nop
 800b716:	e7fd      	b.n	800b714 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b718:	f001 f990 	bl	800ca3c <xTaskGetSchedulerState>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d102      	bne.n	800b728 <xQueueSemaphoreTake+0x6c>
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d101      	bne.n	800b72c <xQueueSemaphoreTake+0x70>
 800b728:	2301      	movs	r3, #1
 800b72a:	e000      	b.n	800b72e <xQueueSemaphoreTake+0x72>
 800b72c:	2300      	movs	r3, #0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d10d      	bne.n	800b74e <xQueueSemaphoreTake+0x92>
	__asm volatile
 800b732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b736:	b672      	cpsid	i
 800b738:	f383 8811 	msr	BASEPRI, r3
 800b73c:	f3bf 8f6f 	isb	sy
 800b740:	f3bf 8f4f 	dsb	sy
 800b744:	b662      	cpsie	i
 800b746:	61bb      	str	r3, [r7, #24]
}
 800b748:	bf00      	nop
 800b74a:	bf00      	nop
 800b74c:	e7fd      	b.n	800b74a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b74e:	f002 f8dd 	bl	800d90c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b756:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d024      	beq.n	800b7a8 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b75e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b760:	1e5a      	subs	r2, r3, #1
 800b762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b764:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d104      	bne.n	800b778 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b76e:	f001 fae7 	bl	800cd40 <pvTaskIncrementMutexHeldCount>
 800b772:	4602      	mov	r2, r0
 800b774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b776:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b77a:	691b      	ldr	r3, [r3, #16]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d00f      	beq.n	800b7a0 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b782:	3310      	adds	r3, #16
 800b784:	4618      	mov	r0, r3
 800b786:	f000 ff91 	bl	800c6ac <xTaskRemoveFromEventList>
 800b78a:	4603      	mov	r3, r0
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d007      	beq.n	800b7a0 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b790:	4b55      	ldr	r3, [pc, #340]	@ (800b8e8 <xQueueSemaphoreTake+0x22c>)
 800b792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b796:	601a      	str	r2, [r3, #0]
 800b798:	f3bf 8f4f 	dsb	sy
 800b79c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b7a0:	f002 f8ea 	bl	800d978 <vPortExitCritical>
				return pdPASS;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e09a      	b.n	800b8de <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d114      	bne.n	800b7d8 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d00d      	beq.n	800b7d0 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800b7b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7b8:	b672      	cpsid	i
 800b7ba:	f383 8811 	msr	BASEPRI, r3
 800b7be:	f3bf 8f6f 	isb	sy
 800b7c2:	f3bf 8f4f 	dsb	sy
 800b7c6:	b662      	cpsie	i
 800b7c8:	617b      	str	r3, [r7, #20]
}
 800b7ca:	bf00      	nop
 800b7cc:	bf00      	nop
 800b7ce:	e7fd      	b.n	800b7cc <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b7d0:	f002 f8d2 	bl	800d978 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	e082      	b.n	800b8de <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b7d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d106      	bne.n	800b7ec <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b7de:	f107 030c 	add.w	r3, r7, #12
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f000 ffc8 	bl	800c778 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b7ec:	f002 f8c4 	bl	800d978 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b7f0:	f000 fd2c 	bl	800c24c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b7f4:	f002 f88a 	bl	800d90c <vPortEnterCritical>
 800b7f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b7fe:	b25b      	sxtb	r3, r3
 800b800:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b804:	d103      	bne.n	800b80e <xQueueSemaphoreTake+0x152>
 800b806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b808:	2200      	movs	r2, #0
 800b80a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b80e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b810:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b814:	b25b      	sxtb	r3, r3
 800b816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b81a:	d103      	bne.n	800b824 <xQueueSemaphoreTake+0x168>
 800b81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b81e:	2200      	movs	r2, #0
 800b820:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b824:	f002 f8a8 	bl	800d978 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b828:	463a      	mov	r2, r7
 800b82a:	f107 030c 	add.w	r3, r7, #12
 800b82e:	4611      	mov	r1, r2
 800b830:	4618      	mov	r0, r3
 800b832:	f000 ffb7 	bl	800c7a4 <xTaskCheckForTimeOut>
 800b836:	4603      	mov	r3, r0
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d132      	bne.n	800b8a2 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b83c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b83e:	f000 f9fd 	bl	800bc3c <prvIsQueueEmpty>
 800b842:	4603      	mov	r3, r0
 800b844:	2b00      	cmp	r3, #0
 800b846:	d026      	beq.n	800b896 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d109      	bne.n	800b864 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800b850:	f002 f85c 	bl	800d90c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b856:	689b      	ldr	r3, [r3, #8]
 800b858:	4618      	mov	r0, r3
 800b85a:	f001 f90d 	bl	800ca78 <xTaskPriorityInherit>
 800b85e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800b860:	f002 f88a 	bl	800d978 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b866:	3324      	adds	r3, #36	@ 0x24
 800b868:	683a      	ldr	r2, [r7, #0]
 800b86a:	4611      	mov	r1, r2
 800b86c:	4618      	mov	r0, r3
 800b86e:	f000 fec7 	bl	800c600 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b872:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b874:	f000 f990 	bl	800bb98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b878:	f000 fcf6 	bl	800c268 <xTaskResumeAll>
 800b87c:	4603      	mov	r3, r0
 800b87e:	2b00      	cmp	r3, #0
 800b880:	f47f af65 	bne.w	800b74e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800b884:	4b18      	ldr	r3, [pc, #96]	@ (800b8e8 <xQueueSemaphoreTake+0x22c>)
 800b886:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b88a:	601a      	str	r2, [r3, #0]
 800b88c:	f3bf 8f4f 	dsb	sy
 800b890:	f3bf 8f6f 	isb	sy
 800b894:	e75b      	b.n	800b74e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b896:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b898:	f000 f97e 	bl	800bb98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b89c:	f000 fce4 	bl	800c268 <xTaskResumeAll>
 800b8a0:	e755      	b.n	800b74e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b8a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b8a4:	f000 f978 	bl	800bb98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b8a8:	f000 fcde 	bl	800c268 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b8ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b8ae:	f000 f9c5 	bl	800bc3c <prvIsQueueEmpty>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	f43f af4a 	beq.w	800b74e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d00d      	beq.n	800b8dc <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800b8c0:	f002 f824 	bl	800d90c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b8c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b8c6:	f000 f8bf 	bl	800ba48 <prvGetDisinheritPriorityAfterTimeout>
 800b8ca:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8ce:	689b      	ldr	r3, [r3, #8]
 800b8d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f001 f9ac 	bl	800cc30 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b8d8:	f002 f84e 	bl	800d978 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b8dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3738      	adds	r7, #56	@ 0x38
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
 800b8e6:	bf00      	nop
 800b8e8:	e000ed04 	.word	0xe000ed04

0800b8ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b08e      	sub	sp, #56	@ 0x38
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	60b9      	str	r1, [r7, #8]
 800b8f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d10d      	bne.n	800b91e <xQueueReceiveFromISR+0x32>
	__asm volatile
 800b902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b906:	b672      	cpsid	i
 800b908:	f383 8811 	msr	BASEPRI, r3
 800b90c:	f3bf 8f6f 	isb	sy
 800b910:	f3bf 8f4f 	dsb	sy
 800b914:	b662      	cpsie	i
 800b916:	623b      	str	r3, [r7, #32]
}
 800b918:	bf00      	nop
 800b91a:	bf00      	nop
 800b91c:	e7fd      	b.n	800b91a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d103      	bne.n	800b92c <xQueueReceiveFromISR+0x40>
 800b924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d101      	bne.n	800b930 <xQueueReceiveFromISR+0x44>
 800b92c:	2301      	movs	r3, #1
 800b92e:	e000      	b.n	800b932 <xQueueReceiveFromISR+0x46>
 800b930:	2300      	movs	r3, #0
 800b932:	2b00      	cmp	r3, #0
 800b934:	d10d      	bne.n	800b952 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800b936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b93a:	b672      	cpsid	i
 800b93c:	f383 8811 	msr	BASEPRI, r3
 800b940:	f3bf 8f6f 	isb	sy
 800b944:	f3bf 8f4f 	dsb	sy
 800b948:	b662      	cpsie	i
 800b94a:	61fb      	str	r3, [r7, #28]
}
 800b94c:	bf00      	nop
 800b94e:	bf00      	nop
 800b950:	e7fd      	b.n	800b94e <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b952:	f002 f8c3 	bl	800dadc <vPortValidateInterruptPriority>
	__asm volatile
 800b956:	f3ef 8211 	mrs	r2, BASEPRI
 800b95a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b95e:	b672      	cpsid	i
 800b960:	f383 8811 	msr	BASEPRI, r3
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	b662      	cpsie	i
 800b96e:	61ba      	str	r2, [r7, #24]
 800b970:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b972:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b974:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b97a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b97c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d02f      	beq.n	800b9e2 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b984:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b988:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b98c:	68b9      	ldr	r1, [r7, #8]
 800b98e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b990:	f000 f8dc 	bl	800bb4c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b996:	1e5a      	subs	r2, r3, #1
 800b998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b99a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b99c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b9a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a4:	d112      	bne.n	800b9cc <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a8:	691b      	ldr	r3, [r3, #16]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d016      	beq.n	800b9dc <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9b0:	3310      	adds	r3, #16
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f000 fe7a 	bl	800c6ac <xTaskRemoveFromEventList>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d00e      	beq.n	800b9dc <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d00b      	beq.n	800b9dc <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	601a      	str	r2, [r3, #0]
 800b9ca:	e007      	b.n	800b9dc <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b9cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	b25a      	sxtb	r2, r3
 800b9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9e0:	e001      	b.n	800b9e6 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	f383 8811 	msr	BASEPRI, r3
}
 800b9f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b9f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3738      	adds	r7, #56	@ 0x38
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d10d      	bne.n	800ba2a <vQueueDelete+0x2e>
	__asm volatile
 800ba0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba12:	b672      	cpsid	i
 800ba14:	f383 8811 	msr	BASEPRI, r3
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	b662      	cpsie	i
 800ba22:	60bb      	str	r3, [r7, #8]
}
 800ba24:	bf00      	nop
 800ba26:	bf00      	nop
 800ba28:	e7fd      	b.n	800ba26 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ba2a:	68f8      	ldr	r0, [r7, #12]
 800ba2c:	f000 f95e 	bl	800bcec <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d102      	bne.n	800ba40 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800ba3a:	68f8      	ldr	r0, [r7, #12]
 800ba3c:	f002 f962 	bl	800dd04 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ba40:	bf00      	nop
 800ba42:	3710      	adds	r7, #16
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ba48:	b480      	push	{r7}
 800ba4a:	b085      	sub	sp, #20
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d006      	beq.n	800ba66 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ba62:	60fb      	str	r3, [r7, #12]
 800ba64:	e001      	b.n	800ba6a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ba66:	2300      	movs	r3, #0
 800ba68:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
	}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3714      	adds	r7, #20
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr

0800ba78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b086      	sub	sp, #24
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ba84:	2300      	movs	r3, #0
 800ba86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d10d      	bne.n	800bab2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d14d      	bne.n	800bb3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	4618      	mov	r0, r3
 800baa4:	f001 f850 	bl	800cb48 <xTaskPriorityDisinherit>
 800baa8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2200      	movs	r2, #0
 800baae:	609a      	str	r2, [r3, #8]
 800bab0:	e043      	b.n	800bb3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d119      	bne.n	800baec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	6858      	ldr	r0, [r3, #4]
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bac0:	461a      	mov	r2, r3
 800bac2:	68b9      	ldr	r1, [r7, #8]
 800bac4:	f003 fb55 	bl	800f172 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	685a      	ldr	r2, [r3, #4]
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bad0:	441a      	add	r2, r3
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	685a      	ldr	r2, [r3, #4]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	689b      	ldr	r3, [r3, #8]
 800bade:	429a      	cmp	r2, r3
 800bae0:	d32b      	bcc.n	800bb3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	605a      	str	r2, [r3, #4]
 800baea:	e026      	b.n	800bb3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	68d8      	ldr	r0, [r3, #12]
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baf4:	461a      	mov	r2, r3
 800baf6:	68b9      	ldr	r1, [r7, #8]
 800baf8:	f003 fb3b 	bl	800f172 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	68da      	ldr	r2, [r3, #12]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb04:	425b      	negs	r3, r3
 800bb06:	441a      	add	r2, r3
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	68da      	ldr	r2, [r3, #12]
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d207      	bcs.n	800bb28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	689a      	ldr	r2, [r3, #8]
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb20:	425b      	negs	r3, r3
 800bb22:	441a      	add	r2, r3
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2b02      	cmp	r3, #2
 800bb2c:	d105      	bne.n	800bb3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d002      	beq.n	800bb3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	3b01      	subs	r3, #1
 800bb38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	1c5a      	adds	r2, r3, #1
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800bb42:	697b      	ldr	r3, [r7, #20]
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3718      	adds	r7, #24
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d018      	beq.n	800bb90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	68da      	ldr	r2, [r3, #12]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb66:	441a      	add	r2, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	68da      	ldr	r2, [r3, #12]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	689b      	ldr	r3, [r3, #8]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d303      	bcc.n	800bb80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681a      	ldr	r2, [r3, #0]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	68d9      	ldr	r1, [r3, #12]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb88:	461a      	mov	r2, r3
 800bb8a:	6838      	ldr	r0, [r7, #0]
 800bb8c:	f003 faf1 	bl	800f172 <memcpy>
	}
}
 800bb90:	bf00      	nop
 800bb92:	3708      	adds	r7, #8
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bba0:	f001 feb4 	bl	800d90c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bbaa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bbac:	e011      	b.n	800bbd2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d012      	beq.n	800bbdc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	3324      	adds	r3, #36	@ 0x24
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f000 fd76 	bl	800c6ac <xTaskRemoveFromEventList>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d001      	beq.n	800bbca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bbc6:	f000 fe55 	bl	800c874 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bbca:	7bfb      	ldrb	r3, [r7, #15]
 800bbcc:	3b01      	subs	r3, #1
 800bbce:	b2db      	uxtb	r3, r3
 800bbd0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bbd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	dce9      	bgt.n	800bbae <prvUnlockQueue+0x16>
 800bbda:	e000      	b.n	800bbde <prvUnlockQueue+0x46>
					break;
 800bbdc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	22ff      	movs	r2, #255	@ 0xff
 800bbe2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800bbe6:	f001 fec7 	bl	800d978 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bbea:	f001 fe8f 	bl	800d90c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bbf4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bbf6:	e011      	b.n	800bc1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	691b      	ldr	r3, [r3, #16]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d012      	beq.n	800bc26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	3310      	adds	r3, #16
 800bc04:	4618      	mov	r0, r3
 800bc06:	f000 fd51 	bl	800c6ac <xTaskRemoveFromEventList>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d001      	beq.n	800bc14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bc10:	f000 fe30 	bl	800c874 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bc14:	7bbb      	ldrb	r3, [r7, #14]
 800bc16:	3b01      	subs	r3, #1
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	dce9      	bgt.n	800bbf8 <prvUnlockQueue+0x60>
 800bc24:	e000      	b.n	800bc28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bc26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	22ff      	movs	r2, #255	@ 0xff
 800bc2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800bc30:	f001 fea2 	bl	800d978 <vPortExitCritical>
}
 800bc34:	bf00      	nop
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc44:	f001 fe62 	bl	800d90c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d102      	bne.n	800bc56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bc50:	2301      	movs	r3, #1
 800bc52:	60fb      	str	r3, [r7, #12]
 800bc54:	e001      	b.n	800bc5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bc56:	2300      	movs	r3, #0
 800bc58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc5a:	f001 fe8d 	bl	800d978 <vPortExitCritical>

	return xReturn;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3710      	adds	r7, #16
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc70:	f001 fe4c 	bl	800d90c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d102      	bne.n	800bc86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bc80:	2301      	movs	r3, #1
 800bc82:	60fb      	str	r3, [r7, #12]
 800bc84:	e001      	b.n	800bc8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bc86:	2300      	movs	r3, #0
 800bc88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc8a:	f001 fe75 	bl	800d978 <vPortExitCritical>

	return xReturn;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3710      	adds	r7, #16
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bc98:	b480      	push	{r7}
 800bc9a:	b085      	sub	sp, #20
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bca2:	2300      	movs	r3, #0
 800bca4:	60fb      	str	r3, [r7, #12]
 800bca6:	e014      	b.n	800bcd2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bca8:	4a0f      	ldr	r2, [pc, #60]	@ (800bce8 <vQueueAddToRegistry+0x50>)
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d10b      	bne.n	800bccc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bcb4:	490c      	ldr	r1, [pc, #48]	@ (800bce8 <vQueueAddToRegistry+0x50>)
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	683a      	ldr	r2, [r7, #0]
 800bcba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bcbe:	4a0a      	ldr	r2, [pc, #40]	@ (800bce8 <vQueueAddToRegistry+0x50>)
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	00db      	lsls	r3, r3, #3
 800bcc4:	4413      	add	r3, r2
 800bcc6:	687a      	ldr	r2, [r7, #4]
 800bcc8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bcca:	e006      	b.n	800bcda <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	3301      	adds	r3, #1
 800bcd0:	60fb      	str	r3, [r7, #12]
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2b07      	cmp	r3, #7
 800bcd6:	d9e7      	bls.n	800bca8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bcd8:	bf00      	nop
 800bcda:	bf00      	nop
 800bcdc:	3714      	adds	r7, #20
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr
 800bce6:	bf00      	nop
 800bce8:	200017b0 	.word	0x200017b0

0800bcec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bcec:	b480      	push	{r7}
 800bcee:	b085      	sub	sp, #20
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	60fb      	str	r3, [r7, #12]
 800bcf8:	e016      	b.n	800bd28 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bcfa:	4a10      	ldr	r2, [pc, #64]	@ (800bd3c <vQueueUnregisterQueue+0x50>)
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	00db      	lsls	r3, r3, #3
 800bd00:	4413      	add	r3, r2
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	687a      	ldr	r2, [r7, #4]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d10b      	bne.n	800bd22 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bd0a:	4a0c      	ldr	r2, [pc, #48]	@ (800bd3c <vQueueUnregisterQueue+0x50>)
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2100      	movs	r1, #0
 800bd10:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bd14:	4a09      	ldr	r2, [pc, #36]	@ (800bd3c <vQueueUnregisterQueue+0x50>)
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	00db      	lsls	r3, r3, #3
 800bd1a:	4413      	add	r3, r2
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	605a      	str	r2, [r3, #4]
				break;
 800bd20:	e006      	b.n	800bd30 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	3301      	adds	r3, #1
 800bd26:	60fb      	str	r3, [r7, #12]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2b07      	cmp	r3, #7
 800bd2c:	d9e5      	bls.n	800bcfa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bd2e:	bf00      	nop
 800bd30:	bf00      	nop
 800bd32:	3714      	adds	r7, #20
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr
 800bd3c:	200017b0 	.word	0x200017b0

0800bd40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b086      	sub	sp, #24
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bd50:	f001 fddc 	bl	800d90c <vPortEnterCritical>
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bd5a:	b25b      	sxtb	r3, r3
 800bd5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd60:	d103      	bne.n	800bd6a <vQueueWaitForMessageRestricted+0x2a>
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	2200      	movs	r2, #0
 800bd66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bd70:	b25b      	sxtb	r3, r3
 800bd72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd76:	d103      	bne.n	800bd80 <vQueueWaitForMessageRestricted+0x40>
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd80:	f001 fdfa 	bl	800d978 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d106      	bne.n	800bd9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	3324      	adds	r3, #36	@ 0x24
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	68b9      	ldr	r1, [r7, #8]
 800bd94:	4618      	mov	r0, r3
 800bd96:	f000 fc5b 	bl	800c650 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bd9a:	6978      	ldr	r0, [r7, #20]
 800bd9c:	f7ff fefc 	bl	800bb98 <prvUnlockQueue>
	}
 800bda0:	bf00      	nop
 800bda2:	3718      	adds	r7, #24
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b08e      	sub	sp, #56	@ 0x38
 800bdac:	af04      	add	r7, sp, #16
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	607a      	str	r2, [r7, #4]
 800bdb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bdb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d10d      	bne.n	800bdd8 <xTaskCreateStatic+0x30>
	__asm volatile
 800bdbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc0:	b672      	cpsid	i
 800bdc2:	f383 8811 	msr	BASEPRI, r3
 800bdc6:	f3bf 8f6f 	isb	sy
 800bdca:	f3bf 8f4f 	dsb	sy
 800bdce:	b662      	cpsie	i
 800bdd0:	623b      	str	r3, [r7, #32]
}
 800bdd2:	bf00      	nop
 800bdd4:	bf00      	nop
 800bdd6:	e7fd      	b.n	800bdd4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800bdd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d10d      	bne.n	800bdfa <xTaskCreateStatic+0x52>
	__asm volatile
 800bdde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bde2:	b672      	cpsid	i
 800bde4:	f383 8811 	msr	BASEPRI, r3
 800bde8:	f3bf 8f6f 	isb	sy
 800bdec:	f3bf 8f4f 	dsb	sy
 800bdf0:	b662      	cpsie	i
 800bdf2:	61fb      	str	r3, [r7, #28]
}
 800bdf4:	bf00      	nop
 800bdf6:	bf00      	nop
 800bdf8:	e7fd      	b.n	800bdf6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bdfa:	235c      	movs	r3, #92	@ 0x5c
 800bdfc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	2b5c      	cmp	r3, #92	@ 0x5c
 800be02:	d00d      	beq.n	800be20 <xTaskCreateStatic+0x78>
	__asm volatile
 800be04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be08:	b672      	cpsid	i
 800be0a:	f383 8811 	msr	BASEPRI, r3
 800be0e:	f3bf 8f6f 	isb	sy
 800be12:	f3bf 8f4f 	dsb	sy
 800be16:	b662      	cpsie	i
 800be18:	61bb      	str	r3, [r7, #24]
}
 800be1a:	bf00      	nop
 800be1c:	bf00      	nop
 800be1e:	e7fd      	b.n	800be1c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800be20:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800be22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be24:	2b00      	cmp	r3, #0
 800be26:	d01e      	beq.n	800be66 <xTaskCreateStatic+0xbe>
 800be28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d01b      	beq.n	800be66 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be30:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800be32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be36:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800be38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be3a:	2202      	movs	r2, #2
 800be3c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800be40:	2300      	movs	r3, #0
 800be42:	9303      	str	r3, [sp, #12]
 800be44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be46:	9302      	str	r3, [sp, #8]
 800be48:	f107 0314 	add.w	r3, r7, #20
 800be4c:	9301      	str	r3, [sp, #4]
 800be4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be50:	9300      	str	r3, [sp, #0]
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	68b9      	ldr	r1, [r7, #8]
 800be58:	68f8      	ldr	r0, [r7, #12]
 800be5a:	f000 f850 	bl	800befe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800be60:	f000 f8e0 	bl	800c024 <prvAddNewTaskToReadyList>
 800be64:	e001      	b.n	800be6a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800be66:	2300      	movs	r3, #0
 800be68:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800be6a:	697b      	ldr	r3, [r7, #20]
	}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3728      	adds	r7, #40	@ 0x28
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800be74:	b580      	push	{r7, lr}
 800be76:	b08c      	sub	sp, #48	@ 0x30
 800be78:	af04      	add	r7, sp, #16
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	60b9      	str	r1, [r7, #8]
 800be7e:	603b      	str	r3, [r7, #0]
 800be80:	4613      	mov	r3, r2
 800be82:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800be84:	88fb      	ldrh	r3, [r7, #6]
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	4618      	mov	r0, r3
 800be8a:	f001 fe6d 	bl	800db68 <pvPortMalloc>
 800be8e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d00e      	beq.n	800beb4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800be96:	205c      	movs	r0, #92	@ 0x5c
 800be98:	f001 fe66 	bl	800db68 <pvPortMalloc>
 800be9c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d003      	beq.n	800beac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	697a      	ldr	r2, [r7, #20]
 800bea8:	631a      	str	r2, [r3, #48]	@ 0x30
 800beaa:	e005      	b.n	800beb8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800beac:	6978      	ldr	r0, [r7, #20]
 800beae:	f001 ff29 	bl	800dd04 <vPortFree>
 800beb2:	e001      	b.n	800beb8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800beb4:	2300      	movs	r3, #0
 800beb6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800beb8:	69fb      	ldr	r3, [r7, #28]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d017      	beq.n	800beee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bebe:	69fb      	ldr	r3, [r7, #28]
 800bec0:	2200      	movs	r2, #0
 800bec2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bec6:	88fa      	ldrh	r2, [r7, #6]
 800bec8:	2300      	movs	r3, #0
 800beca:	9303      	str	r3, [sp, #12]
 800becc:	69fb      	ldr	r3, [r7, #28]
 800bece:	9302      	str	r3, [sp, #8]
 800bed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bed2:	9301      	str	r3, [sp, #4]
 800bed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	68b9      	ldr	r1, [r7, #8]
 800bedc:	68f8      	ldr	r0, [r7, #12]
 800bede:	f000 f80e 	bl	800befe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bee2:	69f8      	ldr	r0, [r7, #28]
 800bee4:	f000 f89e 	bl	800c024 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bee8:	2301      	movs	r3, #1
 800beea:	61bb      	str	r3, [r7, #24]
 800beec:	e002      	b.n	800bef4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800beee:	f04f 33ff 	mov.w	r3, #4294967295
 800bef2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bef4:	69bb      	ldr	r3, [r7, #24]
	}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3720      	adds	r7, #32
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b088      	sub	sp, #32
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	60f8      	str	r0, [r7, #12]
 800bf06:	60b9      	str	r1, [r7, #8]
 800bf08:	607a      	str	r2, [r7, #4]
 800bf0a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bf0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf0e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	461a      	mov	r2, r3
 800bf16:	21a5      	movs	r1, #165	@ 0xa5
 800bf18:	f003 f8ac 	bl	800f074 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bf1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf20:	6879      	ldr	r1, [r7, #4]
 800bf22:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800bf26:	440b      	add	r3, r1
 800bf28:	009b      	lsls	r3, r3, #2
 800bf2a:	4413      	add	r3, r2
 800bf2c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	f023 0307 	bic.w	r3, r3, #7
 800bf34:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	f003 0307 	and.w	r3, r3, #7
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d00d      	beq.n	800bf5c <prvInitialiseNewTask+0x5e>
	__asm volatile
 800bf40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf44:	b672      	cpsid	i
 800bf46:	f383 8811 	msr	BASEPRI, r3
 800bf4a:	f3bf 8f6f 	isb	sy
 800bf4e:	f3bf 8f4f 	dsb	sy
 800bf52:	b662      	cpsie	i
 800bf54:	617b      	str	r3, [r7, #20]
}
 800bf56:	bf00      	nop
 800bf58:	bf00      	nop
 800bf5a:	e7fd      	b.n	800bf58 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d01f      	beq.n	800bfa2 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf62:	2300      	movs	r3, #0
 800bf64:	61fb      	str	r3, [r7, #28]
 800bf66:	e012      	b.n	800bf8e <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bf68:	68ba      	ldr	r2, [r7, #8]
 800bf6a:	69fb      	ldr	r3, [r7, #28]
 800bf6c:	4413      	add	r3, r2
 800bf6e:	7819      	ldrb	r1, [r3, #0]
 800bf70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf72:	69fb      	ldr	r3, [r7, #28]
 800bf74:	4413      	add	r3, r2
 800bf76:	3334      	adds	r3, #52	@ 0x34
 800bf78:	460a      	mov	r2, r1
 800bf7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	69fb      	ldr	r3, [r7, #28]
 800bf80:	4413      	add	r3, r2
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d006      	beq.n	800bf96 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	61fb      	str	r3, [r7, #28]
 800bf8e:	69fb      	ldr	r3, [r7, #28]
 800bf90:	2b0f      	cmp	r3, #15
 800bf92:	d9e9      	bls.n	800bf68 <prvInitialiseNewTask+0x6a>
 800bf94:	e000      	b.n	800bf98 <prvInitialiseNewTask+0x9a>
			{
				break;
 800bf96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bf98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bfa0:	e003      	b.n	800bfaa <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bfa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bfaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfac:	2b37      	cmp	r3, #55	@ 0x37
 800bfae:	d901      	bls.n	800bfb4 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bfb0:	2337      	movs	r3, #55	@ 0x37
 800bfb2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bfb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bfb8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bfba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bfbe:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bfc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bfc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfc8:	3304      	adds	r3, #4
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7fe fdb2 	bl	800ab34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bfd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfd2:	3318      	adds	r3, #24
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f7fe fdad 	bl	800ab34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bfda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfe2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bfe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfe8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bfea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfee:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bff2:	2200      	movs	r2, #0
 800bff4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bff8:	2200      	movs	r2, #0
 800bffa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bffe:	683a      	ldr	r2, [r7, #0]
 800c000:	68f9      	ldr	r1, [r7, #12]
 800c002:	69b8      	ldr	r0, [r7, #24]
 800c004:	f001 fb74 	bl	800d6f0 <pxPortInitialiseStack>
 800c008:	4602      	mov	r2, r0
 800c00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c00c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c00e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c010:	2b00      	cmp	r3, #0
 800c012:	d002      	beq.n	800c01a <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c016:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c018:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c01a:	bf00      	nop
 800c01c:	3720      	adds	r7, #32
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
	...

0800c024 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c02c:	f001 fc6e 	bl	800d90c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c030:	4b2d      	ldr	r3, [pc, #180]	@ (800c0e8 <prvAddNewTaskToReadyList+0xc4>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	3301      	adds	r3, #1
 800c036:	4a2c      	ldr	r2, [pc, #176]	@ (800c0e8 <prvAddNewTaskToReadyList+0xc4>)
 800c038:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c03a:	4b2c      	ldr	r3, [pc, #176]	@ (800c0ec <prvAddNewTaskToReadyList+0xc8>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d109      	bne.n	800c056 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c042:	4a2a      	ldr	r2, [pc, #168]	@ (800c0ec <prvAddNewTaskToReadyList+0xc8>)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c048:	4b27      	ldr	r3, [pc, #156]	@ (800c0e8 <prvAddNewTaskToReadyList+0xc4>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	d110      	bne.n	800c072 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c050:	f000 fc34 	bl	800c8bc <prvInitialiseTaskLists>
 800c054:	e00d      	b.n	800c072 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c056:	4b26      	ldr	r3, [pc, #152]	@ (800c0f0 <prvAddNewTaskToReadyList+0xcc>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d109      	bne.n	800c072 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c05e:	4b23      	ldr	r3, [pc, #140]	@ (800c0ec <prvAddNewTaskToReadyList+0xc8>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c068:	429a      	cmp	r2, r3
 800c06a:	d802      	bhi.n	800c072 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c06c:	4a1f      	ldr	r2, [pc, #124]	@ (800c0ec <prvAddNewTaskToReadyList+0xc8>)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c072:	4b20      	ldr	r3, [pc, #128]	@ (800c0f4 <prvAddNewTaskToReadyList+0xd0>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	3301      	adds	r3, #1
 800c078:	4a1e      	ldr	r2, [pc, #120]	@ (800c0f4 <prvAddNewTaskToReadyList+0xd0>)
 800c07a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c07c:	4b1d      	ldr	r3, [pc, #116]	@ (800c0f4 <prvAddNewTaskToReadyList+0xd0>)
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c088:	4b1b      	ldr	r3, [pc, #108]	@ (800c0f8 <prvAddNewTaskToReadyList+0xd4>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d903      	bls.n	800c098 <prvAddNewTaskToReadyList+0x74>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c094:	4a18      	ldr	r2, [pc, #96]	@ (800c0f8 <prvAddNewTaskToReadyList+0xd4>)
 800c096:	6013      	str	r3, [r2, #0]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c09c:	4613      	mov	r3, r2
 800c09e:	009b      	lsls	r3, r3, #2
 800c0a0:	4413      	add	r3, r2
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	4a15      	ldr	r2, [pc, #84]	@ (800c0fc <prvAddNewTaskToReadyList+0xd8>)
 800c0a6:	441a      	add	r2, r3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	3304      	adds	r3, #4
 800c0ac:	4619      	mov	r1, r3
 800c0ae:	4610      	mov	r0, r2
 800c0b0:	f7fe fd4d 	bl	800ab4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c0b4:	f001 fc60 	bl	800d978 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c0b8:	4b0d      	ldr	r3, [pc, #52]	@ (800c0f0 <prvAddNewTaskToReadyList+0xcc>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d00e      	beq.n	800c0de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c0c0:	4b0a      	ldr	r3, [pc, #40]	@ (800c0ec <prvAddNewTaskToReadyList+0xc8>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d207      	bcs.n	800c0de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c0ce:	4b0c      	ldr	r3, [pc, #48]	@ (800c100 <prvAddNewTaskToReadyList+0xdc>)
 800c0d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0d4:	601a      	str	r2, [r3, #0]
 800c0d6:	f3bf 8f4f 	dsb	sy
 800c0da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c0de:	bf00      	nop
 800c0e0:	3708      	adds	r7, #8
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	20001cc4 	.word	0x20001cc4
 800c0ec:	200017f0 	.word	0x200017f0
 800c0f0:	20001cd0 	.word	0x20001cd0
 800c0f4:	20001ce0 	.word	0x20001ce0
 800c0f8:	20001ccc 	.word	0x20001ccc
 800c0fc:	200017f4 	.word	0x200017f4
 800c100:	e000ed04 	.word	0xe000ed04

0800c104 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c10c:	2300      	movs	r3, #0
 800c10e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d01a      	beq.n	800c14c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c116:	4b15      	ldr	r3, [pc, #84]	@ (800c16c <vTaskDelay+0x68>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00d      	beq.n	800c13a <vTaskDelay+0x36>
	__asm volatile
 800c11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c122:	b672      	cpsid	i
 800c124:	f383 8811 	msr	BASEPRI, r3
 800c128:	f3bf 8f6f 	isb	sy
 800c12c:	f3bf 8f4f 	dsb	sy
 800c130:	b662      	cpsie	i
 800c132:	60bb      	str	r3, [r7, #8]
}
 800c134:	bf00      	nop
 800c136:	bf00      	nop
 800c138:	e7fd      	b.n	800c136 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c13a:	f000 f887 	bl	800c24c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c13e:	2100      	movs	r1, #0
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 ff19 	bl	800cf78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c146:	f000 f88f 	bl	800c268 <xTaskResumeAll>
 800c14a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d107      	bne.n	800c162 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800c152:	4b07      	ldr	r3, [pc, #28]	@ (800c170 <vTaskDelay+0x6c>)
 800c154:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c158:	601a      	str	r2, [r3, #0]
 800c15a:	f3bf 8f4f 	dsb	sy
 800c15e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c162:	bf00      	nop
 800c164:	3710      	adds	r7, #16
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	20001cec 	.word	0x20001cec
 800c170:	e000ed04 	.word	0xe000ed04

0800c174 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b08a      	sub	sp, #40	@ 0x28
 800c178:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c17a:	2300      	movs	r3, #0
 800c17c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c17e:	2300      	movs	r3, #0
 800c180:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c182:	463a      	mov	r2, r7
 800c184:	1d39      	adds	r1, r7, #4
 800c186:	f107 0308 	add.w	r3, r7, #8
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7fe fc7e 	bl	800aa8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c190:	6839      	ldr	r1, [r7, #0]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	68ba      	ldr	r2, [r7, #8]
 800c196:	9202      	str	r2, [sp, #8]
 800c198:	9301      	str	r3, [sp, #4]
 800c19a:	2300      	movs	r3, #0
 800c19c:	9300      	str	r3, [sp, #0]
 800c19e:	2300      	movs	r3, #0
 800c1a0:	460a      	mov	r2, r1
 800c1a2:	4924      	ldr	r1, [pc, #144]	@ (800c234 <vTaskStartScheduler+0xc0>)
 800c1a4:	4824      	ldr	r0, [pc, #144]	@ (800c238 <vTaskStartScheduler+0xc4>)
 800c1a6:	f7ff fdff 	bl	800bda8 <xTaskCreateStatic>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	4a23      	ldr	r2, [pc, #140]	@ (800c23c <vTaskStartScheduler+0xc8>)
 800c1ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c1b0:	4b22      	ldr	r3, [pc, #136]	@ (800c23c <vTaskStartScheduler+0xc8>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d002      	beq.n	800c1be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	617b      	str	r3, [r7, #20]
 800c1bc:	e001      	b.n	800c1c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d102      	bne.n	800c1ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c1c8:	f000 ff2a 	bl	800d020 <xTimerCreateTimerTask>
 800c1cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d118      	bne.n	800c206 <vTaskStartScheduler+0x92>
	__asm volatile
 800c1d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1d8:	b672      	cpsid	i
 800c1da:	f383 8811 	msr	BASEPRI, r3
 800c1de:	f3bf 8f6f 	isb	sy
 800c1e2:	f3bf 8f4f 	dsb	sy
 800c1e6:	b662      	cpsie	i
 800c1e8:	613b      	str	r3, [r7, #16]
}
 800c1ea:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c1ec:	4b14      	ldr	r3, [pc, #80]	@ (800c240 <vTaskStartScheduler+0xcc>)
 800c1ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c1f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c1f4:	4b13      	ldr	r3, [pc, #76]	@ (800c244 <vTaskStartScheduler+0xd0>)
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c1fa:	4b13      	ldr	r3, [pc, #76]	@ (800c248 <vTaskStartScheduler+0xd4>)
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c200:	f001 fb06 	bl	800d810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c204:	e011      	b.n	800c22a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c20c:	d10d      	bne.n	800c22a <vTaskStartScheduler+0xb6>
	__asm volatile
 800c20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c212:	b672      	cpsid	i
 800c214:	f383 8811 	msr	BASEPRI, r3
 800c218:	f3bf 8f6f 	isb	sy
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	b662      	cpsie	i
 800c222:	60fb      	str	r3, [r7, #12]
}
 800c224:	bf00      	nop
 800c226:	bf00      	nop
 800c228:	e7fd      	b.n	800c226 <vTaskStartScheduler+0xb2>
}
 800c22a:	bf00      	nop
 800c22c:	3718      	adds	r7, #24
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	08012a68 	.word	0x08012a68
 800c238:	0800c88d 	.word	0x0800c88d
 800c23c:	20001ce8 	.word	0x20001ce8
 800c240:	20001ce4 	.word	0x20001ce4
 800c244:	20001cd0 	.word	0x20001cd0
 800c248:	20001cc8 	.word	0x20001cc8

0800c24c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c24c:	b480      	push	{r7}
 800c24e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c250:	4b04      	ldr	r3, [pc, #16]	@ (800c264 <vTaskSuspendAll+0x18>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	3301      	adds	r3, #1
 800c256:	4a03      	ldr	r2, [pc, #12]	@ (800c264 <vTaskSuspendAll+0x18>)
 800c258:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c25a:	bf00      	nop
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr
 800c264:	20001cec 	.word	0x20001cec

0800c268 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c26e:	2300      	movs	r3, #0
 800c270:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c272:	2300      	movs	r3, #0
 800c274:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c276:	4b43      	ldr	r3, [pc, #268]	@ (800c384 <xTaskResumeAll+0x11c>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d10d      	bne.n	800c29a <xTaskResumeAll+0x32>
	__asm volatile
 800c27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c282:	b672      	cpsid	i
 800c284:	f383 8811 	msr	BASEPRI, r3
 800c288:	f3bf 8f6f 	isb	sy
 800c28c:	f3bf 8f4f 	dsb	sy
 800c290:	b662      	cpsie	i
 800c292:	603b      	str	r3, [r7, #0]
}
 800c294:	bf00      	nop
 800c296:	bf00      	nop
 800c298:	e7fd      	b.n	800c296 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c29a:	f001 fb37 	bl	800d90c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c29e:	4b39      	ldr	r3, [pc, #228]	@ (800c384 <xTaskResumeAll+0x11c>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	3b01      	subs	r3, #1
 800c2a4:	4a37      	ldr	r2, [pc, #220]	@ (800c384 <xTaskResumeAll+0x11c>)
 800c2a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2a8:	4b36      	ldr	r3, [pc, #216]	@ (800c384 <xTaskResumeAll+0x11c>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d162      	bne.n	800c376 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c2b0:	4b35      	ldr	r3, [pc, #212]	@ (800c388 <xTaskResumeAll+0x120>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d05e      	beq.n	800c376 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c2b8:	e02f      	b.n	800c31a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2ba:	4b34      	ldr	r3, [pc, #208]	@ (800c38c <xTaskResumeAll+0x124>)
 800c2bc:	68db      	ldr	r3, [r3, #12]
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	3318      	adds	r3, #24
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f7fe fc9e 	bl	800ac08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	3304      	adds	r3, #4
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f7fe fc99 	bl	800ac08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2da:	4b2d      	ldr	r3, [pc, #180]	@ (800c390 <xTaskResumeAll+0x128>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d903      	bls.n	800c2ea <xTaskResumeAll+0x82>
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2e6:	4a2a      	ldr	r2, [pc, #168]	@ (800c390 <xTaskResumeAll+0x128>)
 800c2e8:	6013      	str	r3, [r2, #0]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2ee:	4613      	mov	r3, r2
 800c2f0:	009b      	lsls	r3, r3, #2
 800c2f2:	4413      	add	r3, r2
 800c2f4:	009b      	lsls	r3, r3, #2
 800c2f6:	4a27      	ldr	r2, [pc, #156]	@ (800c394 <xTaskResumeAll+0x12c>)
 800c2f8:	441a      	add	r2, r3
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	3304      	adds	r3, #4
 800c2fe:	4619      	mov	r1, r3
 800c300:	4610      	mov	r0, r2
 800c302:	f7fe fc24 	bl	800ab4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c30a:	4b23      	ldr	r3, [pc, #140]	@ (800c398 <xTaskResumeAll+0x130>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c310:	429a      	cmp	r2, r3
 800c312:	d302      	bcc.n	800c31a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800c314:	4b21      	ldr	r3, [pc, #132]	@ (800c39c <xTaskResumeAll+0x134>)
 800c316:	2201      	movs	r2, #1
 800c318:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c31a:	4b1c      	ldr	r3, [pc, #112]	@ (800c38c <xTaskResumeAll+0x124>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d1cb      	bne.n	800c2ba <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d001      	beq.n	800c32c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c328:	f000 fb68 	bl	800c9fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c32c:	4b1c      	ldr	r3, [pc, #112]	@ (800c3a0 <xTaskResumeAll+0x138>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d010      	beq.n	800c35a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c338:	f000 f846 	bl	800c3c8 <xTaskIncrementTick>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d002      	beq.n	800c348 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800c342:	4b16      	ldr	r3, [pc, #88]	@ (800c39c <xTaskResumeAll+0x134>)
 800c344:	2201      	movs	r2, #1
 800c346:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	3b01      	subs	r3, #1
 800c34c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d1f1      	bne.n	800c338 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800c354:	4b12      	ldr	r3, [pc, #72]	@ (800c3a0 <xTaskResumeAll+0x138>)
 800c356:	2200      	movs	r2, #0
 800c358:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c35a:	4b10      	ldr	r3, [pc, #64]	@ (800c39c <xTaskResumeAll+0x134>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d009      	beq.n	800c376 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c362:	2301      	movs	r3, #1
 800c364:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c366:	4b0f      	ldr	r3, [pc, #60]	@ (800c3a4 <xTaskResumeAll+0x13c>)
 800c368:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c36c:	601a      	str	r2, [r3, #0]
 800c36e:	f3bf 8f4f 	dsb	sy
 800c372:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c376:	f001 faff 	bl	800d978 <vPortExitCritical>

	return xAlreadyYielded;
 800c37a:	68bb      	ldr	r3, [r7, #8]
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3710      	adds	r7, #16
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}
 800c384:	20001cec 	.word	0x20001cec
 800c388:	20001cc4 	.word	0x20001cc4
 800c38c:	20001c84 	.word	0x20001c84
 800c390:	20001ccc 	.word	0x20001ccc
 800c394:	200017f4 	.word	0x200017f4
 800c398:	200017f0 	.word	0x200017f0
 800c39c:	20001cd8 	.word	0x20001cd8
 800c3a0:	20001cd4 	.word	0x20001cd4
 800c3a4:	e000ed04 	.word	0xe000ed04

0800c3a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b083      	sub	sp, #12
 800c3ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c3ae:	4b05      	ldr	r3, [pc, #20]	@ (800c3c4 <xTaskGetTickCount+0x1c>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c3b4:	687b      	ldr	r3, [r7, #4]
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	370c      	adds	r7, #12
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr
 800c3c2:	bf00      	nop
 800c3c4:	20001cc8 	.word	0x20001cc8

0800c3c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b086      	sub	sp, #24
 800c3cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3d2:	4b50      	ldr	r3, [pc, #320]	@ (800c514 <xTaskIncrementTick+0x14c>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	f040 808c 	bne.w	800c4f4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c3dc:	4b4e      	ldr	r3, [pc, #312]	@ (800c518 <xTaskIncrementTick+0x150>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c3e4:	4a4c      	ldr	r2, [pc, #304]	@ (800c518 <xTaskIncrementTick+0x150>)
 800c3e6:	693b      	ldr	r3, [r7, #16]
 800c3e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c3ea:	693b      	ldr	r3, [r7, #16]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d123      	bne.n	800c438 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800c3f0:	4b4a      	ldr	r3, [pc, #296]	@ (800c51c <xTaskIncrementTick+0x154>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d00d      	beq.n	800c416 <xTaskIncrementTick+0x4e>
	__asm volatile
 800c3fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3fe:	b672      	cpsid	i
 800c400:	f383 8811 	msr	BASEPRI, r3
 800c404:	f3bf 8f6f 	isb	sy
 800c408:	f3bf 8f4f 	dsb	sy
 800c40c:	b662      	cpsie	i
 800c40e:	603b      	str	r3, [r7, #0]
}
 800c410:	bf00      	nop
 800c412:	bf00      	nop
 800c414:	e7fd      	b.n	800c412 <xTaskIncrementTick+0x4a>
 800c416:	4b41      	ldr	r3, [pc, #260]	@ (800c51c <xTaskIncrementTick+0x154>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	60fb      	str	r3, [r7, #12]
 800c41c:	4b40      	ldr	r3, [pc, #256]	@ (800c520 <xTaskIncrementTick+0x158>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a3e      	ldr	r2, [pc, #248]	@ (800c51c <xTaskIncrementTick+0x154>)
 800c422:	6013      	str	r3, [r2, #0]
 800c424:	4a3e      	ldr	r2, [pc, #248]	@ (800c520 <xTaskIncrementTick+0x158>)
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	6013      	str	r3, [r2, #0]
 800c42a:	4b3e      	ldr	r3, [pc, #248]	@ (800c524 <xTaskIncrementTick+0x15c>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	3301      	adds	r3, #1
 800c430:	4a3c      	ldr	r2, [pc, #240]	@ (800c524 <xTaskIncrementTick+0x15c>)
 800c432:	6013      	str	r3, [r2, #0]
 800c434:	f000 fae2 	bl	800c9fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c438:	4b3b      	ldr	r3, [pc, #236]	@ (800c528 <xTaskIncrementTick+0x160>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	693a      	ldr	r2, [r7, #16]
 800c43e:	429a      	cmp	r2, r3
 800c440:	d349      	bcc.n	800c4d6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c442:	4b36      	ldr	r3, [pc, #216]	@ (800c51c <xTaskIncrementTick+0x154>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d104      	bne.n	800c456 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c44c:	4b36      	ldr	r3, [pc, #216]	@ (800c528 <xTaskIncrementTick+0x160>)
 800c44e:	f04f 32ff 	mov.w	r2, #4294967295
 800c452:	601a      	str	r2, [r3, #0]
					break;
 800c454:	e03f      	b.n	800c4d6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c456:	4b31      	ldr	r3, [pc, #196]	@ (800c51c <xTaskIncrementTick+0x154>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	68db      	ldr	r3, [r3, #12]
 800c45e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c466:	693a      	ldr	r2, [r7, #16]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d203      	bcs.n	800c476 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c46e:	4a2e      	ldr	r2, [pc, #184]	@ (800c528 <xTaskIncrementTick+0x160>)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c474:	e02f      	b.n	800c4d6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	3304      	adds	r3, #4
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7fe fbc4 	bl	800ac08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c484:	2b00      	cmp	r3, #0
 800c486:	d004      	beq.n	800c492 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	3318      	adds	r3, #24
 800c48c:	4618      	mov	r0, r3
 800c48e:	f7fe fbbb 	bl	800ac08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c496:	4b25      	ldr	r3, [pc, #148]	@ (800c52c <xTaskIncrementTick+0x164>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d903      	bls.n	800c4a6 <xTaskIncrementTick+0xde>
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4a2:	4a22      	ldr	r2, [pc, #136]	@ (800c52c <xTaskIncrementTick+0x164>)
 800c4a4:	6013      	str	r3, [r2, #0]
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4aa:	4613      	mov	r3, r2
 800c4ac:	009b      	lsls	r3, r3, #2
 800c4ae:	4413      	add	r3, r2
 800c4b0:	009b      	lsls	r3, r3, #2
 800c4b2:	4a1f      	ldr	r2, [pc, #124]	@ (800c530 <xTaskIncrementTick+0x168>)
 800c4b4:	441a      	add	r2, r3
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	3304      	adds	r3, #4
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	4610      	mov	r0, r2
 800c4be:	f7fe fb46 	bl	800ab4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4c6:	4b1b      	ldr	r3, [pc, #108]	@ (800c534 <xTaskIncrementTick+0x16c>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d3b8      	bcc.n	800c442 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4d4:	e7b5      	b.n	800c442 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c4d6:	4b17      	ldr	r3, [pc, #92]	@ (800c534 <xTaskIncrementTick+0x16c>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4dc:	4914      	ldr	r1, [pc, #80]	@ (800c530 <xTaskIncrementTick+0x168>)
 800c4de:	4613      	mov	r3, r2
 800c4e0:	009b      	lsls	r3, r3, #2
 800c4e2:	4413      	add	r3, r2
 800c4e4:	009b      	lsls	r3, r3, #2
 800c4e6:	440b      	add	r3, r1
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	2b01      	cmp	r3, #1
 800c4ec:	d907      	bls.n	800c4fe <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	617b      	str	r3, [r7, #20]
 800c4f2:	e004      	b.n	800c4fe <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c4f4:	4b10      	ldr	r3, [pc, #64]	@ (800c538 <xTaskIncrementTick+0x170>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	3301      	adds	r3, #1
 800c4fa:	4a0f      	ldr	r2, [pc, #60]	@ (800c538 <xTaskIncrementTick+0x170>)
 800c4fc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c4fe:	4b0f      	ldr	r3, [pc, #60]	@ (800c53c <xTaskIncrementTick+0x174>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d001      	beq.n	800c50a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800c506:	2301      	movs	r3, #1
 800c508:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c50a:	697b      	ldr	r3, [r7, #20]
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3718      	adds	r7, #24
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}
 800c514:	20001cec 	.word	0x20001cec
 800c518:	20001cc8 	.word	0x20001cc8
 800c51c:	20001c7c 	.word	0x20001c7c
 800c520:	20001c80 	.word	0x20001c80
 800c524:	20001cdc 	.word	0x20001cdc
 800c528:	20001ce4 	.word	0x20001ce4
 800c52c:	20001ccc 	.word	0x20001ccc
 800c530:	200017f4 	.word	0x200017f4
 800c534:	200017f0 	.word	0x200017f0
 800c538:	20001cd4 	.word	0x20001cd4
 800c53c:	20001cd8 	.word	0x20001cd8

0800c540 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c540:	b480      	push	{r7}
 800c542:	b085      	sub	sp, #20
 800c544:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c546:	4b29      	ldr	r3, [pc, #164]	@ (800c5ec <vTaskSwitchContext+0xac>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d003      	beq.n	800c556 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c54e:	4b28      	ldr	r3, [pc, #160]	@ (800c5f0 <vTaskSwitchContext+0xb0>)
 800c550:	2201      	movs	r2, #1
 800c552:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c554:	e044      	b.n	800c5e0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800c556:	4b26      	ldr	r3, [pc, #152]	@ (800c5f0 <vTaskSwitchContext+0xb0>)
 800c558:	2200      	movs	r2, #0
 800c55a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c55c:	4b25      	ldr	r3, [pc, #148]	@ (800c5f4 <vTaskSwitchContext+0xb4>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	60fb      	str	r3, [r7, #12]
 800c562:	e013      	b.n	800c58c <vTaskSwitchContext+0x4c>
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d10d      	bne.n	800c586 <vTaskSwitchContext+0x46>
	__asm volatile
 800c56a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c56e:	b672      	cpsid	i
 800c570:	f383 8811 	msr	BASEPRI, r3
 800c574:	f3bf 8f6f 	isb	sy
 800c578:	f3bf 8f4f 	dsb	sy
 800c57c:	b662      	cpsie	i
 800c57e:	607b      	str	r3, [r7, #4]
}
 800c580:	bf00      	nop
 800c582:	bf00      	nop
 800c584:	e7fd      	b.n	800c582 <vTaskSwitchContext+0x42>
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	3b01      	subs	r3, #1
 800c58a:	60fb      	str	r3, [r7, #12]
 800c58c:	491a      	ldr	r1, [pc, #104]	@ (800c5f8 <vTaskSwitchContext+0xb8>)
 800c58e:	68fa      	ldr	r2, [r7, #12]
 800c590:	4613      	mov	r3, r2
 800c592:	009b      	lsls	r3, r3, #2
 800c594:	4413      	add	r3, r2
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	440b      	add	r3, r1
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d0e1      	beq.n	800c564 <vTaskSwitchContext+0x24>
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	4613      	mov	r3, r2
 800c5a4:	009b      	lsls	r3, r3, #2
 800c5a6:	4413      	add	r3, r2
 800c5a8:	009b      	lsls	r3, r3, #2
 800c5aa:	4a13      	ldr	r2, [pc, #76]	@ (800c5f8 <vTaskSwitchContext+0xb8>)
 800c5ac:	4413      	add	r3, r2
 800c5ae:	60bb      	str	r3, [r7, #8]
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	685a      	ldr	r2, [r3, #4]
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	605a      	str	r2, [r3, #4]
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	685a      	ldr	r2, [r3, #4]
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	3308      	adds	r3, #8
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d104      	bne.n	800c5d0 <vTaskSwitchContext+0x90>
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	685a      	ldr	r2, [r3, #4]
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	605a      	str	r2, [r3, #4]
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	68db      	ldr	r3, [r3, #12]
 800c5d6:	4a09      	ldr	r2, [pc, #36]	@ (800c5fc <vTaskSwitchContext+0xbc>)
 800c5d8:	6013      	str	r3, [r2, #0]
 800c5da:	4a06      	ldr	r2, [pc, #24]	@ (800c5f4 <vTaskSwitchContext+0xb4>)
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	6013      	str	r3, [r2, #0]
}
 800c5e0:	bf00      	nop
 800c5e2:	3714      	adds	r7, #20
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr
 800c5ec:	20001cec 	.word	0x20001cec
 800c5f0:	20001cd8 	.word	0x20001cd8
 800c5f4:	20001ccc 	.word	0x20001ccc
 800c5f8:	200017f4 	.word	0x200017f4
 800c5fc:	200017f0 	.word	0x200017f0

0800c600 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b084      	sub	sp, #16
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d10d      	bne.n	800c62c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800c610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c614:	b672      	cpsid	i
 800c616:	f383 8811 	msr	BASEPRI, r3
 800c61a:	f3bf 8f6f 	isb	sy
 800c61e:	f3bf 8f4f 	dsb	sy
 800c622:	b662      	cpsie	i
 800c624:	60fb      	str	r3, [r7, #12]
}
 800c626:	bf00      	nop
 800c628:	bf00      	nop
 800c62a:	e7fd      	b.n	800c628 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c62c:	4b07      	ldr	r3, [pc, #28]	@ (800c64c <vTaskPlaceOnEventList+0x4c>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	3318      	adds	r3, #24
 800c632:	4619      	mov	r1, r3
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f7fe faae 	bl	800ab96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c63a:	2101      	movs	r1, #1
 800c63c:	6838      	ldr	r0, [r7, #0]
 800c63e:	f000 fc9b 	bl	800cf78 <prvAddCurrentTaskToDelayedList>
}
 800c642:	bf00      	nop
 800c644:	3710      	adds	r7, #16
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	200017f0 	.word	0x200017f0

0800c650 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c650:	b580      	push	{r7, lr}
 800c652:	b086      	sub	sp, #24
 800c654:	af00      	add	r7, sp, #0
 800c656:	60f8      	str	r0, [r7, #12]
 800c658:	60b9      	str	r1, [r7, #8]
 800c65a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d10d      	bne.n	800c67e <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800c662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c666:	b672      	cpsid	i
 800c668:	f383 8811 	msr	BASEPRI, r3
 800c66c:	f3bf 8f6f 	isb	sy
 800c670:	f3bf 8f4f 	dsb	sy
 800c674:	b662      	cpsie	i
 800c676:	617b      	str	r3, [r7, #20]
}
 800c678:	bf00      	nop
 800c67a:	bf00      	nop
 800c67c:	e7fd      	b.n	800c67a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c67e:	4b0a      	ldr	r3, [pc, #40]	@ (800c6a8 <vTaskPlaceOnEventListRestricted+0x58>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	3318      	adds	r3, #24
 800c684:	4619      	mov	r1, r3
 800c686:	68f8      	ldr	r0, [r7, #12]
 800c688:	f7fe fa61 	bl	800ab4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d002      	beq.n	800c698 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800c692:	f04f 33ff 	mov.w	r3, #4294967295
 800c696:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c698:	6879      	ldr	r1, [r7, #4]
 800c69a:	68b8      	ldr	r0, [r7, #8]
 800c69c:	f000 fc6c 	bl	800cf78 <prvAddCurrentTaskToDelayedList>
	}
 800c6a0:	bf00      	nop
 800c6a2:	3718      	adds	r7, #24
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	200017f0 	.word	0x200017f0

0800c6ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b086      	sub	sp, #24
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	68db      	ldr	r3, [r3, #12]
 800c6b8:	68db      	ldr	r3, [r3, #12]
 800c6ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d10d      	bne.n	800c6de <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800c6c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6c6:	b672      	cpsid	i
 800c6c8:	f383 8811 	msr	BASEPRI, r3
 800c6cc:	f3bf 8f6f 	isb	sy
 800c6d0:	f3bf 8f4f 	dsb	sy
 800c6d4:	b662      	cpsie	i
 800c6d6:	60fb      	str	r3, [r7, #12]
}
 800c6d8:	bf00      	nop
 800c6da:	bf00      	nop
 800c6dc:	e7fd      	b.n	800c6da <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	3318      	adds	r3, #24
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7fe fa90 	bl	800ac08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6e8:	4b1d      	ldr	r3, [pc, #116]	@ (800c760 <xTaskRemoveFromEventList+0xb4>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d11d      	bne.n	800c72c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	3304      	adds	r3, #4
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7fe fa87 	bl	800ac08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6fe:	4b19      	ldr	r3, [pc, #100]	@ (800c764 <xTaskRemoveFromEventList+0xb8>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	429a      	cmp	r2, r3
 800c704:	d903      	bls.n	800c70e <xTaskRemoveFromEventList+0x62>
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c70a:	4a16      	ldr	r2, [pc, #88]	@ (800c764 <xTaskRemoveFromEventList+0xb8>)
 800c70c:	6013      	str	r3, [r2, #0]
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c712:	4613      	mov	r3, r2
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	4413      	add	r3, r2
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	4a13      	ldr	r2, [pc, #76]	@ (800c768 <xTaskRemoveFromEventList+0xbc>)
 800c71c:	441a      	add	r2, r3
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	3304      	adds	r3, #4
 800c722:	4619      	mov	r1, r3
 800c724:	4610      	mov	r0, r2
 800c726:	f7fe fa12 	bl	800ab4e <vListInsertEnd>
 800c72a:	e005      	b.n	800c738 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	3318      	adds	r3, #24
 800c730:	4619      	mov	r1, r3
 800c732:	480e      	ldr	r0, [pc, #56]	@ (800c76c <xTaskRemoveFromEventList+0xc0>)
 800c734:	f7fe fa0b 	bl	800ab4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c73c:	4b0c      	ldr	r3, [pc, #48]	@ (800c770 <xTaskRemoveFromEventList+0xc4>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c742:	429a      	cmp	r2, r3
 800c744:	d905      	bls.n	800c752 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c746:	2301      	movs	r3, #1
 800c748:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c74a:	4b0a      	ldr	r3, [pc, #40]	@ (800c774 <xTaskRemoveFromEventList+0xc8>)
 800c74c:	2201      	movs	r2, #1
 800c74e:	601a      	str	r2, [r3, #0]
 800c750:	e001      	b.n	800c756 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800c752:	2300      	movs	r3, #0
 800c754:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c756:	697b      	ldr	r3, [r7, #20]
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3718      	adds	r7, #24
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}
 800c760:	20001cec 	.word	0x20001cec
 800c764:	20001ccc 	.word	0x20001ccc
 800c768:	200017f4 	.word	0x200017f4
 800c76c:	20001c84 	.word	0x20001c84
 800c770:	200017f0 	.word	0x200017f0
 800c774:	20001cd8 	.word	0x20001cd8

0800c778 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c778:	b480      	push	{r7}
 800c77a:	b083      	sub	sp, #12
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c780:	4b06      	ldr	r3, [pc, #24]	@ (800c79c <vTaskInternalSetTimeOutState+0x24>)
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c788:	4b05      	ldr	r3, [pc, #20]	@ (800c7a0 <vTaskInternalSetTimeOutState+0x28>)
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	605a      	str	r2, [r3, #4]
}
 800c790:	bf00      	nop
 800c792:	370c      	adds	r7, #12
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr
 800c79c:	20001cdc 	.word	0x20001cdc
 800c7a0:	20001cc8 	.word	0x20001cc8

0800c7a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b088      	sub	sp, #32
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d10d      	bne.n	800c7d0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800c7b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7b8:	b672      	cpsid	i
 800c7ba:	f383 8811 	msr	BASEPRI, r3
 800c7be:	f3bf 8f6f 	isb	sy
 800c7c2:	f3bf 8f4f 	dsb	sy
 800c7c6:	b662      	cpsie	i
 800c7c8:	613b      	str	r3, [r7, #16]
}
 800c7ca:	bf00      	nop
 800c7cc:	bf00      	nop
 800c7ce:	e7fd      	b.n	800c7cc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d10d      	bne.n	800c7f2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800c7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7da:	b672      	cpsid	i
 800c7dc:	f383 8811 	msr	BASEPRI, r3
 800c7e0:	f3bf 8f6f 	isb	sy
 800c7e4:	f3bf 8f4f 	dsb	sy
 800c7e8:	b662      	cpsie	i
 800c7ea:	60fb      	str	r3, [r7, #12]
}
 800c7ec:	bf00      	nop
 800c7ee:	bf00      	nop
 800c7f0:	e7fd      	b.n	800c7ee <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800c7f2:	f001 f88b 	bl	800d90c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c7f6:	4b1d      	ldr	r3, [pc, #116]	@ (800c86c <xTaskCheckForTimeOut+0xc8>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	69ba      	ldr	r2, [r7, #24]
 800c802:	1ad3      	subs	r3, r2, r3
 800c804:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c80e:	d102      	bne.n	800c816 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c810:	2300      	movs	r3, #0
 800c812:	61fb      	str	r3, [r7, #28]
 800c814:	e023      	b.n	800c85e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681a      	ldr	r2, [r3, #0]
 800c81a:	4b15      	ldr	r3, [pc, #84]	@ (800c870 <xTaskCheckForTimeOut+0xcc>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	429a      	cmp	r2, r3
 800c820:	d007      	beq.n	800c832 <xTaskCheckForTimeOut+0x8e>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	69ba      	ldr	r2, [r7, #24]
 800c828:	429a      	cmp	r2, r3
 800c82a:	d302      	bcc.n	800c832 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c82c:	2301      	movs	r3, #1
 800c82e:	61fb      	str	r3, [r7, #28]
 800c830:	e015      	b.n	800c85e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	697a      	ldr	r2, [r7, #20]
 800c838:	429a      	cmp	r2, r3
 800c83a:	d20b      	bcs.n	800c854 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	1ad2      	subs	r2, r2, r3
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f7ff ff95 	bl	800c778 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c84e:	2300      	movs	r3, #0
 800c850:	61fb      	str	r3, [r7, #28]
 800c852:	e004      	b.n	800c85e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	2200      	movs	r2, #0
 800c858:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c85a:	2301      	movs	r3, #1
 800c85c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c85e:	f001 f88b 	bl	800d978 <vPortExitCritical>

	return xReturn;
 800c862:	69fb      	ldr	r3, [r7, #28]
}
 800c864:	4618      	mov	r0, r3
 800c866:	3720      	adds	r7, #32
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	20001cc8 	.word	0x20001cc8
 800c870:	20001cdc 	.word	0x20001cdc

0800c874 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c874:	b480      	push	{r7}
 800c876:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c878:	4b03      	ldr	r3, [pc, #12]	@ (800c888 <vTaskMissedYield+0x14>)
 800c87a:	2201      	movs	r2, #1
 800c87c:	601a      	str	r2, [r3, #0]
}
 800c87e:	bf00      	nop
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr
 800c888:	20001cd8 	.word	0x20001cd8

0800c88c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c894:	f000 f852 	bl	800c93c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c898:	4b06      	ldr	r3, [pc, #24]	@ (800c8b4 <prvIdleTask+0x28>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d9f9      	bls.n	800c894 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c8a0:	4b05      	ldr	r3, [pc, #20]	@ (800c8b8 <prvIdleTask+0x2c>)
 800c8a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8a6:	601a      	str	r2, [r3, #0]
 800c8a8:	f3bf 8f4f 	dsb	sy
 800c8ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c8b0:	e7f0      	b.n	800c894 <prvIdleTask+0x8>
 800c8b2:	bf00      	nop
 800c8b4:	200017f4 	.word	0x200017f4
 800c8b8:	e000ed04 	.word	0xe000ed04

0800c8bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	607b      	str	r3, [r7, #4]
 800c8c6:	e00c      	b.n	800c8e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c8c8:	687a      	ldr	r2, [r7, #4]
 800c8ca:	4613      	mov	r3, r2
 800c8cc:	009b      	lsls	r3, r3, #2
 800c8ce:	4413      	add	r3, r2
 800c8d0:	009b      	lsls	r3, r3, #2
 800c8d2:	4a12      	ldr	r2, [pc, #72]	@ (800c91c <prvInitialiseTaskLists+0x60>)
 800c8d4:	4413      	add	r3, r2
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7fe f90c 	bl	800aaf4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	3301      	adds	r3, #1
 800c8e0:	607b      	str	r3, [r7, #4]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2b37      	cmp	r3, #55	@ 0x37
 800c8e6:	d9ef      	bls.n	800c8c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c8e8:	480d      	ldr	r0, [pc, #52]	@ (800c920 <prvInitialiseTaskLists+0x64>)
 800c8ea:	f7fe f903 	bl	800aaf4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c8ee:	480d      	ldr	r0, [pc, #52]	@ (800c924 <prvInitialiseTaskLists+0x68>)
 800c8f0:	f7fe f900 	bl	800aaf4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c8f4:	480c      	ldr	r0, [pc, #48]	@ (800c928 <prvInitialiseTaskLists+0x6c>)
 800c8f6:	f7fe f8fd 	bl	800aaf4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c8fa:	480c      	ldr	r0, [pc, #48]	@ (800c92c <prvInitialiseTaskLists+0x70>)
 800c8fc:	f7fe f8fa 	bl	800aaf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c900:	480b      	ldr	r0, [pc, #44]	@ (800c930 <prvInitialiseTaskLists+0x74>)
 800c902:	f7fe f8f7 	bl	800aaf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c906:	4b0b      	ldr	r3, [pc, #44]	@ (800c934 <prvInitialiseTaskLists+0x78>)
 800c908:	4a05      	ldr	r2, [pc, #20]	@ (800c920 <prvInitialiseTaskLists+0x64>)
 800c90a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c90c:	4b0a      	ldr	r3, [pc, #40]	@ (800c938 <prvInitialiseTaskLists+0x7c>)
 800c90e:	4a05      	ldr	r2, [pc, #20]	@ (800c924 <prvInitialiseTaskLists+0x68>)
 800c910:	601a      	str	r2, [r3, #0]
}
 800c912:	bf00      	nop
 800c914:	3708      	adds	r7, #8
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	bf00      	nop
 800c91c:	200017f4 	.word	0x200017f4
 800c920:	20001c54 	.word	0x20001c54
 800c924:	20001c68 	.word	0x20001c68
 800c928:	20001c84 	.word	0x20001c84
 800c92c:	20001c98 	.word	0x20001c98
 800c930:	20001cb0 	.word	0x20001cb0
 800c934:	20001c7c 	.word	0x20001c7c
 800c938:	20001c80 	.word	0x20001c80

0800c93c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c942:	e019      	b.n	800c978 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c944:	f000 ffe2 	bl	800d90c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c948:	4b10      	ldr	r3, [pc, #64]	@ (800c98c <prvCheckTasksWaitingTermination+0x50>)
 800c94a:	68db      	ldr	r3, [r3, #12]
 800c94c:	68db      	ldr	r3, [r3, #12]
 800c94e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	3304      	adds	r3, #4
 800c954:	4618      	mov	r0, r3
 800c956:	f7fe f957 	bl	800ac08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c95a:	4b0d      	ldr	r3, [pc, #52]	@ (800c990 <prvCheckTasksWaitingTermination+0x54>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	3b01      	subs	r3, #1
 800c960:	4a0b      	ldr	r2, [pc, #44]	@ (800c990 <prvCheckTasksWaitingTermination+0x54>)
 800c962:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c964:	4b0b      	ldr	r3, [pc, #44]	@ (800c994 <prvCheckTasksWaitingTermination+0x58>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	3b01      	subs	r3, #1
 800c96a:	4a0a      	ldr	r2, [pc, #40]	@ (800c994 <prvCheckTasksWaitingTermination+0x58>)
 800c96c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c96e:	f001 f803 	bl	800d978 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f000 f810 	bl	800c998 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c978:	4b06      	ldr	r3, [pc, #24]	@ (800c994 <prvCheckTasksWaitingTermination+0x58>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d1e1      	bne.n	800c944 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c980:	bf00      	nop
 800c982:	bf00      	nop
 800c984:	3708      	adds	r7, #8
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
 800c98a:	bf00      	nop
 800c98c:	20001c98 	.word	0x20001c98
 800c990:	20001cc4 	.word	0x20001cc4
 800c994:	20001cac 	.word	0x20001cac

0800c998 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b084      	sub	sp, #16
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d108      	bne.n	800c9bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f001 f9a8 	bl	800dd04 <vPortFree>
				vPortFree( pxTCB );
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f001 f9a5 	bl	800dd04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c9ba:	e01b      	b.n	800c9f4 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c9c2:	2b01      	cmp	r3, #1
 800c9c4:	d103      	bne.n	800c9ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f001 f99c 	bl	800dd04 <vPortFree>
	}
 800c9cc:	e012      	b.n	800c9f4 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c9d4:	2b02      	cmp	r3, #2
 800c9d6:	d00d      	beq.n	800c9f4 <prvDeleteTCB+0x5c>
	__asm volatile
 800c9d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9dc:	b672      	cpsid	i
 800c9de:	f383 8811 	msr	BASEPRI, r3
 800c9e2:	f3bf 8f6f 	isb	sy
 800c9e6:	f3bf 8f4f 	dsb	sy
 800c9ea:	b662      	cpsie	i
 800c9ec:	60fb      	str	r3, [r7, #12]
}
 800c9ee:	bf00      	nop
 800c9f0:	bf00      	nop
 800c9f2:	e7fd      	b.n	800c9f0 <prvDeleteTCB+0x58>
	}
 800c9f4:	bf00      	nop
 800c9f6:	3710      	adds	r7, #16
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b083      	sub	sp, #12
 800ca00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca02:	4b0c      	ldr	r3, [pc, #48]	@ (800ca34 <prvResetNextTaskUnblockTime+0x38>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d104      	bne.n	800ca16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ca0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ca38 <prvResetNextTaskUnblockTime+0x3c>)
 800ca0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ca12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ca14:	e008      	b.n	800ca28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca16:	4b07      	ldr	r3, [pc, #28]	@ (800ca34 <prvResetNextTaskUnblockTime+0x38>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	68db      	ldr	r3, [r3, #12]
 800ca1c:	68db      	ldr	r3, [r3, #12]
 800ca1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	4a04      	ldr	r2, [pc, #16]	@ (800ca38 <prvResetNextTaskUnblockTime+0x3c>)
 800ca26:	6013      	str	r3, [r2, #0]
}
 800ca28:	bf00      	nop
 800ca2a:	370c      	adds	r7, #12
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr
 800ca34:	20001c7c 	.word	0x20001c7c
 800ca38:	20001ce4 	.word	0x20001ce4

0800ca3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b083      	sub	sp, #12
 800ca40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ca42:	4b0b      	ldr	r3, [pc, #44]	@ (800ca70 <xTaskGetSchedulerState+0x34>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d102      	bne.n	800ca50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	607b      	str	r3, [r7, #4]
 800ca4e:	e008      	b.n	800ca62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca50:	4b08      	ldr	r3, [pc, #32]	@ (800ca74 <xTaskGetSchedulerState+0x38>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d102      	bne.n	800ca5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ca58:	2302      	movs	r3, #2
 800ca5a:	607b      	str	r3, [r7, #4]
 800ca5c:	e001      	b.n	800ca62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ca62:	687b      	ldr	r3, [r7, #4]
	}
 800ca64:	4618      	mov	r0, r3
 800ca66:	370c      	adds	r7, #12
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr
 800ca70:	20001cd0 	.word	0x20001cd0
 800ca74:	20001cec 	.word	0x20001cec

0800ca78 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b084      	sub	sp, #16
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ca84:	2300      	movs	r3, #0
 800ca86:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d051      	beq.n	800cb32 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca92:	4b2a      	ldr	r3, [pc, #168]	@ (800cb3c <xTaskPriorityInherit+0xc4>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d241      	bcs.n	800cb20 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	699b      	ldr	r3, [r3, #24]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	db06      	blt.n	800cab2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800caa4:	4b25      	ldr	r3, [pc, #148]	@ (800cb3c <xTaskPriorityInherit+0xc4>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800caaa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	6959      	ldr	r1, [r3, #20]
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800caba:	4613      	mov	r3, r2
 800cabc:	009b      	lsls	r3, r3, #2
 800cabe:	4413      	add	r3, r2
 800cac0:	009b      	lsls	r3, r3, #2
 800cac2:	4a1f      	ldr	r2, [pc, #124]	@ (800cb40 <xTaskPriorityInherit+0xc8>)
 800cac4:	4413      	add	r3, r2
 800cac6:	4299      	cmp	r1, r3
 800cac8:	d122      	bne.n	800cb10 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	3304      	adds	r3, #4
 800cace:	4618      	mov	r0, r3
 800cad0:	f7fe f89a 	bl	800ac08 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cad4:	4b19      	ldr	r3, [pc, #100]	@ (800cb3c <xTaskPriorityInherit+0xc4>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cae2:	4b18      	ldr	r3, [pc, #96]	@ (800cb44 <xTaskPriorityInherit+0xcc>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	429a      	cmp	r2, r3
 800cae8:	d903      	bls.n	800caf2 <xTaskPriorityInherit+0x7a>
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800caee:	4a15      	ldr	r2, [pc, #84]	@ (800cb44 <xTaskPriorityInherit+0xcc>)
 800caf0:	6013      	str	r3, [r2, #0]
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800caf6:	4613      	mov	r3, r2
 800caf8:	009b      	lsls	r3, r3, #2
 800cafa:	4413      	add	r3, r2
 800cafc:	009b      	lsls	r3, r3, #2
 800cafe:	4a10      	ldr	r2, [pc, #64]	@ (800cb40 <xTaskPriorityInherit+0xc8>)
 800cb00:	441a      	add	r2, r3
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	3304      	adds	r3, #4
 800cb06:	4619      	mov	r1, r3
 800cb08:	4610      	mov	r0, r2
 800cb0a:	f7fe f820 	bl	800ab4e <vListInsertEnd>
 800cb0e:	e004      	b.n	800cb1a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cb10:	4b0a      	ldr	r3, [pc, #40]	@ (800cb3c <xTaskPriorityInherit+0xc4>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	60fb      	str	r3, [r7, #12]
 800cb1e:	e008      	b.n	800cb32 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cb24:	4b05      	ldr	r3, [pc, #20]	@ (800cb3c <xTaskPriorityInherit+0xc4>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d201      	bcs.n	800cb32 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cb32:	68fb      	ldr	r3, [r7, #12]
	}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3710      	adds	r7, #16
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}
 800cb3c:	200017f0 	.word	0x200017f0
 800cb40:	200017f4 	.word	0x200017f4
 800cb44:	20001ccc 	.word	0x20001ccc

0800cb48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b086      	sub	sp, #24
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cb54:	2300      	movs	r3, #0
 800cb56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d05c      	beq.n	800cc18 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cb5e:	4b31      	ldr	r3, [pc, #196]	@ (800cc24 <xTaskPriorityDisinherit+0xdc>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	693a      	ldr	r2, [r7, #16]
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d00d      	beq.n	800cb84 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800cb68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb6c:	b672      	cpsid	i
 800cb6e:	f383 8811 	msr	BASEPRI, r3
 800cb72:	f3bf 8f6f 	isb	sy
 800cb76:	f3bf 8f4f 	dsb	sy
 800cb7a:	b662      	cpsie	i
 800cb7c:	60fb      	str	r3, [r7, #12]
}
 800cb7e:	bf00      	nop
 800cb80:	bf00      	nop
 800cb82:	e7fd      	b.n	800cb80 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d10d      	bne.n	800cba8 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800cb8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb90:	b672      	cpsid	i
 800cb92:	f383 8811 	msr	BASEPRI, r3
 800cb96:	f3bf 8f6f 	isb	sy
 800cb9a:	f3bf 8f4f 	dsb	sy
 800cb9e:	b662      	cpsie	i
 800cba0:	60bb      	str	r3, [r7, #8]
}
 800cba2:	bf00      	nop
 800cba4:	bf00      	nop
 800cba6:	e7fd      	b.n	800cba4 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cbac:	1e5a      	subs	r2, r3, #1
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d02c      	beq.n	800cc18 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d128      	bne.n	800cc18 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	3304      	adds	r3, #4
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7fe f81c 	bl	800ac08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbdc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbe8:	4b0f      	ldr	r3, [pc, #60]	@ (800cc28 <xTaskPriorityDisinherit+0xe0>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d903      	bls.n	800cbf8 <xTaskPriorityDisinherit+0xb0>
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbf4:	4a0c      	ldr	r2, [pc, #48]	@ (800cc28 <xTaskPriorityDisinherit+0xe0>)
 800cbf6:	6013      	str	r3, [r2, #0]
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbfc:	4613      	mov	r3, r2
 800cbfe:	009b      	lsls	r3, r3, #2
 800cc00:	4413      	add	r3, r2
 800cc02:	009b      	lsls	r3, r3, #2
 800cc04:	4a09      	ldr	r2, [pc, #36]	@ (800cc2c <xTaskPriorityDisinherit+0xe4>)
 800cc06:	441a      	add	r2, r3
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	3304      	adds	r3, #4
 800cc0c:	4619      	mov	r1, r3
 800cc0e:	4610      	mov	r0, r2
 800cc10:	f7fd ff9d 	bl	800ab4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cc14:	2301      	movs	r3, #1
 800cc16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cc18:	697b      	ldr	r3, [r7, #20]
	}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3718      	adds	r7, #24
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	200017f0 	.word	0x200017f0
 800cc28:	20001ccc 	.word	0x20001ccc
 800cc2c:	200017f4 	.word	0x200017f4

0800cc30 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b088      	sub	sp, #32
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cc3e:	2301      	movs	r3, #1
 800cc40:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d070      	beq.n	800cd2a <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cc48:	69bb      	ldr	r3, [r7, #24]
 800cc4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d10d      	bne.n	800cc6c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800cc50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc54:	b672      	cpsid	i
 800cc56:	f383 8811 	msr	BASEPRI, r3
 800cc5a:	f3bf 8f6f 	isb	sy
 800cc5e:	f3bf 8f4f 	dsb	sy
 800cc62:	b662      	cpsie	i
 800cc64:	60fb      	str	r3, [r7, #12]
}
 800cc66:	bf00      	nop
 800cc68:	bf00      	nop
 800cc6a:	e7fd      	b.n	800cc68 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cc6c:	69bb      	ldr	r3, [r7, #24]
 800cc6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc70:	683a      	ldr	r2, [r7, #0]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d902      	bls.n	800cc7c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	61fb      	str	r3, [r7, #28]
 800cc7a:	e002      	b.n	800cc82 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cc7c:	69bb      	ldr	r3, [r7, #24]
 800cc7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc80:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cc82:	69bb      	ldr	r3, [r7, #24]
 800cc84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc86:	69fa      	ldr	r2, [r7, #28]
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d04e      	beq.n	800cd2a <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cc8c:	69bb      	ldr	r3, [r7, #24]
 800cc8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc90:	697a      	ldr	r2, [r7, #20]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d149      	bne.n	800cd2a <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cc96:	4b27      	ldr	r3, [pc, #156]	@ (800cd34 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	69ba      	ldr	r2, [r7, #24]
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d10d      	bne.n	800ccbc <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 800cca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cca4:	b672      	cpsid	i
 800cca6:	f383 8811 	msr	BASEPRI, r3
 800ccaa:	f3bf 8f6f 	isb	sy
 800ccae:	f3bf 8f4f 	dsb	sy
 800ccb2:	b662      	cpsie	i
 800ccb4:	60bb      	str	r3, [r7, #8]
}
 800ccb6:	bf00      	nop
 800ccb8:	bf00      	nop
 800ccba:	e7fd      	b.n	800ccb8 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ccbc:	69bb      	ldr	r3, [r7, #24]
 800ccbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccc0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ccc2:	69bb      	ldr	r3, [r7, #24]
 800ccc4:	69fa      	ldr	r2, [r7, #28]
 800ccc6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ccc8:	69bb      	ldr	r3, [r7, #24]
 800ccca:	699b      	ldr	r3, [r3, #24]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	db04      	blt.n	800ccda <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccd0:	69fb      	ldr	r3, [r7, #28]
 800ccd2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ccd6:	69bb      	ldr	r3, [r7, #24]
 800ccd8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ccda:	69bb      	ldr	r3, [r7, #24]
 800ccdc:	6959      	ldr	r1, [r3, #20]
 800ccde:	693a      	ldr	r2, [r7, #16]
 800cce0:	4613      	mov	r3, r2
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	4413      	add	r3, r2
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	4a13      	ldr	r2, [pc, #76]	@ (800cd38 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800ccea:	4413      	add	r3, r2
 800ccec:	4299      	cmp	r1, r3
 800ccee:	d11c      	bne.n	800cd2a <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ccf0:	69bb      	ldr	r3, [r7, #24]
 800ccf2:	3304      	adds	r3, #4
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7fd ff87 	bl	800ac08 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ccfa:	69bb      	ldr	r3, [r7, #24]
 800ccfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccfe:	4b0f      	ldr	r3, [pc, #60]	@ (800cd3c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d903      	bls.n	800cd0e <vTaskPriorityDisinheritAfterTimeout+0xde>
 800cd06:	69bb      	ldr	r3, [r7, #24]
 800cd08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd0a:	4a0c      	ldr	r2, [pc, #48]	@ (800cd3c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800cd0c:	6013      	str	r3, [r2, #0]
 800cd0e:	69bb      	ldr	r3, [r7, #24]
 800cd10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd12:	4613      	mov	r3, r2
 800cd14:	009b      	lsls	r3, r3, #2
 800cd16:	4413      	add	r3, r2
 800cd18:	009b      	lsls	r3, r3, #2
 800cd1a:	4a07      	ldr	r2, [pc, #28]	@ (800cd38 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800cd1c:	441a      	add	r2, r3
 800cd1e:	69bb      	ldr	r3, [r7, #24]
 800cd20:	3304      	adds	r3, #4
 800cd22:	4619      	mov	r1, r3
 800cd24:	4610      	mov	r0, r2
 800cd26:	f7fd ff12 	bl	800ab4e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd2a:	bf00      	nop
 800cd2c:	3720      	adds	r7, #32
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
 800cd32:	bf00      	nop
 800cd34:	200017f0 	.word	0x200017f0
 800cd38:	200017f4 	.word	0x200017f4
 800cd3c:	20001ccc 	.word	0x20001ccc

0800cd40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cd40:	b480      	push	{r7}
 800cd42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cd44:	4b07      	ldr	r3, [pc, #28]	@ (800cd64 <pvTaskIncrementMutexHeldCount+0x24>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d004      	beq.n	800cd56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cd4c:	4b05      	ldr	r3, [pc, #20]	@ (800cd64 <pvTaskIncrementMutexHeldCount+0x24>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cd52:	3201      	adds	r2, #1
 800cd54:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800cd56:	4b03      	ldr	r3, [pc, #12]	@ (800cd64 <pvTaskIncrementMutexHeldCount+0x24>)
 800cd58:	681b      	ldr	r3, [r3, #0]
	}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd62:	4770      	bx	lr
 800cd64:	200017f0 	.word	0x200017f0

0800cd68 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b084      	sub	sp, #16
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800cd72:	f000 fdcb 	bl	800d90c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800cd76:	4b1e      	ldr	r3, [pc, #120]	@ (800cdf0 <ulTaskNotifyTake+0x88>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d113      	bne.n	800cda8 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800cd80:	4b1b      	ldr	r3, [pc, #108]	@ (800cdf0 <ulTaskNotifyTake+0x88>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	2201      	movs	r2, #1
 800cd86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d00b      	beq.n	800cda8 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd90:	2101      	movs	r1, #1
 800cd92:	6838      	ldr	r0, [r7, #0]
 800cd94:	f000 f8f0 	bl	800cf78 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800cd98:	4b16      	ldr	r3, [pc, #88]	@ (800cdf4 <ulTaskNotifyTake+0x8c>)
 800cd9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd9e:	601a      	str	r2, [r3, #0]
 800cda0:	f3bf 8f4f 	dsb	sy
 800cda4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cda8:	f000 fde6 	bl	800d978 <vPortExitCritical>

		taskENTER_CRITICAL();
 800cdac:	f000 fdae 	bl	800d90c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800cdb0:	4b0f      	ldr	r3, [pc, #60]	@ (800cdf0 <ulTaskNotifyTake+0x88>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdb6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d00c      	beq.n	800cdd8 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d004      	beq.n	800cdce <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800cdc4:	4b0a      	ldr	r3, [pc, #40]	@ (800cdf0 <ulTaskNotifyTake+0x88>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	655a      	str	r2, [r3, #84]	@ 0x54
 800cdcc:	e004      	b.n	800cdd8 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800cdce:	4b08      	ldr	r3, [pc, #32]	@ (800cdf0 <ulTaskNotifyTake+0x88>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	68fa      	ldr	r2, [r7, #12]
 800cdd4:	3a01      	subs	r2, #1
 800cdd6:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cdd8:	4b05      	ldr	r3, [pc, #20]	@ (800cdf0 <ulTaskNotifyTake+0x88>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	2200      	movs	r2, #0
 800cdde:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 800cde2:	f000 fdc9 	bl	800d978 <vPortExitCritical>

		return ulReturn;
 800cde6:	68fb      	ldr	r3, [r7, #12]
	}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3710      	adds	r7, #16
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	200017f0 	.word	0x200017f0
 800cdf4:	e000ed04 	.word	0xe000ed04

0800cdf8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b08a      	sub	sp, #40	@ 0x28
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	60f8      	str	r0, [r7, #12]
 800ce00:	60b9      	str	r1, [r7, #8]
 800ce02:	603b      	str	r3, [r7, #0]
 800ce04:	4613      	mov	r3, r2
 800ce06:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800ce08:	2301      	movs	r3, #1
 800ce0a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d10d      	bne.n	800ce2e <xTaskGenericNotify+0x36>
	__asm volatile
 800ce12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce16:	b672      	cpsid	i
 800ce18:	f383 8811 	msr	BASEPRI, r3
 800ce1c:	f3bf 8f6f 	isb	sy
 800ce20:	f3bf 8f4f 	dsb	sy
 800ce24:	b662      	cpsie	i
 800ce26:	61bb      	str	r3, [r7, #24]
}
 800ce28:	bf00      	nop
 800ce2a:	bf00      	nop
 800ce2c:	e7fd      	b.n	800ce2a <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800ce32:	f000 fd6b 	bl	800d90c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d003      	beq.n	800ce44 <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ce3c:	6a3b      	ldr	r3, [r7, #32]
 800ce3e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ce44:	6a3b      	ldr	r3, [r7, #32]
 800ce46:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800ce4a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ce4c:	6a3b      	ldr	r3, [r7, #32]
 800ce4e:	2202      	movs	r2, #2
 800ce50:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 800ce54:	79fb      	ldrb	r3, [r7, #7]
 800ce56:	2b04      	cmp	r3, #4
 800ce58:	d827      	bhi.n	800ceaa <xTaskGenericNotify+0xb2>
 800ce5a:	a201      	add	r2, pc, #4	@ (adr r2, 800ce60 <xTaskGenericNotify+0x68>)
 800ce5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce60:	0800ced1 	.word	0x0800ced1
 800ce64:	0800ce75 	.word	0x0800ce75
 800ce68:	0800ce83 	.word	0x0800ce83
 800ce6c:	0800ce8f 	.word	0x0800ce8f
 800ce70:	0800ce97 	.word	0x0800ce97
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ce74:	6a3b      	ldr	r3, [r7, #32]
 800ce76:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	431a      	orrs	r2, r3
 800ce7c:	6a3b      	ldr	r3, [r7, #32]
 800ce7e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800ce80:	e029      	b.n	800ced6 <xTaskGenericNotify+0xde>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ce82:	6a3b      	ldr	r3, [r7, #32]
 800ce84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce86:	1c5a      	adds	r2, r3, #1
 800ce88:	6a3b      	ldr	r3, [r7, #32]
 800ce8a:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800ce8c:	e023      	b.n	800ced6 <xTaskGenericNotify+0xde>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ce8e:	6a3b      	ldr	r3, [r7, #32]
 800ce90:	68ba      	ldr	r2, [r7, #8]
 800ce92:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800ce94:	e01f      	b.n	800ced6 <xTaskGenericNotify+0xde>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ce96:	7ffb      	ldrb	r3, [r7, #31]
 800ce98:	2b02      	cmp	r3, #2
 800ce9a:	d003      	beq.n	800cea4 <xTaskGenericNotify+0xac>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ce9c:	6a3b      	ldr	r3, [r7, #32]
 800ce9e:	68ba      	ldr	r2, [r7, #8]
 800cea0:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800cea2:	e018      	b.n	800ced6 <xTaskGenericNotify+0xde>
						xReturn = pdFAIL;
 800cea4:	2300      	movs	r3, #0
 800cea6:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800cea8:	e015      	b.n	800ced6 <xTaskGenericNotify+0xde>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ceaa:	6a3b      	ldr	r3, [r7, #32]
 800ceac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ceae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceb2:	d00f      	beq.n	800ced4 <xTaskGenericNotify+0xdc>
	__asm volatile
 800ceb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceb8:	b672      	cpsid	i
 800ceba:	f383 8811 	msr	BASEPRI, r3
 800cebe:	f3bf 8f6f 	isb	sy
 800cec2:	f3bf 8f4f 	dsb	sy
 800cec6:	b662      	cpsie	i
 800cec8:	617b      	str	r3, [r7, #20]
}
 800ceca:	bf00      	nop
 800cecc:	bf00      	nop
 800cece:	e7fd      	b.n	800cecc <xTaskGenericNotify+0xd4>
					break;
 800ced0:	bf00      	nop
 800ced2:	e000      	b.n	800ced6 <xTaskGenericNotify+0xde>

					break;
 800ced4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ced6:	7ffb      	ldrb	r3, [r7, #31]
 800ced8:	2b01      	cmp	r3, #1
 800ceda:	d13d      	bne.n	800cf58 <xTaskGenericNotify+0x160>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cedc:	6a3b      	ldr	r3, [r7, #32]
 800cede:	3304      	adds	r3, #4
 800cee0:	4618      	mov	r0, r3
 800cee2:	f7fd fe91 	bl	800ac08 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800cee6:	6a3b      	ldr	r3, [r7, #32]
 800cee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ceea:	4b1f      	ldr	r3, [pc, #124]	@ (800cf68 <xTaskGenericNotify+0x170>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d903      	bls.n	800cefa <xTaskGenericNotify+0x102>
 800cef2:	6a3b      	ldr	r3, [r7, #32]
 800cef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cef6:	4a1c      	ldr	r2, [pc, #112]	@ (800cf68 <xTaskGenericNotify+0x170>)
 800cef8:	6013      	str	r3, [r2, #0]
 800cefa:	6a3b      	ldr	r3, [r7, #32]
 800cefc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cefe:	4613      	mov	r3, r2
 800cf00:	009b      	lsls	r3, r3, #2
 800cf02:	4413      	add	r3, r2
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	4a19      	ldr	r2, [pc, #100]	@ (800cf6c <xTaskGenericNotify+0x174>)
 800cf08:	441a      	add	r2, r3
 800cf0a:	6a3b      	ldr	r3, [r7, #32]
 800cf0c:	3304      	adds	r3, #4
 800cf0e:	4619      	mov	r1, r3
 800cf10:	4610      	mov	r0, r2
 800cf12:	f7fd fe1c 	bl	800ab4e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cf16:	6a3b      	ldr	r3, [r7, #32]
 800cf18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d00d      	beq.n	800cf3a <xTaskGenericNotify+0x142>
	__asm volatile
 800cf1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf22:	b672      	cpsid	i
 800cf24:	f383 8811 	msr	BASEPRI, r3
 800cf28:	f3bf 8f6f 	isb	sy
 800cf2c:	f3bf 8f4f 	dsb	sy
 800cf30:	b662      	cpsie	i
 800cf32:	613b      	str	r3, [r7, #16]
}
 800cf34:	bf00      	nop
 800cf36:	bf00      	nop
 800cf38:	e7fd      	b.n	800cf36 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cf3a:	6a3b      	ldr	r3, [r7, #32]
 800cf3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf3e:	4b0c      	ldr	r3, [pc, #48]	@ (800cf70 <xTaskGenericNotify+0x178>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d907      	bls.n	800cf58 <xTaskGenericNotify+0x160>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800cf48:	4b0a      	ldr	r3, [pc, #40]	@ (800cf74 <xTaskGenericNotify+0x17c>)
 800cf4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf4e:	601a      	str	r2, [r3, #0]
 800cf50:	f3bf 8f4f 	dsb	sy
 800cf54:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cf58:	f000 fd0e 	bl	800d978 <vPortExitCritical>

		return xReturn;
 800cf5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3728      	adds	r7, #40	@ 0x28
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	20001ccc 	.word	0x20001ccc
 800cf6c:	200017f4 	.word	0x200017f4
 800cf70:	200017f0 	.word	0x200017f0
 800cf74:	e000ed04 	.word	0xe000ed04

0800cf78 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b084      	sub	sp, #16
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cf82:	4b21      	ldr	r3, [pc, #132]	@ (800d008 <prvAddCurrentTaskToDelayedList+0x90>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf88:	4b20      	ldr	r3, [pc, #128]	@ (800d00c <prvAddCurrentTaskToDelayedList+0x94>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	3304      	adds	r3, #4
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7fd fe3a 	bl	800ac08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf9a:	d10a      	bne.n	800cfb2 <prvAddCurrentTaskToDelayedList+0x3a>
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d007      	beq.n	800cfb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cfa2:	4b1a      	ldr	r3, [pc, #104]	@ (800d00c <prvAddCurrentTaskToDelayedList+0x94>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	3304      	adds	r3, #4
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	4819      	ldr	r0, [pc, #100]	@ (800d010 <prvAddCurrentTaskToDelayedList+0x98>)
 800cfac:	f7fd fdcf 	bl	800ab4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cfb0:	e026      	b.n	800d000 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cfb2:	68fa      	ldr	r2, [r7, #12]
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	4413      	add	r3, r2
 800cfb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cfba:	4b14      	ldr	r3, [pc, #80]	@ (800d00c <prvAddCurrentTaskToDelayedList+0x94>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	68ba      	ldr	r2, [r7, #8]
 800cfc0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cfc2:	68ba      	ldr	r2, [r7, #8]
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d209      	bcs.n	800cfde <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cfca:	4b12      	ldr	r3, [pc, #72]	@ (800d014 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	4b0f      	ldr	r3, [pc, #60]	@ (800d00c <prvAddCurrentTaskToDelayedList+0x94>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	3304      	adds	r3, #4
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	4610      	mov	r0, r2
 800cfd8:	f7fd fddd 	bl	800ab96 <vListInsert>
}
 800cfdc:	e010      	b.n	800d000 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cfde:	4b0e      	ldr	r3, [pc, #56]	@ (800d018 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cfe0:	681a      	ldr	r2, [r3, #0]
 800cfe2:	4b0a      	ldr	r3, [pc, #40]	@ (800d00c <prvAddCurrentTaskToDelayedList+0x94>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	3304      	adds	r3, #4
 800cfe8:	4619      	mov	r1, r3
 800cfea:	4610      	mov	r0, r2
 800cfec:	f7fd fdd3 	bl	800ab96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cff0:	4b0a      	ldr	r3, [pc, #40]	@ (800d01c <prvAddCurrentTaskToDelayedList+0xa4>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	68ba      	ldr	r2, [r7, #8]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d202      	bcs.n	800d000 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cffa:	4a08      	ldr	r2, [pc, #32]	@ (800d01c <prvAddCurrentTaskToDelayedList+0xa4>)
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	6013      	str	r3, [r2, #0]
}
 800d000:	bf00      	nop
 800d002:	3710      	adds	r7, #16
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}
 800d008:	20001cc8 	.word	0x20001cc8
 800d00c:	200017f0 	.word	0x200017f0
 800d010:	20001cb0 	.word	0x20001cb0
 800d014:	20001c80 	.word	0x20001c80
 800d018:	20001c7c 	.word	0x20001c7c
 800d01c:	20001ce4 	.word	0x20001ce4

0800d020 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b08a      	sub	sp, #40	@ 0x28
 800d024:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d026:	2300      	movs	r3, #0
 800d028:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d02a:	f000 fb21 	bl	800d670 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d02e:	4b1e      	ldr	r3, [pc, #120]	@ (800d0a8 <xTimerCreateTimerTask+0x88>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d021      	beq.n	800d07a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d036:	2300      	movs	r3, #0
 800d038:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d03a:	2300      	movs	r3, #0
 800d03c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d03e:	1d3a      	adds	r2, r7, #4
 800d040:	f107 0108 	add.w	r1, r7, #8
 800d044:	f107 030c 	add.w	r3, r7, #12
 800d048:	4618      	mov	r0, r3
 800d04a:	f7fd fd39 	bl	800aac0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d04e:	6879      	ldr	r1, [r7, #4]
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	68fa      	ldr	r2, [r7, #12]
 800d054:	9202      	str	r2, [sp, #8]
 800d056:	9301      	str	r3, [sp, #4]
 800d058:	2302      	movs	r3, #2
 800d05a:	9300      	str	r3, [sp, #0]
 800d05c:	2300      	movs	r3, #0
 800d05e:	460a      	mov	r2, r1
 800d060:	4912      	ldr	r1, [pc, #72]	@ (800d0ac <xTimerCreateTimerTask+0x8c>)
 800d062:	4813      	ldr	r0, [pc, #76]	@ (800d0b0 <xTimerCreateTimerTask+0x90>)
 800d064:	f7fe fea0 	bl	800bda8 <xTaskCreateStatic>
 800d068:	4603      	mov	r3, r0
 800d06a:	4a12      	ldr	r2, [pc, #72]	@ (800d0b4 <xTimerCreateTimerTask+0x94>)
 800d06c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d06e:	4b11      	ldr	r3, [pc, #68]	@ (800d0b4 <xTimerCreateTimerTask+0x94>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d001      	beq.n	800d07a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d076:	2301      	movs	r3, #1
 800d078:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d10d      	bne.n	800d09c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800d080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d084:	b672      	cpsid	i
 800d086:	f383 8811 	msr	BASEPRI, r3
 800d08a:	f3bf 8f6f 	isb	sy
 800d08e:	f3bf 8f4f 	dsb	sy
 800d092:	b662      	cpsie	i
 800d094:	613b      	str	r3, [r7, #16]
}
 800d096:	bf00      	nop
 800d098:	bf00      	nop
 800d09a:	e7fd      	b.n	800d098 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800d09c:	697b      	ldr	r3, [r7, #20]
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3718      	adds	r7, #24
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}
 800d0a6:	bf00      	nop
 800d0a8:	20001d20 	.word	0x20001d20
 800d0ac:	08012a70 	.word	0x08012a70
 800d0b0:	0800d1f9 	.word	0x0800d1f9
 800d0b4:	20001d24 	.word	0x20001d24

0800d0b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b08a      	sub	sp, #40	@ 0x28
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	60f8      	str	r0, [r7, #12]
 800d0c0:	60b9      	str	r1, [r7, #8]
 800d0c2:	607a      	str	r2, [r7, #4]
 800d0c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d10d      	bne.n	800d0ec <xTimerGenericCommand+0x34>
	__asm volatile
 800d0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0d4:	b672      	cpsid	i
 800d0d6:	f383 8811 	msr	BASEPRI, r3
 800d0da:	f3bf 8f6f 	isb	sy
 800d0de:	f3bf 8f4f 	dsb	sy
 800d0e2:	b662      	cpsie	i
 800d0e4:	623b      	str	r3, [r7, #32]
}
 800d0e6:	bf00      	nop
 800d0e8:	bf00      	nop
 800d0ea:	e7fd      	b.n	800d0e8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d0ec:	4b19      	ldr	r3, [pc, #100]	@ (800d154 <xTimerGenericCommand+0x9c>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d02a      	beq.n	800d14a <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	2b05      	cmp	r3, #5
 800d104:	dc18      	bgt.n	800d138 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d106:	f7ff fc99 	bl	800ca3c <xTaskGetSchedulerState>
 800d10a:	4603      	mov	r3, r0
 800d10c:	2b02      	cmp	r3, #2
 800d10e:	d109      	bne.n	800d124 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d110:	4b10      	ldr	r3, [pc, #64]	@ (800d154 <xTimerGenericCommand+0x9c>)
 800d112:	6818      	ldr	r0, [r3, #0]
 800d114:	f107 0110 	add.w	r1, r7, #16
 800d118:	2300      	movs	r3, #0
 800d11a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d11c:	f7fd ffa0 	bl	800b060 <xQueueGenericSend>
 800d120:	6278      	str	r0, [r7, #36]	@ 0x24
 800d122:	e012      	b.n	800d14a <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d124:	4b0b      	ldr	r3, [pc, #44]	@ (800d154 <xTimerGenericCommand+0x9c>)
 800d126:	6818      	ldr	r0, [r3, #0]
 800d128:	f107 0110 	add.w	r1, r7, #16
 800d12c:	2300      	movs	r3, #0
 800d12e:	2200      	movs	r2, #0
 800d130:	f7fd ff96 	bl	800b060 <xQueueGenericSend>
 800d134:	6278      	str	r0, [r7, #36]	@ 0x24
 800d136:	e008      	b.n	800d14a <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d138:	4b06      	ldr	r3, [pc, #24]	@ (800d154 <xTimerGenericCommand+0x9c>)
 800d13a:	6818      	ldr	r0, [r3, #0]
 800d13c:	f107 0110 	add.w	r1, r7, #16
 800d140:	2300      	movs	r3, #0
 800d142:	683a      	ldr	r2, [r7, #0]
 800d144:	f7fe f896 	bl	800b274 <xQueueGenericSendFromISR>
 800d148:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3728      	adds	r7, #40	@ 0x28
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}
 800d154:	20001d20 	.word	0x20001d20

0800d158 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b088      	sub	sp, #32
 800d15c:	af02      	add	r7, sp, #8
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d162:	4b24      	ldr	r3, [pc, #144]	@ (800d1f4 <prvProcessExpiredTimer+0x9c>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	68db      	ldr	r3, [r3, #12]
 800d168:	68db      	ldr	r3, [r3, #12]
 800d16a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	3304      	adds	r3, #4
 800d170:	4618      	mov	r0, r3
 800d172:	f7fd fd49 	bl	800ac08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d17c:	f003 0304 	and.w	r3, r3, #4
 800d180:	2b00      	cmp	r3, #0
 800d182:	d025      	beq.n	800d1d0 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	699a      	ldr	r2, [r3, #24]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	18d1      	adds	r1, r2, r3
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	683a      	ldr	r2, [r7, #0]
 800d190:	6978      	ldr	r0, [r7, #20]
 800d192:	f000 f8d7 	bl	800d344 <prvInsertTimerInActiveList>
 800d196:	4603      	mov	r3, r0
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d022      	beq.n	800d1e2 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d19c:	2300      	movs	r3, #0
 800d19e:	9300      	str	r3, [sp, #0]
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	687a      	ldr	r2, [r7, #4]
 800d1a4:	2100      	movs	r1, #0
 800d1a6:	6978      	ldr	r0, [r7, #20]
 800d1a8:	f7ff ff86 	bl	800d0b8 <xTimerGenericCommand>
 800d1ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d116      	bne.n	800d1e2 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800d1b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1b8:	b672      	cpsid	i
 800d1ba:	f383 8811 	msr	BASEPRI, r3
 800d1be:	f3bf 8f6f 	isb	sy
 800d1c2:	f3bf 8f4f 	dsb	sy
 800d1c6:	b662      	cpsie	i
 800d1c8:	60fb      	str	r3, [r7, #12]
}
 800d1ca:	bf00      	nop
 800d1cc:	bf00      	nop
 800d1ce:	e7fd      	b.n	800d1cc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d1d6:	f023 0301 	bic.w	r3, r3, #1
 800d1da:	b2da      	uxtb	r2, r3
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	6a1b      	ldr	r3, [r3, #32]
 800d1e6:	6978      	ldr	r0, [r7, #20]
 800d1e8:	4798      	blx	r3
}
 800d1ea:	bf00      	nop
 800d1ec:	3718      	adds	r7, #24
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}
 800d1f2:	bf00      	nop
 800d1f4:	20001d18 	.word	0x20001d18

0800d1f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b084      	sub	sp, #16
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d200:	f107 0308 	add.w	r3, r7, #8
 800d204:	4618      	mov	r0, r3
 800d206:	f000 f859 	bl	800d2bc <prvGetNextExpireTime>
 800d20a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	4619      	mov	r1, r3
 800d210:	68f8      	ldr	r0, [r7, #12]
 800d212:	f000 f805 	bl	800d220 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d216:	f000 f8d7 	bl	800d3c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d21a:	bf00      	nop
 800d21c:	e7f0      	b.n	800d200 <prvTimerTask+0x8>
	...

0800d220 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b084      	sub	sp, #16
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d22a:	f7ff f80f 	bl	800c24c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d22e:	f107 0308 	add.w	r3, r7, #8
 800d232:	4618      	mov	r0, r3
 800d234:	f000 f866 	bl	800d304 <prvSampleTimeNow>
 800d238:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d130      	bne.n	800d2a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d10a      	bne.n	800d25c <prvProcessTimerOrBlockTask+0x3c>
 800d246:	687a      	ldr	r2, [r7, #4]
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d806      	bhi.n	800d25c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d24e:	f7ff f80b 	bl	800c268 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d252:	68f9      	ldr	r1, [r7, #12]
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f7ff ff7f 	bl	800d158 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d25a:	e024      	b.n	800d2a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d008      	beq.n	800d274 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d262:	4b13      	ldr	r3, [pc, #76]	@ (800d2b0 <prvProcessTimerOrBlockTask+0x90>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d101      	bne.n	800d270 <prvProcessTimerOrBlockTask+0x50>
 800d26c:	2301      	movs	r3, #1
 800d26e:	e000      	b.n	800d272 <prvProcessTimerOrBlockTask+0x52>
 800d270:	2300      	movs	r3, #0
 800d272:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d274:	4b0f      	ldr	r3, [pc, #60]	@ (800d2b4 <prvProcessTimerOrBlockTask+0x94>)
 800d276:	6818      	ldr	r0, [r3, #0]
 800d278:	687a      	ldr	r2, [r7, #4]
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	1ad3      	subs	r3, r2, r3
 800d27e:	683a      	ldr	r2, [r7, #0]
 800d280:	4619      	mov	r1, r3
 800d282:	f7fe fd5d 	bl	800bd40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d286:	f7fe ffef 	bl	800c268 <xTaskResumeAll>
 800d28a:	4603      	mov	r3, r0
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d10a      	bne.n	800d2a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d290:	4b09      	ldr	r3, [pc, #36]	@ (800d2b8 <prvProcessTimerOrBlockTask+0x98>)
 800d292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d296:	601a      	str	r2, [r3, #0]
 800d298:	f3bf 8f4f 	dsb	sy
 800d29c:	f3bf 8f6f 	isb	sy
}
 800d2a0:	e001      	b.n	800d2a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d2a2:	f7fe ffe1 	bl	800c268 <xTaskResumeAll>
}
 800d2a6:	bf00      	nop
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	bf00      	nop
 800d2b0:	20001d1c 	.word	0x20001d1c
 800d2b4:	20001d20 	.word	0x20001d20
 800d2b8:	e000ed04 	.word	0xe000ed04

0800d2bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b085      	sub	sp, #20
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d2c4:	4b0e      	ldr	r3, [pc, #56]	@ (800d300 <prvGetNextExpireTime+0x44>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d101      	bne.n	800d2d2 <prvGetNextExpireTime+0x16>
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	e000      	b.n	800d2d4 <prvGetNextExpireTime+0x18>
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d105      	bne.n	800d2ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d2e0:	4b07      	ldr	r3, [pc, #28]	@ (800d300 <prvGetNextExpireTime+0x44>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	68db      	ldr	r3, [r3, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	60fb      	str	r3, [r7, #12]
 800d2ea:	e001      	b.n	800d2f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3714      	adds	r7, #20
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fc:	4770      	bx	lr
 800d2fe:	bf00      	nop
 800d300:	20001d18 	.word	0x20001d18

0800d304 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b084      	sub	sp, #16
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d30c:	f7ff f84c 	bl	800c3a8 <xTaskGetTickCount>
 800d310:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d312:	4b0b      	ldr	r3, [pc, #44]	@ (800d340 <prvSampleTimeNow+0x3c>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	68fa      	ldr	r2, [r7, #12]
 800d318:	429a      	cmp	r2, r3
 800d31a:	d205      	bcs.n	800d328 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d31c:	f000 f940 	bl	800d5a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2201      	movs	r2, #1
 800d324:	601a      	str	r2, [r3, #0]
 800d326:	e002      	b.n	800d32e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2200      	movs	r2, #0
 800d32c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d32e:	4a04      	ldr	r2, [pc, #16]	@ (800d340 <prvSampleTimeNow+0x3c>)
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d334:	68fb      	ldr	r3, [r7, #12]
}
 800d336:	4618      	mov	r0, r3
 800d338:	3710      	adds	r7, #16
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
 800d33e:	bf00      	nop
 800d340:	20001d28 	.word	0x20001d28

0800d344 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b086      	sub	sp, #24
 800d348:	af00      	add	r7, sp, #0
 800d34a:	60f8      	str	r0, [r7, #12]
 800d34c:	60b9      	str	r1, [r7, #8]
 800d34e:	607a      	str	r2, [r7, #4]
 800d350:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d352:	2300      	movs	r3, #0
 800d354:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	68ba      	ldr	r2, [r7, #8]
 800d35a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	68fa      	ldr	r2, [r7, #12]
 800d360:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d362:	68ba      	ldr	r2, [r7, #8]
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	429a      	cmp	r2, r3
 800d368:	d812      	bhi.n	800d390 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	1ad2      	subs	r2, r2, r3
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	699b      	ldr	r3, [r3, #24]
 800d374:	429a      	cmp	r2, r3
 800d376:	d302      	bcc.n	800d37e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d378:	2301      	movs	r3, #1
 800d37a:	617b      	str	r3, [r7, #20]
 800d37c:	e01b      	b.n	800d3b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d37e:	4b10      	ldr	r3, [pc, #64]	@ (800d3c0 <prvInsertTimerInActiveList+0x7c>)
 800d380:	681a      	ldr	r2, [r3, #0]
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	3304      	adds	r3, #4
 800d386:	4619      	mov	r1, r3
 800d388:	4610      	mov	r0, r2
 800d38a:	f7fd fc04 	bl	800ab96 <vListInsert>
 800d38e:	e012      	b.n	800d3b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d390:	687a      	ldr	r2, [r7, #4]
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	429a      	cmp	r2, r3
 800d396:	d206      	bcs.n	800d3a6 <prvInsertTimerInActiveList+0x62>
 800d398:	68ba      	ldr	r2, [r7, #8]
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d302      	bcc.n	800d3a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	617b      	str	r3, [r7, #20]
 800d3a4:	e007      	b.n	800d3b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d3a6:	4b07      	ldr	r3, [pc, #28]	@ (800d3c4 <prvInsertTimerInActiveList+0x80>)
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	3304      	adds	r3, #4
 800d3ae:	4619      	mov	r1, r3
 800d3b0:	4610      	mov	r0, r2
 800d3b2:	f7fd fbf0 	bl	800ab96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d3b6:	697b      	ldr	r3, [r7, #20]
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3718      	adds	r7, #24
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	20001d1c 	.word	0x20001d1c
 800d3c4:	20001d18 	.word	0x20001d18

0800d3c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b08e      	sub	sp, #56	@ 0x38
 800d3cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d3ce:	e0d4      	b.n	800d57a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	da1b      	bge.n	800d40e <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d3d6:	1d3b      	adds	r3, r7, #4
 800d3d8:	3304      	adds	r3, #4
 800d3da:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d3dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d10d      	bne.n	800d3fe <prvProcessReceivedCommands+0x36>
	__asm volatile
 800d3e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3e6:	b672      	cpsid	i
 800d3e8:	f383 8811 	msr	BASEPRI, r3
 800d3ec:	f3bf 8f6f 	isb	sy
 800d3f0:	f3bf 8f4f 	dsb	sy
 800d3f4:	b662      	cpsie	i
 800d3f6:	61fb      	str	r3, [r7, #28]
}
 800d3f8:	bf00      	nop
 800d3fa:	bf00      	nop
 800d3fc:	e7fd      	b.n	800d3fa <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d3fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d404:	6850      	ldr	r0, [r2, #4]
 800d406:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d408:	6892      	ldr	r2, [r2, #8]
 800d40a:	4611      	mov	r1, r2
 800d40c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2b00      	cmp	r3, #0
 800d412:	f2c0 80b2 	blt.w	800d57a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d41a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d41c:	695b      	ldr	r3, [r3, #20]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d004      	beq.n	800d42c <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d424:	3304      	adds	r3, #4
 800d426:	4618      	mov	r0, r3
 800d428:	f7fd fbee 	bl	800ac08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d42c:	463b      	mov	r3, r7
 800d42e:	4618      	mov	r0, r3
 800d430:	f7ff ff68 	bl	800d304 <prvSampleTimeNow>
 800d434:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2b09      	cmp	r3, #9
 800d43a:	f200 809b 	bhi.w	800d574 <prvProcessReceivedCommands+0x1ac>
 800d43e:	a201      	add	r2, pc, #4	@ (adr r2, 800d444 <prvProcessReceivedCommands+0x7c>)
 800d440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d444:	0800d46d 	.word	0x0800d46d
 800d448:	0800d46d 	.word	0x0800d46d
 800d44c:	0800d46d 	.word	0x0800d46d
 800d450:	0800d4e7 	.word	0x0800d4e7
 800d454:	0800d4fb 	.word	0x0800d4fb
 800d458:	0800d54b 	.word	0x0800d54b
 800d45c:	0800d46d 	.word	0x0800d46d
 800d460:	0800d46d 	.word	0x0800d46d
 800d464:	0800d4e7 	.word	0x0800d4e7
 800d468:	0800d4fb 	.word	0x0800d4fb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d46c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d46e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d472:	f043 0301 	orr.w	r3, r3, #1
 800d476:	b2da      	uxtb	r2, r3
 800d478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d47a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d47e:	68ba      	ldr	r2, [r7, #8]
 800d480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d482:	699b      	ldr	r3, [r3, #24]
 800d484:	18d1      	adds	r1, r2, r3
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d48a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d48c:	f7ff ff5a 	bl	800d344 <prvInsertTimerInActiveList>
 800d490:	4603      	mov	r3, r0
 800d492:	2b00      	cmp	r3, #0
 800d494:	d070      	beq.n	800d578 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d498:	6a1b      	ldr	r3, [r3, #32]
 800d49a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d49c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d4a4:	f003 0304 	and.w	r3, r3, #4
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d065      	beq.n	800d578 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d4ac:	68ba      	ldr	r2, [r7, #8]
 800d4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4b0:	699b      	ldr	r3, [r3, #24]
 800d4b2:	441a      	add	r2, r3
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	9300      	str	r3, [sp, #0]
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d4be:	f7ff fdfb 	bl	800d0b8 <xTimerGenericCommand>
 800d4c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d4c4:	6a3b      	ldr	r3, [r7, #32]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d156      	bne.n	800d578 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800d4ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4ce:	b672      	cpsid	i
 800d4d0:	f383 8811 	msr	BASEPRI, r3
 800d4d4:	f3bf 8f6f 	isb	sy
 800d4d8:	f3bf 8f4f 	dsb	sy
 800d4dc:	b662      	cpsie	i
 800d4de:	61bb      	str	r3, [r7, #24]
}
 800d4e0:	bf00      	nop
 800d4e2:	bf00      	nop
 800d4e4:	e7fd      	b.n	800d4e2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d4e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d4ec:	f023 0301 	bic.w	r3, r3, #1
 800d4f0:	b2da      	uxtb	r2, r3
 800d4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d4f8:	e03f      	b.n	800d57a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d4fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d500:	f043 0301 	orr.w	r3, r3, #1
 800d504:	b2da      	uxtb	r2, r3
 800d506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d508:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d50c:	68ba      	ldr	r2, [r7, #8]
 800d50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d510:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d514:	699b      	ldr	r3, [r3, #24]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d10d      	bne.n	800d536 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800d51a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d51e:	b672      	cpsid	i
 800d520:	f383 8811 	msr	BASEPRI, r3
 800d524:	f3bf 8f6f 	isb	sy
 800d528:	f3bf 8f4f 	dsb	sy
 800d52c:	b662      	cpsie	i
 800d52e:	617b      	str	r3, [r7, #20]
}
 800d530:	bf00      	nop
 800d532:	bf00      	nop
 800d534:	e7fd      	b.n	800d532 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d538:	699a      	ldr	r2, [r3, #24]
 800d53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d53c:	18d1      	adds	r1, r2, r3
 800d53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d542:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d544:	f7ff fefe 	bl	800d344 <prvInsertTimerInActiveList>
					break;
 800d548:	e017      	b.n	800d57a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d54a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d54c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d550:	f003 0302 	and.w	r3, r3, #2
 800d554:	2b00      	cmp	r3, #0
 800d556:	d103      	bne.n	800d560 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800d558:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d55a:	f000 fbd3 	bl	800dd04 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d55e:	e00c      	b.n	800d57a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d562:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d566:	f023 0301 	bic.w	r3, r3, #1
 800d56a:	b2da      	uxtb	r2, r3
 800d56c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d56e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d572:	e002      	b.n	800d57a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800d574:	bf00      	nop
 800d576:	e000      	b.n	800d57a <prvProcessReceivedCommands+0x1b2>
					break;
 800d578:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d57a:	4b08      	ldr	r3, [pc, #32]	@ (800d59c <prvProcessReceivedCommands+0x1d4>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	1d39      	adds	r1, r7, #4
 800d580:	2200      	movs	r2, #0
 800d582:	4618      	mov	r0, r3
 800d584:	f7fd ffb2 	bl	800b4ec <xQueueReceive>
 800d588:	4603      	mov	r3, r0
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	f47f af20 	bne.w	800d3d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d590:	bf00      	nop
 800d592:	bf00      	nop
 800d594:	3730      	adds	r7, #48	@ 0x30
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}
 800d59a:	bf00      	nop
 800d59c:	20001d20 	.word	0x20001d20

0800d5a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b088      	sub	sp, #32
 800d5a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d5a6:	e04b      	b.n	800d640 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d5a8:	4b2f      	ldr	r3, [pc, #188]	@ (800d668 <prvSwitchTimerLists+0xc8>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	68db      	ldr	r3, [r3, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5b2:	4b2d      	ldr	r3, [pc, #180]	@ (800d668 <prvSwitchTimerLists+0xc8>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	68db      	ldr	r3, [r3, #12]
 800d5b8:	68db      	ldr	r3, [r3, #12]
 800d5ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	3304      	adds	r3, #4
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f7fd fb21 	bl	800ac08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	6a1b      	ldr	r3, [r3, #32]
 800d5ca:	68f8      	ldr	r0, [r7, #12]
 800d5cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d5d4:	f003 0304 	and.w	r3, r3, #4
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d031      	beq.n	800d640 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	699b      	ldr	r3, [r3, #24]
 800d5e0:	693a      	ldr	r2, [r7, #16]
 800d5e2:	4413      	add	r3, r2
 800d5e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d5e6:	68ba      	ldr	r2, [r7, #8]
 800d5e8:	693b      	ldr	r3, [r7, #16]
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d90e      	bls.n	800d60c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	68ba      	ldr	r2, [r7, #8]
 800d5f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	68fa      	ldr	r2, [r7, #12]
 800d5f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d5fa:	4b1b      	ldr	r3, [pc, #108]	@ (800d668 <prvSwitchTimerLists+0xc8>)
 800d5fc:	681a      	ldr	r2, [r3, #0]
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	3304      	adds	r3, #4
 800d602:	4619      	mov	r1, r3
 800d604:	4610      	mov	r0, r2
 800d606:	f7fd fac6 	bl	800ab96 <vListInsert>
 800d60a:	e019      	b.n	800d640 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d60c:	2300      	movs	r3, #0
 800d60e:	9300      	str	r3, [sp, #0]
 800d610:	2300      	movs	r3, #0
 800d612:	693a      	ldr	r2, [r7, #16]
 800d614:	2100      	movs	r1, #0
 800d616:	68f8      	ldr	r0, [r7, #12]
 800d618:	f7ff fd4e 	bl	800d0b8 <xTimerGenericCommand>
 800d61c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d10d      	bne.n	800d640 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800d624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d628:	b672      	cpsid	i
 800d62a:	f383 8811 	msr	BASEPRI, r3
 800d62e:	f3bf 8f6f 	isb	sy
 800d632:	f3bf 8f4f 	dsb	sy
 800d636:	b662      	cpsie	i
 800d638:	603b      	str	r3, [r7, #0]
}
 800d63a:	bf00      	nop
 800d63c:	bf00      	nop
 800d63e:	e7fd      	b.n	800d63c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d640:	4b09      	ldr	r3, [pc, #36]	@ (800d668 <prvSwitchTimerLists+0xc8>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d1ae      	bne.n	800d5a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d64a:	4b07      	ldr	r3, [pc, #28]	@ (800d668 <prvSwitchTimerLists+0xc8>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d650:	4b06      	ldr	r3, [pc, #24]	@ (800d66c <prvSwitchTimerLists+0xcc>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4a04      	ldr	r2, [pc, #16]	@ (800d668 <prvSwitchTimerLists+0xc8>)
 800d656:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d658:	4a04      	ldr	r2, [pc, #16]	@ (800d66c <prvSwitchTimerLists+0xcc>)
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	6013      	str	r3, [r2, #0]
}
 800d65e:	bf00      	nop
 800d660:	3718      	adds	r7, #24
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	20001d18 	.word	0x20001d18
 800d66c:	20001d1c 	.word	0x20001d1c

0800d670 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d676:	f000 f949 	bl	800d90c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d67a:	4b15      	ldr	r3, [pc, #84]	@ (800d6d0 <prvCheckForValidListAndQueue+0x60>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d120      	bne.n	800d6c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d682:	4814      	ldr	r0, [pc, #80]	@ (800d6d4 <prvCheckForValidListAndQueue+0x64>)
 800d684:	f7fd fa36 	bl	800aaf4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d688:	4813      	ldr	r0, [pc, #76]	@ (800d6d8 <prvCheckForValidListAndQueue+0x68>)
 800d68a:	f7fd fa33 	bl	800aaf4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d68e:	4b13      	ldr	r3, [pc, #76]	@ (800d6dc <prvCheckForValidListAndQueue+0x6c>)
 800d690:	4a10      	ldr	r2, [pc, #64]	@ (800d6d4 <prvCheckForValidListAndQueue+0x64>)
 800d692:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d694:	4b12      	ldr	r3, [pc, #72]	@ (800d6e0 <prvCheckForValidListAndQueue+0x70>)
 800d696:	4a10      	ldr	r2, [pc, #64]	@ (800d6d8 <prvCheckForValidListAndQueue+0x68>)
 800d698:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d69a:	2300      	movs	r3, #0
 800d69c:	9300      	str	r3, [sp, #0]
 800d69e:	4b11      	ldr	r3, [pc, #68]	@ (800d6e4 <prvCheckForValidListAndQueue+0x74>)
 800d6a0:	4a11      	ldr	r2, [pc, #68]	@ (800d6e8 <prvCheckForValidListAndQueue+0x78>)
 800d6a2:	2110      	movs	r1, #16
 800d6a4:	200a      	movs	r0, #10
 800d6a6:	f7fd fb45 	bl	800ad34 <xQueueGenericCreateStatic>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	4a08      	ldr	r2, [pc, #32]	@ (800d6d0 <prvCheckForValidListAndQueue+0x60>)
 800d6ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d6b0:	4b07      	ldr	r3, [pc, #28]	@ (800d6d0 <prvCheckForValidListAndQueue+0x60>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d005      	beq.n	800d6c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d6b8:	4b05      	ldr	r3, [pc, #20]	@ (800d6d0 <prvCheckForValidListAndQueue+0x60>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	490b      	ldr	r1, [pc, #44]	@ (800d6ec <prvCheckForValidListAndQueue+0x7c>)
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f7fe faea 	bl	800bc98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d6c4:	f000 f958 	bl	800d978 <vPortExitCritical>
}
 800d6c8:	bf00      	nop
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	20001d20 	.word	0x20001d20
 800d6d4:	20001cf0 	.word	0x20001cf0
 800d6d8:	20001d04 	.word	0x20001d04
 800d6dc:	20001d18 	.word	0x20001d18
 800d6e0:	20001d1c 	.word	0x20001d1c
 800d6e4:	20001dcc 	.word	0x20001dcc
 800d6e8:	20001d2c 	.word	0x20001d2c
 800d6ec:	08012a78 	.word	0x08012a78

0800d6f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b085      	sub	sp, #20
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	60f8      	str	r0, [r7, #12]
 800d6f8:	60b9      	str	r1, [r7, #8]
 800d6fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	3b04      	subs	r3, #4
 800d700:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	3b04      	subs	r3, #4
 800d70e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	f023 0201 	bic.w	r2, r3, #1
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	3b04      	subs	r3, #4
 800d71e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d720:	4a0c      	ldr	r2, [pc, #48]	@ (800d754 <pxPortInitialiseStack+0x64>)
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	3b14      	subs	r3, #20
 800d72a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d72c:	687a      	ldr	r2, [r7, #4]
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	3b04      	subs	r3, #4
 800d736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	f06f 0202 	mvn.w	r2, #2
 800d73e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	3b20      	subs	r3, #32
 800d744:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d746:	68fb      	ldr	r3, [r7, #12]
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3714      	adds	r7, #20
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr
 800d754:	0800d759 	.word	0x0800d759

0800d758 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d758:	b480      	push	{r7}
 800d75a:	b085      	sub	sp, #20
 800d75c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d75e:	2300      	movs	r3, #0
 800d760:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d762:	4b15      	ldr	r3, [pc, #84]	@ (800d7b8 <prvTaskExitError+0x60>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d76a:	d00d      	beq.n	800d788 <prvTaskExitError+0x30>
	__asm volatile
 800d76c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d770:	b672      	cpsid	i
 800d772:	f383 8811 	msr	BASEPRI, r3
 800d776:	f3bf 8f6f 	isb	sy
 800d77a:	f3bf 8f4f 	dsb	sy
 800d77e:	b662      	cpsie	i
 800d780:	60fb      	str	r3, [r7, #12]
}
 800d782:	bf00      	nop
 800d784:	bf00      	nop
 800d786:	e7fd      	b.n	800d784 <prvTaskExitError+0x2c>
	__asm volatile
 800d788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d78c:	b672      	cpsid	i
 800d78e:	f383 8811 	msr	BASEPRI, r3
 800d792:	f3bf 8f6f 	isb	sy
 800d796:	f3bf 8f4f 	dsb	sy
 800d79a:	b662      	cpsie	i
 800d79c:	60bb      	str	r3, [r7, #8]
}
 800d79e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d7a0:	bf00      	nop
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d0fc      	beq.n	800d7a2 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d7a8:	bf00      	nop
 800d7aa:	bf00      	nop
 800d7ac:	3714      	adds	r7, #20
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b4:	4770      	bx	lr
 800d7b6:	bf00      	nop
 800d7b8:	20000020 	.word	0x20000020
 800d7bc:	00000000 	.word	0x00000000

0800d7c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d7c0:	4b07      	ldr	r3, [pc, #28]	@ (800d7e0 <pxCurrentTCBConst2>)
 800d7c2:	6819      	ldr	r1, [r3, #0]
 800d7c4:	6808      	ldr	r0, [r1, #0]
 800d7c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ca:	f380 8809 	msr	PSP, r0
 800d7ce:	f3bf 8f6f 	isb	sy
 800d7d2:	f04f 0000 	mov.w	r0, #0
 800d7d6:	f380 8811 	msr	BASEPRI, r0
 800d7da:	4770      	bx	lr
 800d7dc:	f3af 8000 	nop.w

0800d7e0 <pxCurrentTCBConst2>:
 800d7e0:	200017f0 	.word	0x200017f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d7e4:	bf00      	nop
 800d7e6:	bf00      	nop

0800d7e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d7e8:	4808      	ldr	r0, [pc, #32]	@ (800d80c <prvPortStartFirstTask+0x24>)
 800d7ea:	6800      	ldr	r0, [r0, #0]
 800d7ec:	6800      	ldr	r0, [r0, #0]
 800d7ee:	f380 8808 	msr	MSP, r0
 800d7f2:	f04f 0000 	mov.w	r0, #0
 800d7f6:	f380 8814 	msr	CONTROL, r0
 800d7fa:	b662      	cpsie	i
 800d7fc:	b661      	cpsie	f
 800d7fe:	f3bf 8f4f 	dsb	sy
 800d802:	f3bf 8f6f 	isb	sy
 800d806:	df00      	svc	0
 800d808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d80a:	bf00      	nop
 800d80c:	e000ed08 	.word	0xe000ed08

0800d810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b084      	sub	sp, #16
 800d814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d816:	4b37      	ldr	r3, [pc, #220]	@ (800d8f4 <xPortStartScheduler+0xe4>)
 800d818:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	b2db      	uxtb	r3, r3
 800d820:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	22ff      	movs	r2, #255	@ 0xff
 800d826:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	b2db      	uxtb	r3, r3
 800d82e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d830:	78fb      	ldrb	r3, [r7, #3]
 800d832:	b2db      	uxtb	r3, r3
 800d834:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d838:	b2da      	uxtb	r2, r3
 800d83a:	4b2f      	ldr	r3, [pc, #188]	@ (800d8f8 <xPortStartScheduler+0xe8>)
 800d83c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d83e:	4b2f      	ldr	r3, [pc, #188]	@ (800d8fc <xPortStartScheduler+0xec>)
 800d840:	2207      	movs	r2, #7
 800d842:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d844:	e009      	b.n	800d85a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d846:	4b2d      	ldr	r3, [pc, #180]	@ (800d8fc <xPortStartScheduler+0xec>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	3b01      	subs	r3, #1
 800d84c:	4a2b      	ldr	r2, [pc, #172]	@ (800d8fc <xPortStartScheduler+0xec>)
 800d84e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d850:	78fb      	ldrb	r3, [r7, #3]
 800d852:	b2db      	uxtb	r3, r3
 800d854:	005b      	lsls	r3, r3, #1
 800d856:	b2db      	uxtb	r3, r3
 800d858:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d85a:	78fb      	ldrb	r3, [r7, #3]
 800d85c:	b2db      	uxtb	r3, r3
 800d85e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d862:	2b80      	cmp	r3, #128	@ 0x80
 800d864:	d0ef      	beq.n	800d846 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d866:	4b25      	ldr	r3, [pc, #148]	@ (800d8fc <xPortStartScheduler+0xec>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f1c3 0307 	rsb	r3, r3, #7
 800d86e:	2b04      	cmp	r3, #4
 800d870:	d00d      	beq.n	800d88e <xPortStartScheduler+0x7e>
	__asm volatile
 800d872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d876:	b672      	cpsid	i
 800d878:	f383 8811 	msr	BASEPRI, r3
 800d87c:	f3bf 8f6f 	isb	sy
 800d880:	f3bf 8f4f 	dsb	sy
 800d884:	b662      	cpsie	i
 800d886:	60bb      	str	r3, [r7, #8]
}
 800d888:	bf00      	nop
 800d88a:	bf00      	nop
 800d88c:	e7fd      	b.n	800d88a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d88e:	4b1b      	ldr	r3, [pc, #108]	@ (800d8fc <xPortStartScheduler+0xec>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	021b      	lsls	r3, r3, #8
 800d894:	4a19      	ldr	r2, [pc, #100]	@ (800d8fc <xPortStartScheduler+0xec>)
 800d896:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d898:	4b18      	ldr	r3, [pc, #96]	@ (800d8fc <xPortStartScheduler+0xec>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d8a0:	4a16      	ldr	r2, [pc, #88]	@ (800d8fc <xPortStartScheduler+0xec>)
 800d8a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	b2da      	uxtb	r2, r3
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d8ac:	4b14      	ldr	r3, [pc, #80]	@ (800d900 <xPortStartScheduler+0xf0>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	4a13      	ldr	r2, [pc, #76]	@ (800d900 <xPortStartScheduler+0xf0>)
 800d8b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d8b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d8b8:	4b11      	ldr	r3, [pc, #68]	@ (800d900 <xPortStartScheduler+0xf0>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	4a10      	ldr	r2, [pc, #64]	@ (800d900 <xPortStartScheduler+0xf0>)
 800d8be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d8c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d8c4:	f000 f8dc 	bl	800da80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d8c8:	4b0e      	ldr	r3, [pc, #56]	@ (800d904 <xPortStartScheduler+0xf4>)
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d8ce:	f000 f8fb 	bl	800dac8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d8d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d908 <xPortStartScheduler+0xf8>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	4a0c      	ldr	r2, [pc, #48]	@ (800d908 <xPortStartScheduler+0xf8>)
 800d8d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d8dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d8de:	f7ff ff83 	bl	800d7e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d8e2:	f7fe fe2d 	bl	800c540 <vTaskSwitchContext>
	prvTaskExitError();
 800d8e6:	f7ff ff37 	bl	800d758 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d8ea:	2300      	movs	r3, #0
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3710      	adds	r7, #16
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}
 800d8f4:	e000e400 	.word	0xe000e400
 800d8f8:	20001e1c 	.word	0x20001e1c
 800d8fc:	20001e20 	.word	0x20001e20
 800d900:	e000ed20 	.word	0xe000ed20
 800d904:	20000020 	.word	0x20000020
 800d908:	e000ef34 	.word	0xe000ef34

0800d90c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d90c:	b480      	push	{r7}
 800d90e:	b083      	sub	sp, #12
 800d910:	af00      	add	r7, sp, #0
	__asm volatile
 800d912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d916:	b672      	cpsid	i
 800d918:	f383 8811 	msr	BASEPRI, r3
 800d91c:	f3bf 8f6f 	isb	sy
 800d920:	f3bf 8f4f 	dsb	sy
 800d924:	b662      	cpsie	i
 800d926:	607b      	str	r3, [r7, #4]
}
 800d928:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d92a:	4b11      	ldr	r3, [pc, #68]	@ (800d970 <vPortEnterCritical+0x64>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	3301      	adds	r3, #1
 800d930:	4a0f      	ldr	r2, [pc, #60]	@ (800d970 <vPortEnterCritical+0x64>)
 800d932:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d934:	4b0e      	ldr	r3, [pc, #56]	@ (800d970 <vPortEnterCritical+0x64>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	2b01      	cmp	r3, #1
 800d93a:	d112      	bne.n	800d962 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d93c:	4b0d      	ldr	r3, [pc, #52]	@ (800d974 <vPortEnterCritical+0x68>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	b2db      	uxtb	r3, r3
 800d942:	2b00      	cmp	r3, #0
 800d944:	d00d      	beq.n	800d962 <vPortEnterCritical+0x56>
	__asm volatile
 800d946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d94a:	b672      	cpsid	i
 800d94c:	f383 8811 	msr	BASEPRI, r3
 800d950:	f3bf 8f6f 	isb	sy
 800d954:	f3bf 8f4f 	dsb	sy
 800d958:	b662      	cpsie	i
 800d95a:	603b      	str	r3, [r7, #0]
}
 800d95c:	bf00      	nop
 800d95e:	bf00      	nop
 800d960:	e7fd      	b.n	800d95e <vPortEnterCritical+0x52>
	}
}
 800d962:	bf00      	nop
 800d964:	370c      	adds	r7, #12
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr
 800d96e:	bf00      	nop
 800d970:	20000020 	.word	0x20000020
 800d974:	e000ed04 	.word	0xe000ed04

0800d978 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d978:	b480      	push	{r7}
 800d97a:	b083      	sub	sp, #12
 800d97c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d97e:	4b13      	ldr	r3, [pc, #76]	@ (800d9cc <vPortExitCritical+0x54>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d10d      	bne.n	800d9a2 <vPortExitCritical+0x2a>
	__asm volatile
 800d986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d98a:	b672      	cpsid	i
 800d98c:	f383 8811 	msr	BASEPRI, r3
 800d990:	f3bf 8f6f 	isb	sy
 800d994:	f3bf 8f4f 	dsb	sy
 800d998:	b662      	cpsie	i
 800d99a:	607b      	str	r3, [r7, #4]
}
 800d99c:	bf00      	nop
 800d99e:	bf00      	nop
 800d9a0:	e7fd      	b.n	800d99e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d9a2:	4b0a      	ldr	r3, [pc, #40]	@ (800d9cc <vPortExitCritical+0x54>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	3b01      	subs	r3, #1
 800d9a8:	4a08      	ldr	r2, [pc, #32]	@ (800d9cc <vPortExitCritical+0x54>)
 800d9aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d9ac:	4b07      	ldr	r3, [pc, #28]	@ (800d9cc <vPortExitCritical+0x54>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d105      	bne.n	800d9c0 <vPortExitCritical+0x48>
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	f383 8811 	msr	BASEPRI, r3
}
 800d9be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d9c0:	bf00      	nop
 800d9c2:	370c      	adds	r7, #12
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr
 800d9cc:	20000020 	.word	0x20000020

0800d9d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d9d0:	f3ef 8009 	mrs	r0, PSP
 800d9d4:	f3bf 8f6f 	isb	sy
 800d9d8:	4b15      	ldr	r3, [pc, #84]	@ (800da30 <pxCurrentTCBConst>)
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	f01e 0f10 	tst.w	lr, #16
 800d9e0:	bf08      	it	eq
 800d9e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d9e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ea:	6010      	str	r0, [r2, #0]
 800d9ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d9f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d9f4:	b672      	cpsid	i
 800d9f6:	f380 8811 	msr	BASEPRI, r0
 800d9fa:	f3bf 8f4f 	dsb	sy
 800d9fe:	f3bf 8f6f 	isb	sy
 800da02:	b662      	cpsie	i
 800da04:	f7fe fd9c 	bl	800c540 <vTaskSwitchContext>
 800da08:	f04f 0000 	mov.w	r0, #0
 800da0c:	f380 8811 	msr	BASEPRI, r0
 800da10:	bc09      	pop	{r0, r3}
 800da12:	6819      	ldr	r1, [r3, #0]
 800da14:	6808      	ldr	r0, [r1, #0]
 800da16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da1a:	f01e 0f10 	tst.w	lr, #16
 800da1e:	bf08      	it	eq
 800da20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800da24:	f380 8809 	msr	PSP, r0
 800da28:	f3bf 8f6f 	isb	sy
 800da2c:	4770      	bx	lr
 800da2e:	bf00      	nop

0800da30 <pxCurrentTCBConst>:
 800da30:	200017f0 	.word	0x200017f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800da34:	bf00      	nop
 800da36:	bf00      	nop

0800da38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b082      	sub	sp, #8
 800da3c:	af00      	add	r7, sp, #0
	__asm volatile
 800da3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da42:	b672      	cpsid	i
 800da44:	f383 8811 	msr	BASEPRI, r3
 800da48:	f3bf 8f6f 	isb	sy
 800da4c:	f3bf 8f4f 	dsb	sy
 800da50:	b662      	cpsie	i
 800da52:	607b      	str	r3, [r7, #4]
}
 800da54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800da56:	f7fe fcb7 	bl	800c3c8 <xTaskIncrementTick>
 800da5a:	4603      	mov	r3, r0
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d003      	beq.n	800da68 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800da60:	4b06      	ldr	r3, [pc, #24]	@ (800da7c <xPortSysTickHandler+0x44>)
 800da62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da66:	601a      	str	r2, [r3, #0]
 800da68:	2300      	movs	r3, #0
 800da6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	f383 8811 	msr	BASEPRI, r3
}
 800da72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800da74:	bf00      	nop
 800da76:	3708      	adds	r7, #8
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}
 800da7c:	e000ed04 	.word	0xe000ed04

0800da80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800da80:	b480      	push	{r7}
 800da82:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800da84:	4b0b      	ldr	r3, [pc, #44]	@ (800dab4 <vPortSetupTimerInterrupt+0x34>)
 800da86:	2200      	movs	r2, #0
 800da88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800da8a:	4b0b      	ldr	r3, [pc, #44]	@ (800dab8 <vPortSetupTimerInterrupt+0x38>)
 800da8c:	2200      	movs	r2, #0
 800da8e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800da90:	4b0a      	ldr	r3, [pc, #40]	@ (800dabc <vPortSetupTimerInterrupt+0x3c>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a0a      	ldr	r2, [pc, #40]	@ (800dac0 <vPortSetupTimerInterrupt+0x40>)
 800da96:	fba2 2303 	umull	r2, r3, r2, r3
 800da9a:	099b      	lsrs	r3, r3, #6
 800da9c:	4a09      	ldr	r2, [pc, #36]	@ (800dac4 <vPortSetupTimerInterrupt+0x44>)
 800da9e:	3b01      	subs	r3, #1
 800daa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800daa2:	4b04      	ldr	r3, [pc, #16]	@ (800dab4 <vPortSetupTimerInterrupt+0x34>)
 800daa4:	2207      	movs	r2, #7
 800daa6:	601a      	str	r2, [r3, #0]
}
 800daa8:	bf00      	nop
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr
 800dab2:	bf00      	nop
 800dab4:	e000e010 	.word	0xe000e010
 800dab8:	e000e018 	.word	0xe000e018
 800dabc:	20000000 	.word	0x20000000
 800dac0:	10624dd3 	.word	0x10624dd3
 800dac4:	e000e014 	.word	0xe000e014

0800dac8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dac8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800dad8 <vPortEnableVFP+0x10>
 800dacc:	6801      	ldr	r1, [r0, #0]
 800dace:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800dad2:	6001      	str	r1, [r0, #0]
 800dad4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dad6:	bf00      	nop
 800dad8:	e000ed88 	.word	0xe000ed88

0800dadc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dadc:	b480      	push	{r7}
 800dade:	b085      	sub	sp, #20
 800dae0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dae2:	f3ef 8305 	mrs	r3, IPSR
 800dae6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2b0f      	cmp	r3, #15
 800daec:	d917      	bls.n	800db1e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800daee:	4a1a      	ldr	r2, [pc, #104]	@ (800db58 <vPortValidateInterruptPriority+0x7c>)
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	4413      	add	r3, r2
 800daf4:	781b      	ldrb	r3, [r3, #0]
 800daf6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800daf8:	4b18      	ldr	r3, [pc, #96]	@ (800db5c <vPortValidateInterruptPriority+0x80>)
 800dafa:	781b      	ldrb	r3, [r3, #0]
 800dafc:	7afa      	ldrb	r2, [r7, #11]
 800dafe:	429a      	cmp	r2, r3
 800db00:	d20d      	bcs.n	800db1e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800db02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db06:	b672      	cpsid	i
 800db08:	f383 8811 	msr	BASEPRI, r3
 800db0c:	f3bf 8f6f 	isb	sy
 800db10:	f3bf 8f4f 	dsb	sy
 800db14:	b662      	cpsie	i
 800db16:	607b      	str	r3, [r7, #4]
}
 800db18:	bf00      	nop
 800db1a:	bf00      	nop
 800db1c:	e7fd      	b.n	800db1a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800db1e:	4b10      	ldr	r3, [pc, #64]	@ (800db60 <vPortValidateInterruptPriority+0x84>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800db26:	4b0f      	ldr	r3, [pc, #60]	@ (800db64 <vPortValidateInterruptPriority+0x88>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	429a      	cmp	r2, r3
 800db2c:	d90d      	bls.n	800db4a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800db2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db32:	b672      	cpsid	i
 800db34:	f383 8811 	msr	BASEPRI, r3
 800db38:	f3bf 8f6f 	isb	sy
 800db3c:	f3bf 8f4f 	dsb	sy
 800db40:	b662      	cpsie	i
 800db42:	603b      	str	r3, [r7, #0]
}
 800db44:	bf00      	nop
 800db46:	bf00      	nop
 800db48:	e7fd      	b.n	800db46 <vPortValidateInterruptPriority+0x6a>
	}
 800db4a:	bf00      	nop
 800db4c:	3714      	adds	r7, #20
 800db4e:	46bd      	mov	sp, r7
 800db50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db54:	4770      	bx	lr
 800db56:	bf00      	nop
 800db58:	e000e3f0 	.word	0xe000e3f0
 800db5c:	20001e1c 	.word	0x20001e1c
 800db60:	e000ed0c 	.word	0xe000ed0c
 800db64:	20001e20 	.word	0x20001e20

0800db68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b08a      	sub	sp, #40	@ 0x28
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800db70:	2300      	movs	r3, #0
 800db72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800db74:	f7fe fb6a 	bl	800c24c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800db78:	4b5d      	ldr	r3, [pc, #372]	@ (800dcf0 <pvPortMalloc+0x188>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d101      	bne.n	800db84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800db80:	f000 f920 	bl	800ddc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800db84:	4b5b      	ldr	r3, [pc, #364]	@ (800dcf4 <pvPortMalloc+0x18c>)
 800db86:	681a      	ldr	r2, [r3, #0]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	4013      	ands	r3, r2
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	f040 8094 	bne.w	800dcba <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d020      	beq.n	800dbda <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800db98:	2208      	movs	r2, #8
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	4413      	add	r3, r2
 800db9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f003 0307 	and.w	r3, r3, #7
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d017      	beq.n	800dbda <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f023 0307 	bic.w	r3, r3, #7
 800dbb0:	3308      	adds	r3, #8
 800dbb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f003 0307 	and.w	r3, r3, #7
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d00d      	beq.n	800dbda <pvPortMalloc+0x72>
	__asm volatile
 800dbbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbc2:	b672      	cpsid	i
 800dbc4:	f383 8811 	msr	BASEPRI, r3
 800dbc8:	f3bf 8f6f 	isb	sy
 800dbcc:	f3bf 8f4f 	dsb	sy
 800dbd0:	b662      	cpsie	i
 800dbd2:	617b      	str	r3, [r7, #20]
}
 800dbd4:	bf00      	nop
 800dbd6:	bf00      	nop
 800dbd8:	e7fd      	b.n	800dbd6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d06c      	beq.n	800dcba <pvPortMalloc+0x152>
 800dbe0:	4b45      	ldr	r3, [pc, #276]	@ (800dcf8 <pvPortMalloc+0x190>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	687a      	ldr	r2, [r7, #4]
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	d867      	bhi.n	800dcba <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dbea:	4b44      	ldr	r3, [pc, #272]	@ (800dcfc <pvPortMalloc+0x194>)
 800dbec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dbee:	4b43      	ldr	r3, [pc, #268]	@ (800dcfc <pvPortMalloc+0x194>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dbf4:	e004      	b.n	800dc00 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800dbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dbfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dc00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	687a      	ldr	r2, [r7, #4]
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d903      	bls.n	800dc12 <pvPortMalloc+0xaa>
 800dc0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d1f1      	bne.n	800dbf6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dc12:	4b37      	ldr	r3, [pc, #220]	@ (800dcf0 <pvPortMalloc+0x188>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d04e      	beq.n	800dcba <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dc1c:	6a3b      	ldr	r3, [r7, #32]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	2208      	movs	r2, #8
 800dc22:	4413      	add	r3, r2
 800dc24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dc26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc28:	681a      	ldr	r2, [r3, #0]
 800dc2a:	6a3b      	ldr	r3, [r7, #32]
 800dc2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dc2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc30:	685a      	ldr	r2, [r3, #4]
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	1ad2      	subs	r2, r2, r3
 800dc36:	2308      	movs	r3, #8
 800dc38:	005b      	lsls	r3, r3, #1
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d922      	bls.n	800dc84 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dc3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	4413      	add	r3, r2
 800dc44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc46:	69bb      	ldr	r3, [r7, #24]
 800dc48:	f003 0307 	and.w	r3, r3, #7
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d00d      	beq.n	800dc6c <pvPortMalloc+0x104>
	__asm volatile
 800dc50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc54:	b672      	cpsid	i
 800dc56:	f383 8811 	msr	BASEPRI, r3
 800dc5a:	f3bf 8f6f 	isb	sy
 800dc5e:	f3bf 8f4f 	dsb	sy
 800dc62:	b662      	cpsie	i
 800dc64:	613b      	str	r3, [r7, #16]
}
 800dc66:	bf00      	nop
 800dc68:	bf00      	nop
 800dc6a:	e7fd      	b.n	800dc68 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dc6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc6e:	685a      	ldr	r2, [r3, #4]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	1ad2      	subs	r2, r2, r3
 800dc74:	69bb      	ldr	r3, [r7, #24]
 800dc76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dc78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc7a:	687a      	ldr	r2, [r7, #4]
 800dc7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dc7e:	69b8      	ldr	r0, [r7, #24]
 800dc80:	f000 f902 	bl	800de88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dc84:	4b1c      	ldr	r3, [pc, #112]	@ (800dcf8 <pvPortMalloc+0x190>)
 800dc86:	681a      	ldr	r2, [r3, #0]
 800dc88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc8a:	685b      	ldr	r3, [r3, #4]
 800dc8c:	1ad3      	subs	r3, r2, r3
 800dc8e:	4a1a      	ldr	r2, [pc, #104]	@ (800dcf8 <pvPortMalloc+0x190>)
 800dc90:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dc92:	4b19      	ldr	r3, [pc, #100]	@ (800dcf8 <pvPortMalloc+0x190>)
 800dc94:	681a      	ldr	r2, [r3, #0]
 800dc96:	4b1a      	ldr	r3, [pc, #104]	@ (800dd00 <pvPortMalloc+0x198>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d203      	bcs.n	800dca6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dc9e:	4b16      	ldr	r3, [pc, #88]	@ (800dcf8 <pvPortMalloc+0x190>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	4a17      	ldr	r2, [pc, #92]	@ (800dd00 <pvPortMalloc+0x198>)
 800dca4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dca8:	685a      	ldr	r2, [r3, #4]
 800dcaa:	4b12      	ldr	r3, [pc, #72]	@ (800dcf4 <pvPortMalloc+0x18c>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	431a      	orrs	r2, r3
 800dcb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcb2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dcb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dcba:	f7fe fad5 	bl	800c268 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dcbe:	69fb      	ldr	r3, [r7, #28]
 800dcc0:	f003 0307 	and.w	r3, r3, #7
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d00d      	beq.n	800dce4 <pvPortMalloc+0x17c>
	__asm volatile
 800dcc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dccc:	b672      	cpsid	i
 800dcce:	f383 8811 	msr	BASEPRI, r3
 800dcd2:	f3bf 8f6f 	isb	sy
 800dcd6:	f3bf 8f4f 	dsb	sy
 800dcda:	b662      	cpsie	i
 800dcdc:	60fb      	str	r3, [r7, #12]
}
 800dcde:	bf00      	nop
 800dce0:	bf00      	nop
 800dce2:	e7fd      	b.n	800dce0 <pvPortMalloc+0x178>
	return pvReturn;
 800dce4:	69fb      	ldr	r3, [r7, #28]
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3728      	adds	r7, #40	@ 0x28
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	20005a2c 	.word	0x20005a2c
 800dcf4:	20005a38 	.word	0x20005a38
 800dcf8:	20005a30 	.word	0x20005a30
 800dcfc:	20005a24 	.word	0x20005a24
 800dd00:	20005a34 	.word	0x20005a34

0800dd04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b086      	sub	sp, #24
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d04e      	beq.n	800ddb4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dd16:	2308      	movs	r3, #8
 800dd18:	425b      	negs	r3, r3
 800dd1a:	697a      	ldr	r2, [r7, #20]
 800dd1c:	4413      	add	r3, r2
 800dd1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	685a      	ldr	r2, [r3, #4]
 800dd28:	4b24      	ldr	r3, [pc, #144]	@ (800ddbc <vPortFree+0xb8>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4013      	ands	r3, r2
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d10d      	bne.n	800dd4e <vPortFree+0x4a>
	__asm volatile
 800dd32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd36:	b672      	cpsid	i
 800dd38:	f383 8811 	msr	BASEPRI, r3
 800dd3c:	f3bf 8f6f 	isb	sy
 800dd40:	f3bf 8f4f 	dsb	sy
 800dd44:	b662      	cpsie	i
 800dd46:	60fb      	str	r3, [r7, #12]
}
 800dd48:	bf00      	nop
 800dd4a:	bf00      	nop
 800dd4c:	e7fd      	b.n	800dd4a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dd4e:	693b      	ldr	r3, [r7, #16]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d00d      	beq.n	800dd72 <vPortFree+0x6e>
	__asm volatile
 800dd56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd5a:	b672      	cpsid	i
 800dd5c:	f383 8811 	msr	BASEPRI, r3
 800dd60:	f3bf 8f6f 	isb	sy
 800dd64:	f3bf 8f4f 	dsb	sy
 800dd68:	b662      	cpsie	i
 800dd6a:	60bb      	str	r3, [r7, #8]
}
 800dd6c:	bf00      	nop
 800dd6e:	bf00      	nop
 800dd70:	e7fd      	b.n	800dd6e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	685a      	ldr	r2, [r3, #4]
 800dd76:	4b11      	ldr	r3, [pc, #68]	@ (800ddbc <vPortFree+0xb8>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	4013      	ands	r3, r2
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d019      	beq.n	800ddb4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d115      	bne.n	800ddb4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	685a      	ldr	r2, [r3, #4]
 800dd8c:	4b0b      	ldr	r3, [pc, #44]	@ (800ddbc <vPortFree+0xb8>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	43db      	mvns	r3, r3
 800dd92:	401a      	ands	r2, r3
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dd98:	f7fe fa58 	bl	800c24c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	685a      	ldr	r2, [r3, #4]
 800dda0:	4b07      	ldr	r3, [pc, #28]	@ (800ddc0 <vPortFree+0xbc>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4413      	add	r3, r2
 800dda6:	4a06      	ldr	r2, [pc, #24]	@ (800ddc0 <vPortFree+0xbc>)
 800dda8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ddaa:	6938      	ldr	r0, [r7, #16]
 800ddac:	f000 f86c 	bl	800de88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ddb0:	f7fe fa5a 	bl	800c268 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ddb4:	bf00      	nop
 800ddb6:	3718      	adds	r7, #24
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}
 800ddbc:	20005a38 	.word	0x20005a38
 800ddc0:	20005a30 	.word	0x20005a30

0800ddc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ddc4:	b480      	push	{r7}
 800ddc6:	b085      	sub	sp, #20
 800ddc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ddca:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ddce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ddd0:	4b27      	ldr	r3, [pc, #156]	@ (800de70 <prvHeapInit+0xac>)
 800ddd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f003 0307 	and.w	r3, r3, #7
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d00c      	beq.n	800ddf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	3307      	adds	r3, #7
 800dde2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	f023 0307 	bic.w	r3, r3, #7
 800ddea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ddec:	68ba      	ldr	r2, [r7, #8]
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	1ad3      	subs	r3, r2, r3
 800ddf2:	4a1f      	ldr	r2, [pc, #124]	@ (800de70 <prvHeapInit+0xac>)
 800ddf4:	4413      	add	r3, r2
 800ddf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ddfc:	4a1d      	ldr	r2, [pc, #116]	@ (800de74 <prvHeapInit+0xb0>)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800de02:	4b1c      	ldr	r3, [pc, #112]	@ (800de74 <prvHeapInit+0xb0>)
 800de04:	2200      	movs	r2, #0
 800de06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	68ba      	ldr	r2, [r7, #8]
 800de0c:	4413      	add	r3, r2
 800de0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800de10:	2208      	movs	r2, #8
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	1a9b      	subs	r3, r3, r2
 800de16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f023 0307 	bic.w	r3, r3, #7
 800de1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	4a15      	ldr	r2, [pc, #84]	@ (800de78 <prvHeapInit+0xb4>)
 800de24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800de26:	4b14      	ldr	r3, [pc, #80]	@ (800de78 <prvHeapInit+0xb4>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	2200      	movs	r2, #0
 800de2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800de2e:	4b12      	ldr	r3, [pc, #72]	@ (800de78 <prvHeapInit+0xb4>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	2200      	movs	r2, #0
 800de34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	68fa      	ldr	r2, [r7, #12]
 800de3e:	1ad2      	subs	r2, r2, r3
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800de44:	4b0c      	ldr	r3, [pc, #48]	@ (800de78 <prvHeapInit+0xb4>)
 800de46:	681a      	ldr	r2, [r3, #0]
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	685b      	ldr	r3, [r3, #4]
 800de50:	4a0a      	ldr	r2, [pc, #40]	@ (800de7c <prvHeapInit+0xb8>)
 800de52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	685b      	ldr	r3, [r3, #4]
 800de58:	4a09      	ldr	r2, [pc, #36]	@ (800de80 <prvHeapInit+0xbc>)
 800de5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800de5c:	4b09      	ldr	r3, [pc, #36]	@ (800de84 <prvHeapInit+0xc0>)
 800de5e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800de62:	601a      	str	r2, [r3, #0]
}
 800de64:	bf00      	nop
 800de66:	3714      	adds	r7, #20
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr
 800de70:	20001e24 	.word	0x20001e24
 800de74:	20005a24 	.word	0x20005a24
 800de78:	20005a2c 	.word	0x20005a2c
 800de7c:	20005a34 	.word	0x20005a34
 800de80:	20005a30 	.word	0x20005a30
 800de84:	20005a38 	.word	0x20005a38

0800de88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800de88:	b480      	push	{r7}
 800de8a:	b085      	sub	sp, #20
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800de90:	4b28      	ldr	r3, [pc, #160]	@ (800df34 <prvInsertBlockIntoFreeList+0xac>)
 800de92:	60fb      	str	r3, [r7, #12]
 800de94:	e002      	b.n	800de9c <prvInsertBlockIntoFreeList+0x14>
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	60fb      	str	r3, [r7, #12]
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	687a      	ldr	r2, [r7, #4]
 800dea2:	429a      	cmp	r2, r3
 800dea4:	d8f7      	bhi.n	800de96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	68ba      	ldr	r2, [r7, #8]
 800deb0:	4413      	add	r3, r2
 800deb2:	687a      	ldr	r2, [r7, #4]
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d108      	bne.n	800deca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	685a      	ldr	r2, [r3, #4]
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	685b      	ldr	r3, [r3, #4]
 800dec0:	441a      	add	r2, r3
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	685b      	ldr	r3, [r3, #4]
 800ded2:	68ba      	ldr	r2, [r7, #8]
 800ded4:	441a      	add	r2, r3
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	429a      	cmp	r2, r3
 800dedc:	d118      	bne.n	800df10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	681a      	ldr	r2, [r3, #0]
 800dee2:	4b15      	ldr	r3, [pc, #84]	@ (800df38 <prvInsertBlockIntoFreeList+0xb0>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d00d      	beq.n	800df06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	685a      	ldr	r2, [r3, #4]
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	441a      	add	r2, r3
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	681a      	ldr	r2, [r3, #0]
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	601a      	str	r2, [r3, #0]
 800df04:	e008      	b.n	800df18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800df06:	4b0c      	ldr	r3, [pc, #48]	@ (800df38 <prvInsertBlockIntoFreeList+0xb0>)
 800df08:	681a      	ldr	r2, [r3, #0]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	601a      	str	r2, [r3, #0]
 800df0e:	e003      	b.n	800df18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681a      	ldr	r2, [r3, #0]
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800df18:	68fa      	ldr	r2, [r7, #12]
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	429a      	cmp	r2, r3
 800df1e:	d002      	beq.n	800df26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	687a      	ldr	r2, [r7, #4]
 800df24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df26:	bf00      	nop
 800df28:	3714      	adds	r7, #20
 800df2a:	46bd      	mov	sp, r7
 800df2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df30:	4770      	bx	lr
 800df32:	bf00      	nop
 800df34:	20005a24 	.word	0x20005a24
 800df38:	20005a2c 	.word	0x20005a2c

0800df3c <__cvt>:
 800df3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df3e:	ed2d 8b02 	vpush	{d8}
 800df42:	eeb0 8b40 	vmov.f64	d8, d0
 800df46:	b085      	sub	sp, #20
 800df48:	4617      	mov	r7, r2
 800df4a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800df4c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800df4e:	ee18 2a90 	vmov	r2, s17
 800df52:	f025 0520 	bic.w	r5, r5, #32
 800df56:	2a00      	cmp	r2, #0
 800df58:	bfb6      	itet	lt
 800df5a:	222d      	movlt	r2, #45	@ 0x2d
 800df5c:	2200      	movge	r2, #0
 800df5e:	eeb1 8b40 	vneglt.f64	d8, d0
 800df62:	2d46      	cmp	r5, #70	@ 0x46
 800df64:	460c      	mov	r4, r1
 800df66:	701a      	strb	r2, [r3, #0]
 800df68:	d004      	beq.n	800df74 <__cvt+0x38>
 800df6a:	2d45      	cmp	r5, #69	@ 0x45
 800df6c:	d100      	bne.n	800df70 <__cvt+0x34>
 800df6e:	3401      	adds	r4, #1
 800df70:	2102      	movs	r1, #2
 800df72:	e000      	b.n	800df76 <__cvt+0x3a>
 800df74:	2103      	movs	r1, #3
 800df76:	ab03      	add	r3, sp, #12
 800df78:	9301      	str	r3, [sp, #4]
 800df7a:	ab02      	add	r3, sp, #8
 800df7c:	9300      	str	r3, [sp, #0]
 800df7e:	4622      	mov	r2, r4
 800df80:	4633      	mov	r3, r6
 800df82:	eeb0 0b48 	vmov.f64	d0, d8
 800df86:	f001 f993 	bl	800f2b0 <_dtoa_r>
 800df8a:	2d47      	cmp	r5, #71	@ 0x47
 800df8c:	d114      	bne.n	800dfb8 <__cvt+0x7c>
 800df8e:	07fb      	lsls	r3, r7, #31
 800df90:	d50a      	bpl.n	800dfa8 <__cvt+0x6c>
 800df92:	1902      	adds	r2, r0, r4
 800df94:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800df98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df9c:	bf08      	it	eq
 800df9e:	9203      	streq	r2, [sp, #12]
 800dfa0:	2130      	movs	r1, #48	@ 0x30
 800dfa2:	9b03      	ldr	r3, [sp, #12]
 800dfa4:	4293      	cmp	r3, r2
 800dfa6:	d319      	bcc.n	800dfdc <__cvt+0xa0>
 800dfa8:	9b03      	ldr	r3, [sp, #12]
 800dfaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dfac:	1a1b      	subs	r3, r3, r0
 800dfae:	6013      	str	r3, [r2, #0]
 800dfb0:	b005      	add	sp, #20
 800dfb2:	ecbd 8b02 	vpop	{d8}
 800dfb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfb8:	2d46      	cmp	r5, #70	@ 0x46
 800dfba:	eb00 0204 	add.w	r2, r0, r4
 800dfbe:	d1e9      	bne.n	800df94 <__cvt+0x58>
 800dfc0:	7803      	ldrb	r3, [r0, #0]
 800dfc2:	2b30      	cmp	r3, #48	@ 0x30
 800dfc4:	d107      	bne.n	800dfd6 <__cvt+0x9a>
 800dfc6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800dfca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfce:	bf1c      	itt	ne
 800dfd0:	f1c4 0401 	rsbne	r4, r4, #1
 800dfd4:	6034      	strne	r4, [r6, #0]
 800dfd6:	6833      	ldr	r3, [r6, #0]
 800dfd8:	441a      	add	r2, r3
 800dfda:	e7db      	b.n	800df94 <__cvt+0x58>
 800dfdc:	1c5c      	adds	r4, r3, #1
 800dfde:	9403      	str	r4, [sp, #12]
 800dfe0:	7019      	strb	r1, [r3, #0]
 800dfe2:	e7de      	b.n	800dfa2 <__cvt+0x66>

0800dfe4 <__exponent>:
 800dfe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfe6:	2900      	cmp	r1, #0
 800dfe8:	bfba      	itte	lt
 800dfea:	4249      	neglt	r1, r1
 800dfec:	232d      	movlt	r3, #45	@ 0x2d
 800dfee:	232b      	movge	r3, #43	@ 0x2b
 800dff0:	2909      	cmp	r1, #9
 800dff2:	7002      	strb	r2, [r0, #0]
 800dff4:	7043      	strb	r3, [r0, #1]
 800dff6:	dd29      	ble.n	800e04c <__exponent+0x68>
 800dff8:	f10d 0307 	add.w	r3, sp, #7
 800dffc:	461d      	mov	r5, r3
 800dffe:	270a      	movs	r7, #10
 800e000:	461a      	mov	r2, r3
 800e002:	fbb1 f6f7 	udiv	r6, r1, r7
 800e006:	fb07 1416 	mls	r4, r7, r6, r1
 800e00a:	3430      	adds	r4, #48	@ 0x30
 800e00c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e010:	460c      	mov	r4, r1
 800e012:	2c63      	cmp	r4, #99	@ 0x63
 800e014:	f103 33ff 	add.w	r3, r3, #4294967295
 800e018:	4631      	mov	r1, r6
 800e01a:	dcf1      	bgt.n	800e000 <__exponent+0x1c>
 800e01c:	3130      	adds	r1, #48	@ 0x30
 800e01e:	1e94      	subs	r4, r2, #2
 800e020:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e024:	1c41      	adds	r1, r0, #1
 800e026:	4623      	mov	r3, r4
 800e028:	42ab      	cmp	r3, r5
 800e02a:	d30a      	bcc.n	800e042 <__exponent+0x5e>
 800e02c:	f10d 0309 	add.w	r3, sp, #9
 800e030:	1a9b      	subs	r3, r3, r2
 800e032:	42ac      	cmp	r4, r5
 800e034:	bf88      	it	hi
 800e036:	2300      	movhi	r3, #0
 800e038:	3302      	adds	r3, #2
 800e03a:	4403      	add	r3, r0
 800e03c:	1a18      	subs	r0, r3, r0
 800e03e:	b003      	add	sp, #12
 800e040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e042:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e046:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e04a:	e7ed      	b.n	800e028 <__exponent+0x44>
 800e04c:	2330      	movs	r3, #48	@ 0x30
 800e04e:	3130      	adds	r1, #48	@ 0x30
 800e050:	7083      	strb	r3, [r0, #2]
 800e052:	70c1      	strb	r1, [r0, #3]
 800e054:	1d03      	adds	r3, r0, #4
 800e056:	e7f1      	b.n	800e03c <__exponent+0x58>

0800e058 <_printf_float>:
 800e058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e05c:	b08d      	sub	sp, #52	@ 0x34
 800e05e:	460c      	mov	r4, r1
 800e060:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e064:	4616      	mov	r6, r2
 800e066:	461f      	mov	r7, r3
 800e068:	4605      	mov	r5, r0
 800e06a:	f001 f80b 	bl	800f084 <_localeconv_r>
 800e06e:	f8d0 b000 	ldr.w	fp, [r0]
 800e072:	4658      	mov	r0, fp
 800e074:	f7f2 f934 	bl	80002e0 <strlen>
 800e078:	2300      	movs	r3, #0
 800e07a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e07c:	f8d8 3000 	ldr.w	r3, [r8]
 800e080:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e084:	6822      	ldr	r2, [r4, #0]
 800e086:	9005      	str	r0, [sp, #20]
 800e088:	3307      	adds	r3, #7
 800e08a:	f023 0307 	bic.w	r3, r3, #7
 800e08e:	f103 0108 	add.w	r1, r3, #8
 800e092:	f8c8 1000 	str.w	r1, [r8]
 800e096:	ed93 0b00 	vldr	d0, [r3]
 800e09a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800e2f8 <_printf_float+0x2a0>
 800e09e:	eeb0 7bc0 	vabs.f64	d7, d0
 800e0a2:	eeb4 7b46 	vcmp.f64	d7, d6
 800e0a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0aa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800e0ae:	dd24      	ble.n	800e0fa <_printf_float+0xa2>
 800e0b0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0b8:	d502      	bpl.n	800e0c0 <_printf_float+0x68>
 800e0ba:	232d      	movs	r3, #45	@ 0x2d
 800e0bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e0c0:	498f      	ldr	r1, [pc, #572]	@ (800e300 <_printf_float+0x2a8>)
 800e0c2:	4b90      	ldr	r3, [pc, #576]	@ (800e304 <_printf_float+0x2ac>)
 800e0c4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800e0c8:	bf8c      	ite	hi
 800e0ca:	4688      	movhi	r8, r1
 800e0cc:	4698      	movls	r8, r3
 800e0ce:	f022 0204 	bic.w	r2, r2, #4
 800e0d2:	2303      	movs	r3, #3
 800e0d4:	6123      	str	r3, [r4, #16]
 800e0d6:	6022      	str	r2, [r4, #0]
 800e0d8:	f04f 0a00 	mov.w	sl, #0
 800e0dc:	9700      	str	r7, [sp, #0]
 800e0de:	4633      	mov	r3, r6
 800e0e0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e0e2:	4621      	mov	r1, r4
 800e0e4:	4628      	mov	r0, r5
 800e0e6:	f000 f9d1 	bl	800e48c <_printf_common>
 800e0ea:	3001      	adds	r0, #1
 800e0ec:	f040 8089 	bne.w	800e202 <_printf_float+0x1aa>
 800e0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e0f4:	b00d      	add	sp, #52	@ 0x34
 800e0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0fa:	eeb4 0b40 	vcmp.f64	d0, d0
 800e0fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e102:	d709      	bvc.n	800e118 <_printf_float+0xc0>
 800e104:	ee10 3a90 	vmov	r3, s1
 800e108:	2b00      	cmp	r3, #0
 800e10a:	bfbc      	itt	lt
 800e10c:	232d      	movlt	r3, #45	@ 0x2d
 800e10e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e112:	497d      	ldr	r1, [pc, #500]	@ (800e308 <_printf_float+0x2b0>)
 800e114:	4b7d      	ldr	r3, [pc, #500]	@ (800e30c <_printf_float+0x2b4>)
 800e116:	e7d5      	b.n	800e0c4 <_printf_float+0x6c>
 800e118:	6863      	ldr	r3, [r4, #4]
 800e11a:	1c59      	adds	r1, r3, #1
 800e11c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800e120:	d139      	bne.n	800e196 <_printf_float+0x13e>
 800e122:	2306      	movs	r3, #6
 800e124:	6063      	str	r3, [r4, #4]
 800e126:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e12a:	2300      	movs	r3, #0
 800e12c:	6022      	str	r2, [r4, #0]
 800e12e:	9303      	str	r3, [sp, #12]
 800e130:	ab0a      	add	r3, sp, #40	@ 0x28
 800e132:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e136:	ab09      	add	r3, sp, #36	@ 0x24
 800e138:	9300      	str	r3, [sp, #0]
 800e13a:	6861      	ldr	r1, [r4, #4]
 800e13c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e140:	4628      	mov	r0, r5
 800e142:	f7ff fefb 	bl	800df3c <__cvt>
 800e146:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e14a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e14c:	4680      	mov	r8, r0
 800e14e:	d129      	bne.n	800e1a4 <_printf_float+0x14c>
 800e150:	1cc8      	adds	r0, r1, #3
 800e152:	db02      	blt.n	800e15a <_printf_float+0x102>
 800e154:	6863      	ldr	r3, [r4, #4]
 800e156:	4299      	cmp	r1, r3
 800e158:	dd41      	ble.n	800e1de <_printf_float+0x186>
 800e15a:	f1a9 0902 	sub.w	r9, r9, #2
 800e15e:	fa5f f989 	uxtb.w	r9, r9
 800e162:	3901      	subs	r1, #1
 800e164:	464a      	mov	r2, r9
 800e166:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e16a:	9109      	str	r1, [sp, #36]	@ 0x24
 800e16c:	f7ff ff3a 	bl	800dfe4 <__exponent>
 800e170:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e172:	1813      	adds	r3, r2, r0
 800e174:	2a01      	cmp	r2, #1
 800e176:	4682      	mov	sl, r0
 800e178:	6123      	str	r3, [r4, #16]
 800e17a:	dc02      	bgt.n	800e182 <_printf_float+0x12a>
 800e17c:	6822      	ldr	r2, [r4, #0]
 800e17e:	07d2      	lsls	r2, r2, #31
 800e180:	d501      	bpl.n	800e186 <_printf_float+0x12e>
 800e182:	3301      	adds	r3, #1
 800e184:	6123      	str	r3, [r4, #16]
 800e186:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d0a6      	beq.n	800e0dc <_printf_float+0x84>
 800e18e:	232d      	movs	r3, #45	@ 0x2d
 800e190:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e194:	e7a2      	b.n	800e0dc <_printf_float+0x84>
 800e196:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e19a:	d1c4      	bne.n	800e126 <_printf_float+0xce>
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d1c2      	bne.n	800e126 <_printf_float+0xce>
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	e7bf      	b.n	800e124 <_printf_float+0xcc>
 800e1a4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e1a8:	d9db      	bls.n	800e162 <_printf_float+0x10a>
 800e1aa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800e1ae:	d118      	bne.n	800e1e2 <_printf_float+0x18a>
 800e1b0:	2900      	cmp	r1, #0
 800e1b2:	6863      	ldr	r3, [r4, #4]
 800e1b4:	dd0b      	ble.n	800e1ce <_printf_float+0x176>
 800e1b6:	6121      	str	r1, [r4, #16]
 800e1b8:	b913      	cbnz	r3, 800e1c0 <_printf_float+0x168>
 800e1ba:	6822      	ldr	r2, [r4, #0]
 800e1bc:	07d0      	lsls	r0, r2, #31
 800e1be:	d502      	bpl.n	800e1c6 <_printf_float+0x16e>
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	440b      	add	r3, r1
 800e1c4:	6123      	str	r3, [r4, #16]
 800e1c6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e1c8:	f04f 0a00 	mov.w	sl, #0
 800e1cc:	e7db      	b.n	800e186 <_printf_float+0x12e>
 800e1ce:	b913      	cbnz	r3, 800e1d6 <_printf_float+0x17e>
 800e1d0:	6822      	ldr	r2, [r4, #0]
 800e1d2:	07d2      	lsls	r2, r2, #31
 800e1d4:	d501      	bpl.n	800e1da <_printf_float+0x182>
 800e1d6:	3302      	adds	r3, #2
 800e1d8:	e7f4      	b.n	800e1c4 <_printf_float+0x16c>
 800e1da:	2301      	movs	r3, #1
 800e1dc:	e7f2      	b.n	800e1c4 <_printf_float+0x16c>
 800e1de:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800e1e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e1e4:	4299      	cmp	r1, r3
 800e1e6:	db05      	blt.n	800e1f4 <_printf_float+0x19c>
 800e1e8:	6823      	ldr	r3, [r4, #0]
 800e1ea:	6121      	str	r1, [r4, #16]
 800e1ec:	07d8      	lsls	r0, r3, #31
 800e1ee:	d5ea      	bpl.n	800e1c6 <_printf_float+0x16e>
 800e1f0:	1c4b      	adds	r3, r1, #1
 800e1f2:	e7e7      	b.n	800e1c4 <_printf_float+0x16c>
 800e1f4:	2900      	cmp	r1, #0
 800e1f6:	bfd4      	ite	le
 800e1f8:	f1c1 0202 	rsble	r2, r1, #2
 800e1fc:	2201      	movgt	r2, #1
 800e1fe:	4413      	add	r3, r2
 800e200:	e7e0      	b.n	800e1c4 <_printf_float+0x16c>
 800e202:	6823      	ldr	r3, [r4, #0]
 800e204:	055a      	lsls	r2, r3, #21
 800e206:	d407      	bmi.n	800e218 <_printf_float+0x1c0>
 800e208:	6923      	ldr	r3, [r4, #16]
 800e20a:	4642      	mov	r2, r8
 800e20c:	4631      	mov	r1, r6
 800e20e:	4628      	mov	r0, r5
 800e210:	47b8      	blx	r7
 800e212:	3001      	adds	r0, #1
 800e214:	d12a      	bne.n	800e26c <_printf_float+0x214>
 800e216:	e76b      	b.n	800e0f0 <_printf_float+0x98>
 800e218:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e21c:	f240 80e0 	bls.w	800e3e0 <_printf_float+0x388>
 800e220:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e224:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e22c:	d133      	bne.n	800e296 <_printf_float+0x23e>
 800e22e:	4a38      	ldr	r2, [pc, #224]	@ (800e310 <_printf_float+0x2b8>)
 800e230:	2301      	movs	r3, #1
 800e232:	4631      	mov	r1, r6
 800e234:	4628      	mov	r0, r5
 800e236:	47b8      	blx	r7
 800e238:	3001      	adds	r0, #1
 800e23a:	f43f af59 	beq.w	800e0f0 <_printf_float+0x98>
 800e23e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e242:	4543      	cmp	r3, r8
 800e244:	db02      	blt.n	800e24c <_printf_float+0x1f4>
 800e246:	6823      	ldr	r3, [r4, #0]
 800e248:	07d8      	lsls	r0, r3, #31
 800e24a:	d50f      	bpl.n	800e26c <_printf_float+0x214>
 800e24c:	9b05      	ldr	r3, [sp, #20]
 800e24e:	465a      	mov	r2, fp
 800e250:	4631      	mov	r1, r6
 800e252:	4628      	mov	r0, r5
 800e254:	47b8      	blx	r7
 800e256:	3001      	adds	r0, #1
 800e258:	f43f af4a 	beq.w	800e0f0 <_printf_float+0x98>
 800e25c:	f04f 0900 	mov.w	r9, #0
 800e260:	f108 38ff 	add.w	r8, r8, #4294967295
 800e264:	f104 0a1a 	add.w	sl, r4, #26
 800e268:	45c8      	cmp	r8, r9
 800e26a:	dc09      	bgt.n	800e280 <_printf_float+0x228>
 800e26c:	6823      	ldr	r3, [r4, #0]
 800e26e:	079b      	lsls	r3, r3, #30
 800e270:	f100 8107 	bmi.w	800e482 <_printf_float+0x42a>
 800e274:	68e0      	ldr	r0, [r4, #12]
 800e276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e278:	4298      	cmp	r0, r3
 800e27a:	bfb8      	it	lt
 800e27c:	4618      	movlt	r0, r3
 800e27e:	e739      	b.n	800e0f4 <_printf_float+0x9c>
 800e280:	2301      	movs	r3, #1
 800e282:	4652      	mov	r2, sl
 800e284:	4631      	mov	r1, r6
 800e286:	4628      	mov	r0, r5
 800e288:	47b8      	blx	r7
 800e28a:	3001      	adds	r0, #1
 800e28c:	f43f af30 	beq.w	800e0f0 <_printf_float+0x98>
 800e290:	f109 0901 	add.w	r9, r9, #1
 800e294:	e7e8      	b.n	800e268 <_printf_float+0x210>
 800e296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e298:	2b00      	cmp	r3, #0
 800e29a:	dc3b      	bgt.n	800e314 <_printf_float+0x2bc>
 800e29c:	4a1c      	ldr	r2, [pc, #112]	@ (800e310 <_printf_float+0x2b8>)
 800e29e:	2301      	movs	r3, #1
 800e2a0:	4631      	mov	r1, r6
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	47b8      	blx	r7
 800e2a6:	3001      	adds	r0, #1
 800e2a8:	f43f af22 	beq.w	800e0f0 <_printf_float+0x98>
 800e2ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e2b0:	ea59 0303 	orrs.w	r3, r9, r3
 800e2b4:	d102      	bne.n	800e2bc <_printf_float+0x264>
 800e2b6:	6823      	ldr	r3, [r4, #0]
 800e2b8:	07d9      	lsls	r1, r3, #31
 800e2ba:	d5d7      	bpl.n	800e26c <_printf_float+0x214>
 800e2bc:	9b05      	ldr	r3, [sp, #20]
 800e2be:	465a      	mov	r2, fp
 800e2c0:	4631      	mov	r1, r6
 800e2c2:	4628      	mov	r0, r5
 800e2c4:	47b8      	blx	r7
 800e2c6:	3001      	adds	r0, #1
 800e2c8:	f43f af12 	beq.w	800e0f0 <_printf_float+0x98>
 800e2cc:	f04f 0a00 	mov.w	sl, #0
 800e2d0:	f104 0b1a 	add.w	fp, r4, #26
 800e2d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2d6:	425b      	negs	r3, r3
 800e2d8:	4553      	cmp	r3, sl
 800e2da:	dc01      	bgt.n	800e2e0 <_printf_float+0x288>
 800e2dc:	464b      	mov	r3, r9
 800e2de:	e794      	b.n	800e20a <_printf_float+0x1b2>
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	465a      	mov	r2, fp
 800e2e4:	4631      	mov	r1, r6
 800e2e6:	4628      	mov	r0, r5
 800e2e8:	47b8      	blx	r7
 800e2ea:	3001      	adds	r0, #1
 800e2ec:	f43f af00 	beq.w	800e0f0 <_printf_float+0x98>
 800e2f0:	f10a 0a01 	add.w	sl, sl, #1
 800e2f4:	e7ee      	b.n	800e2d4 <_printf_float+0x27c>
 800e2f6:	bf00      	nop
 800e2f8:	ffffffff 	.word	0xffffffff
 800e2fc:	7fefffff 	.word	0x7fefffff
 800e300:	08012b40 	.word	0x08012b40
 800e304:	08012b3c 	.word	0x08012b3c
 800e308:	08012b48 	.word	0x08012b48
 800e30c:	08012b44 	.word	0x08012b44
 800e310:	08012b4c 	.word	0x08012b4c
 800e314:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e316:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e31a:	4553      	cmp	r3, sl
 800e31c:	bfa8      	it	ge
 800e31e:	4653      	movge	r3, sl
 800e320:	2b00      	cmp	r3, #0
 800e322:	4699      	mov	r9, r3
 800e324:	dc37      	bgt.n	800e396 <_printf_float+0x33e>
 800e326:	2300      	movs	r3, #0
 800e328:	9307      	str	r3, [sp, #28]
 800e32a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e32e:	f104 021a 	add.w	r2, r4, #26
 800e332:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e334:	9907      	ldr	r1, [sp, #28]
 800e336:	9306      	str	r3, [sp, #24]
 800e338:	eba3 0309 	sub.w	r3, r3, r9
 800e33c:	428b      	cmp	r3, r1
 800e33e:	dc31      	bgt.n	800e3a4 <_printf_float+0x34c>
 800e340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e342:	459a      	cmp	sl, r3
 800e344:	dc3b      	bgt.n	800e3be <_printf_float+0x366>
 800e346:	6823      	ldr	r3, [r4, #0]
 800e348:	07da      	lsls	r2, r3, #31
 800e34a:	d438      	bmi.n	800e3be <_printf_float+0x366>
 800e34c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e34e:	ebaa 0903 	sub.w	r9, sl, r3
 800e352:	9b06      	ldr	r3, [sp, #24]
 800e354:	ebaa 0303 	sub.w	r3, sl, r3
 800e358:	4599      	cmp	r9, r3
 800e35a:	bfa8      	it	ge
 800e35c:	4699      	movge	r9, r3
 800e35e:	f1b9 0f00 	cmp.w	r9, #0
 800e362:	dc34      	bgt.n	800e3ce <_printf_float+0x376>
 800e364:	f04f 0800 	mov.w	r8, #0
 800e368:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e36c:	f104 0b1a 	add.w	fp, r4, #26
 800e370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e372:	ebaa 0303 	sub.w	r3, sl, r3
 800e376:	eba3 0309 	sub.w	r3, r3, r9
 800e37a:	4543      	cmp	r3, r8
 800e37c:	f77f af76 	ble.w	800e26c <_printf_float+0x214>
 800e380:	2301      	movs	r3, #1
 800e382:	465a      	mov	r2, fp
 800e384:	4631      	mov	r1, r6
 800e386:	4628      	mov	r0, r5
 800e388:	47b8      	blx	r7
 800e38a:	3001      	adds	r0, #1
 800e38c:	f43f aeb0 	beq.w	800e0f0 <_printf_float+0x98>
 800e390:	f108 0801 	add.w	r8, r8, #1
 800e394:	e7ec      	b.n	800e370 <_printf_float+0x318>
 800e396:	4642      	mov	r2, r8
 800e398:	4631      	mov	r1, r6
 800e39a:	4628      	mov	r0, r5
 800e39c:	47b8      	blx	r7
 800e39e:	3001      	adds	r0, #1
 800e3a0:	d1c1      	bne.n	800e326 <_printf_float+0x2ce>
 800e3a2:	e6a5      	b.n	800e0f0 <_printf_float+0x98>
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	4631      	mov	r1, r6
 800e3a8:	4628      	mov	r0, r5
 800e3aa:	9206      	str	r2, [sp, #24]
 800e3ac:	47b8      	blx	r7
 800e3ae:	3001      	adds	r0, #1
 800e3b0:	f43f ae9e 	beq.w	800e0f0 <_printf_float+0x98>
 800e3b4:	9b07      	ldr	r3, [sp, #28]
 800e3b6:	9a06      	ldr	r2, [sp, #24]
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	9307      	str	r3, [sp, #28]
 800e3bc:	e7b9      	b.n	800e332 <_printf_float+0x2da>
 800e3be:	9b05      	ldr	r3, [sp, #20]
 800e3c0:	465a      	mov	r2, fp
 800e3c2:	4631      	mov	r1, r6
 800e3c4:	4628      	mov	r0, r5
 800e3c6:	47b8      	blx	r7
 800e3c8:	3001      	adds	r0, #1
 800e3ca:	d1bf      	bne.n	800e34c <_printf_float+0x2f4>
 800e3cc:	e690      	b.n	800e0f0 <_printf_float+0x98>
 800e3ce:	9a06      	ldr	r2, [sp, #24]
 800e3d0:	464b      	mov	r3, r9
 800e3d2:	4442      	add	r2, r8
 800e3d4:	4631      	mov	r1, r6
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	47b8      	blx	r7
 800e3da:	3001      	adds	r0, #1
 800e3dc:	d1c2      	bne.n	800e364 <_printf_float+0x30c>
 800e3de:	e687      	b.n	800e0f0 <_printf_float+0x98>
 800e3e0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800e3e4:	f1b9 0f01 	cmp.w	r9, #1
 800e3e8:	dc01      	bgt.n	800e3ee <_printf_float+0x396>
 800e3ea:	07db      	lsls	r3, r3, #31
 800e3ec:	d536      	bpl.n	800e45c <_printf_float+0x404>
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	4642      	mov	r2, r8
 800e3f2:	4631      	mov	r1, r6
 800e3f4:	4628      	mov	r0, r5
 800e3f6:	47b8      	blx	r7
 800e3f8:	3001      	adds	r0, #1
 800e3fa:	f43f ae79 	beq.w	800e0f0 <_printf_float+0x98>
 800e3fe:	9b05      	ldr	r3, [sp, #20]
 800e400:	465a      	mov	r2, fp
 800e402:	4631      	mov	r1, r6
 800e404:	4628      	mov	r0, r5
 800e406:	47b8      	blx	r7
 800e408:	3001      	adds	r0, #1
 800e40a:	f43f ae71 	beq.w	800e0f0 <_printf_float+0x98>
 800e40e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e412:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e41a:	f109 39ff 	add.w	r9, r9, #4294967295
 800e41e:	d018      	beq.n	800e452 <_printf_float+0x3fa>
 800e420:	464b      	mov	r3, r9
 800e422:	f108 0201 	add.w	r2, r8, #1
 800e426:	4631      	mov	r1, r6
 800e428:	4628      	mov	r0, r5
 800e42a:	47b8      	blx	r7
 800e42c:	3001      	adds	r0, #1
 800e42e:	d10c      	bne.n	800e44a <_printf_float+0x3f2>
 800e430:	e65e      	b.n	800e0f0 <_printf_float+0x98>
 800e432:	2301      	movs	r3, #1
 800e434:	465a      	mov	r2, fp
 800e436:	4631      	mov	r1, r6
 800e438:	4628      	mov	r0, r5
 800e43a:	47b8      	blx	r7
 800e43c:	3001      	adds	r0, #1
 800e43e:	f43f ae57 	beq.w	800e0f0 <_printf_float+0x98>
 800e442:	f108 0801 	add.w	r8, r8, #1
 800e446:	45c8      	cmp	r8, r9
 800e448:	dbf3      	blt.n	800e432 <_printf_float+0x3da>
 800e44a:	4653      	mov	r3, sl
 800e44c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e450:	e6dc      	b.n	800e20c <_printf_float+0x1b4>
 800e452:	f04f 0800 	mov.w	r8, #0
 800e456:	f104 0b1a 	add.w	fp, r4, #26
 800e45a:	e7f4      	b.n	800e446 <_printf_float+0x3ee>
 800e45c:	2301      	movs	r3, #1
 800e45e:	4642      	mov	r2, r8
 800e460:	e7e1      	b.n	800e426 <_printf_float+0x3ce>
 800e462:	2301      	movs	r3, #1
 800e464:	464a      	mov	r2, r9
 800e466:	4631      	mov	r1, r6
 800e468:	4628      	mov	r0, r5
 800e46a:	47b8      	blx	r7
 800e46c:	3001      	adds	r0, #1
 800e46e:	f43f ae3f 	beq.w	800e0f0 <_printf_float+0x98>
 800e472:	f108 0801 	add.w	r8, r8, #1
 800e476:	68e3      	ldr	r3, [r4, #12]
 800e478:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e47a:	1a5b      	subs	r3, r3, r1
 800e47c:	4543      	cmp	r3, r8
 800e47e:	dcf0      	bgt.n	800e462 <_printf_float+0x40a>
 800e480:	e6f8      	b.n	800e274 <_printf_float+0x21c>
 800e482:	f04f 0800 	mov.w	r8, #0
 800e486:	f104 0919 	add.w	r9, r4, #25
 800e48a:	e7f4      	b.n	800e476 <_printf_float+0x41e>

0800e48c <_printf_common>:
 800e48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e490:	4616      	mov	r6, r2
 800e492:	4698      	mov	r8, r3
 800e494:	688a      	ldr	r2, [r1, #8]
 800e496:	690b      	ldr	r3, [r1, #16]
 800e498:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e49c:	4293      	cmp	r3, r2
 800e49e:	bfb8      	it	lt
 800e4a0:	4613      	movlt	r3, r2
 800e4a2:	6033      	str	r3, [r6, #0]
 800e4a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e4a8:	4607      	mov	r7, r0
 800e4aa:	460c      	mov	r4, r1
 800e4ac:	b10a      	cbz	r2, 800e4b2 <_printf_common+0x26>
 800e4ae:	3301      	adds	r3, #1
 800e4b0:	6033      	str	r3, [r6, #0]
 800e4b2:	6823      	ldr	r3, [r4, #0]
 800e4b4:	0699      	lsls	r1, r3, #26
 800e4b6:	bf42      	ittt	mi
 800e4b8:	6833      	ldrmi	r3, [r6, #0]
 800e4ba:	3302      	addmi	r3, #2
 800e4bc:	6033      	strmi	r3, [r6, #0]
 800e4be:	6825      	ldr	r5, [r4, #0]
 800e4c0:	f015 0506 	ands.w	r5, r5, #6
 800e4c4:	d106      	bne.n	800e4d4 <_printf_common+0x48>
 800e4c6:	f104 0a19 	add.w	sl, r4, #25
 800e4ca:	68e3      	ldr	r3, [r4, #12]
 800e4cc:	6832      	ldr	r2, [r6, #0]
 800e4ce:	1a9b      	subs	r3, r3, r2
 800e4d0:	42ab      	cmp	r3, r5
 800e4d2:	dc26      	bgt.n	800e522 <_printf_common+0x96>
 800e4d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e4d8:	6822      	ldr	r2, [r4, #0]
 800e4da:	3b00      	subs	r3, #0
 800e4dc:	bf18      	it	ne
 800e4de:	2301      	movne	r3, #1
 800e4e0:	0692      	lsls	r2, r2, #26
 800e4e2:	d42b      	bmi.n	800e53c <_printf_common+0xb0>
 800e4e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e4e8:	4641      	mov	r1, r8
 800e4ea:	4638      	mov	r0, r7
 800e4ec:	47c8      	blx	r9
 800e4ee:	3001      	adds	r0, #1
 800e4f0:	d01e      	beq.n	800e530 <_printf_common+0xa4>
 800e4f2:	6823      	ldr	r3, [r4, #0]
 800e4f4:	6922      	ldr	r2, [r4, #16]
 800e4f6:	f003 0306 	and.w	r3, r3, #6
 800e4fa:	2b04      	cmp	r3, #4
 800e4fc:	bf02      	ittt	eq
 800e4fe:	68e5      	ldreq	r5, [r4, #12]
 800e500:	6833      	ldreq	r3, [r6, #0]
 800e502:	1aed      	subeq	r5, r5, r3
 800e504:	68a3      	ldr	r3, [r4, #8]
 800e506:	bf0c      	ite	eq
 800e508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e50c:	2500      	movne	r5, #0
 800e50e:	4293      	cmp	r3, r2
 800e510:	bfc4      	itt	gt
 800e512:	1a9b      	subgt	r3, r3, r2
 800e514:	18ed      	addgt	r5, r5, r3
 800e516:	2600      	movs	r6, #0
 800e518:	341a      	adds	r4, #26
 800e51a:	42b5      	cmp	r5, r6
 800e51c:	d11a      	bne.n	800e554 <_printf_common+0xc8>
 800e51e:	2000      	movs	r0, #0
 800e520:	e008      	b.n	800e534 <_printf_common+0xa8>
 800e522:	2301      	movs	r3, #1
 800e524:	4652      	mov	r2, sl
 800e526:	4641      	mov	r1, r8
 800e528:	4638      	mov	r0, r7
 800e52a:	47c8      	blx	r9
 800e52c:	3001      	adds	r0, #1
 800e52e:	d103      	bne.n	800e538 <_printf_common+0xac>
 800e530:	f04f 30ff 	mov.w	r0, #4294967295
 800e534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e538:	3501      	adds	r5, #1
 800e53a:	e7c6      	b.n	800e4ca <_printf_common+0x3e>
 800e53c:	18e1      	adds	r1, r4, r3
 800e53e:	1c5a      	adds	r2, r3, #1
 800e540:	2030      	movs	r0, #48	@ 0x30
 800e542:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e546:	4422      	add	r2, r4
 800e548:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e54c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e550:	3302      	adds	r3, #2
 800e552:	e7c7      	b.n	800e4e4 <_printf_common+0x58>
 800e554:	2301      	movs	r3, #1
 800e556:	4622      	mov	r2, r4
 800e558:	4641      	mov	r1, r8
 800e55a:	4638      	mov	r0, r7
 800e55c:	47c8      	blx	r9
 800e55e:	3001      	adds	r0, #1
 800e560:	d0e6      	beq.n	800e530 <_printf_common+0xa4>
 800e562:	3601      	adds	r6, #1
 800e564:	e7d9      	b.n	800e51a <_printf_common+0x8e>
	...

0800e568 <_printf_i>:
 800e568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e56c:	7e0f      	ldrb	r7, [r1, #24]
 800e56e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e570:	2f78      	cmp	r7, #120	@ 0x78
 800e572:	4691      	mov	r9, r2
 800e574:	4680      	mov	r8, r0
 800e576:	460c      	mov	r4, r1
 800e578:	469a      	mov	sl, r3
 800e57a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e57e:	d807      	bhi.n	800e590 <_printf_i+0x28>
 800e580:	2f62      	cmp	r7, #98	@ 0x62
 800e582:	d80a      	bhi.n	800e59a <_printf_i+0x32>
 800e584:	2f00      	cmp	r7, #0
 800e586:	f000 80d1 	beq.w	800e72c <_printf_i+0x1c4>
 800e58a:	2f58      	cmp	r7, #88	@ 0x58
 800e58c:	f000 80b8 	beq.w	800e700 <_printf_i+0x198>
 800e590:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e594:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e598:	e03a      	b.n	800e610 <_printf_i+0xa8>
 800e59a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e59e:	2b15      	cmp	r3, #21
 800e5a0:	d8f6      	bhi.n	800e590 <_printf_i+0x28>
 800e5a2:	a101      	add	r1, pc, #4	@ (adr r1, 800e5a8 <_printf_i+0x40>)
 800e5a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e5a8:	0800e601 	.word	0x0800e601
 800e5ac:	0800e615 	.word	0x0800e615
 800e5b0:	0800e591 	.word	0x0800e591
 800e5b4:	0800e591 	.word	0x0800e591
 800e5b8:	0800e591 	.word	0x0800e591
 800e5bc:	0800e591 	.word	0x0800e591
 800e5c0:	0800e615 	.word	0x0800e615
 800e5c4:	0800e591 	.word	0x0800e591
 800e5c8:	0800e591 	.word	0x0800e591
 800e5cc:	0800e591 	.word	0x0800e591
 800e5d0:	0800e591 	.word	0x0800e591
 800e5d4:	0800e713 	.word	0x0800e713
 800e5d8:	0800e63f 	.word	0x0800e63f
 800e5dc:	0800e6cd 	.word	0x0800e6cd
 800e5e0:	0800e591 	.word	0x0800e591
 800e5e4:	0800e591 	.word	0x0800e591
 800e5e8:	0800e735 	.word	0x0800e735
 800e5ec:	0800e591 	.word	0x0800e591
 800e5f0:	0800e63f 	.word	0x0800e63f
 800e5f4:	0800e591 	.word	0x0800e591
 800e5f8:	0800e591 	.word	0x0800e591
 800e5fc:	0800e6d5 	.word	0x0800e6d5
 800e600:	6833      	ldr	r3, [r6, #0]
 800e602:	1d1a      	adds	r2, r3, #4
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	6032      	str	r2, [r6, #0]
 800e608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e60c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e610:	2301      	movs	r3, #1
 800e612:	e09c      	b.n	800e74e <_printf_i+0x1e6>
 800e614:	6833      	ldr	r3, [r6, #0]
 800e616:	6820      	ldr	r0, [r4, #0]
 800e618:	1d19      	adds	r1, r3, #4
 800e61a:	6031      	str	r1, [r6, #0]
 800e61c:	0606      	lsls	r6, r0, #24
 800e61e:	d501      	bpl.n	800e624 <_printf_i+0xbc>
 800e620:	681d      	ldr	r5, [r3, #0]
 800e622:	e003      	b.n	800e62c <_printf_i+0xc4>
 800e624:	0645      	lsls	r5, r0, #25
 800e626:	d5fb      	bpl.n	800e620 <_printf_i+0xb8>
 800e628:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e62c:	2d00      	cmp	r5, #0
 800e62e:	da03      	bge.n	800e638 <_printf_i+0xd0>
 800e630:	232d      	movs	r3, #45	@ 0x2d
 800e632:	426d      	negs	r5, r5
 800e634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e638:	4858      	ldr	r0, [pc, #352]	@ (800e79c <_printf_i+0x234>)
 800e63a:	230a      	movs	r3, #10
 800e63c:	e011      	b.n	800e662 <_printf_i+0xfa>
 800e63e:	6821      	ldr	r1, [r4, #0]
 800e640:	6833      	ldr	r3, [r6, #0]
 800e642:	0608      	lsls	r0, r1, #24
 800e644:	f853 5b04 	ldr.w	r5, [r3], #4
 800e648:	d402      	bmi.n	800e650 <_printf_i+0xe8>
 800e64a:	0649      	lsls	r1, r1, #25
 800e64c:	bf48      	it	mi
 800e64e:	b2ad      	uxthmi	r5, r5
 800e650:	2f6f      	cmp	r7, #111	@ 0x6f
 800e652:	4852      	ldr	r0, [pc, #328]	@ (800e79c <_printf_i+0x234>)
 800e654:	6033      	str	r3, [r6, #0]
 800e656:	bf14      	ite	ne
 800e658:	230a      	movne	r3, #10
 800e65a:	2308      	moveq	r3, #8
 800e65c:	2100      	movs	r1, #0
 800e65e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e662:	6866      	ldr	r6, [r4, #4]
 800e664:	60a6      	str	r6, [r4, #8]
 800e666:	2e00      	cmp	r6, #0
 800e668:	db05      	blt.n	800e676 <_printf_i+0x10e>
 800e66a:	6821      	ldr	r1, [r4, #0]
 800e66c:	432e      	orrs	r6, r5
 800e66e:	f021 0104 	bic.w	r1, r1, #4
 800e672:	6021      	str	r1, [r4, #0]
 800e674:	d04b      	beq.n	800e70e <_printf_i+0x1a6>
 800e676:	4616      	mov	r6, r2
 800e678:	fbb5 f1f3 	udiv	r1, r5, r3
 800e67c:	fb03 5711 	mls	r7, r3, r1, r5
 800e680:	5dc7      	ldrb	r7, [r0, r7]
 800e682:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e686:	462f      	mov	r7, r5
 800e688:	42bb      	cmp	r3, r7
 800e68a:	460d      	mov	r5, r1
 800e68c:	d9f4      	bls.n	800e678 <_printf_i+0x110>
 800e68e:	2b08      	cmp	r3, #8
 800e690:	d10b      	bne.n	800e6aa <_printf_i+0x142>
 800e692:	6823      	ldr	r3, [r4, #0]
 800e694:	07df      	lsls	r7, r3, #31
 800e696:	d508      	bpl.n	800e6aa <_printf_i+0x142>
 800e698:	6923      	ldr	r3, [r4, #16]
 800e69a:	6861      	ldr	r1, [r4, #4]
 800e69c:	4299      	cmp	r1, r3
 800e69e:	bfde      	ittt	le
 800e6a0:	2330      	movle	r3, #48	@ 0x30
 800e6a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e6a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e6aa:	1b92      	subs	r2, r2, r6
 800e6ac:	6122      	str	r2, [r4, #16]
 800e6ae:	f8cd a000 	str.w	sl, [sp]
 800e6b2:	464b      	mov	r3, r9
 800e6b4:	aa03      	add	r2, sp, #12
 800e6b6:	4621      	mov	r1, r4
 800e6b8:	4640      	mov	r0, r8
 800e6ba:	f7ff fee7 	bl	800e48c <_printf_common>
 800e6be:	3001      	adds	r0, #1
 800e6c0:	d14a      	bne.n	800e758 <_printf_i+0x1f0>
 800e6c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e6c6:	b004      	add	sp, #16
 800e6c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6cc:	6823      	ldr	r3, [r4, #0]
 800e6ce:	f043 0320 	orr.w	r3, r3, #32
 800e6d2:	6023      	str	r3, [r4, #0]
 800e6d4:	4832      	ldr	r0, [pc, #200]	@ (800e7a0 <_printf_i+0x238>)
 800e6d6:	2778      	movs	r7, #120	@ 0x78
 800e6d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e6dc:	6823      	ldr	r3, [r4, #0]
 800e6de:	6831      	ldr	r1, [r6, #0]
 800e6e0:	061f      	lsls	r7, r3, #24
 800e6e2:	f851 5b04 	ldr.w	r5, [r1], #4
 800e6e6:	d402      	bmi.n	800e6ee <_printf_i+0x186>
 800e6e8:	065f      	lsls	r7, r3, #25
 800e6ea:	bf48      	it	mi
 800e6ec:	b2ad      	uxthmi	r5, r5
 800e6ee:	6031      	str	r1, [r6, #0]
 800e6f0:	07d9      	lsls	r1, r3, #31
 800e6f2:	bf44      	itt	mi
 800e6f4:	f043 0320 	orrmi.w	r3, r3, #32
 800e6f8:	6023      	strmi	r3, [r4, #0]
 800e6fa:	b11d      	cbz	r5, 800e704 <_printf_i+0x19c>
 800e6fc:	2310      	movs	r3, #16
 800e6fe:	e7ad      	b.n	800e65c <_printf_i+0xf4>
 800e700:	4826      	ldr	r0, [pc, #152]	@ (800e79c <_printf_i+0x234>)
 800e702:	e7e9      	b.n	800e6d8 <_printf_i+0x170>
 800e704:	6823      	ldr	r3, [r4, #0]
 800e706:	f023 0320 	bic.w	r3, r3, #32
 800e70a:	6023      	str	r3, [r4, #0]
 800e70c:	e7f6      	b.n	800e6fc <_printf_i+0x194>
 800e70e:	4616      	mov	r6, r2
 800e710:	e7bd      	b.n	800e68e <_printf_i+0x126>
 800e712:	6833      	ldr	r3, [r6, #0]
 800e714:	6825      	ldr	r5, [r4, #0]
 800e716:	6961      	ldr	r1, [r4, #20]
 800e718:	1d18      	adds	r0, r3, #4
 800e71a:	6030      	str	r0, [r6, #0]
 800e71c:	062e      	lsls	r6, r5, #24
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	d501      	bpl.n	800e726 <_printf_i+0x1be>
 800e722:	6019      	str	r1, [r3, #0]
 800e724:	e002      	b.n	800e72c <_printf_i+0x1c4>
 800e726:	0668      	lsls	r0, r5, #25
 800e728:	d5fb      	bpl.n	800e722 <_printf_i+0x1ba>
 800e72a:	8019      	strh	r1, [r3, #0]
 800e72c:	2300      	movs	r3, #0
 800e72e:	6123      	str	r3, [r4, #16]
 800e730:	4616      	mov	r6, r2
 800e732:	e7bc      	b.n	800e6ae <_printf_i+0x146>
 800e734:	6833      	ldr	r3, [r6, #0]
 800e736:	1d1a      	adds	r2, r3, #4
 800e738:	6032      	str	r2, [r6, #0]
 800e73a:	681e      	ldr	r6, [r3, #0]
 800e73c:	6862      	ldr	r2, [r4, #4]
 800e73e:	2100      	movs	r1, #0
 800e740:	4630      	mov	r0, r6
 800e742:	f7f1 fd7d 	bl	8000240 <memchr>
 800e746:	b108      	cbz	r0, 800e74c <_printf_i+0x1e4>
 800e748:	1b80      	subs	r0, r0, r6
 800e74a:	6060      	str	r0, [r4, #4]
 800e74c:	6863      	ldr	r3, [r4, #4]
 800e74e:	6123      	str	r3, [r4, #16]
 800e750:	2300      	movs	r3, #0
 800e752:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e756:	e7aa      	b.n	800e6ae <_printf_i+0x146>
 800e758:	6923      	ldr	r3, [r4, #16]
 800e75a:	4632      	mov	r2, r6
 800e75c:	4649      	mov	r1, r9
 800e75e:	4640      	mov	r0, r8
 800e760:	47d0      	blx	sl
 800e762:	3001      	adds	r0, #1
 800e764:	d0ad      	beq.n	800e6c2 <_printf_i+0x15a>
 800e766:	6823      	ldr	r3, [r4, #0]
 800e768:	079b      	lsls	r3, r3, #30
 800e76a:	d413      	bmi.n	800e794 <_printf_i+0x22c>
 800e76c:	68e0      	ldr	r0, [r4, #12]
 800e76e:	9b03      	ldr	r3, [sp, #12]
 800e770:	4298      	cmp	r0, r3
 800e772:	bfb8      	it	lt
 800e774:	4618      	movlt	r0, r3
 800e776:	e7a6      	b.n	800e6c6 <_printf_i+0x15e>
 800e778:	2301      	movs	r3, #1
 800e77a:	4632      	mov	r2, r6
 800e77c:	4649      	mov	r1, r9
 800e77e:	4640      	mov	r0, r8
 800e780:	47d0      	blx	sl
 800e782:	3001      	adds	r0, #1
 800e784:	d09d      	beq.n	800e6c2 <_printf_i+0x15a>
 800e786:	3501      	adds	r5, #1
 800e788:	68e3      	ldr	r3, [r4, #12]
 800e78a:	9903      	ldr	r1, [sp, #12]
 800e78c:	1a5b      	subs	r3, r3, r1
 800e78e:	42ab      	cmp	r3, r5
 800e790:	dcf2      	bgt.n	800e778 <_printf_i+0x210>
 800e792:	e7eb      	b.n	800e76c <_printf_i+0x204>
 800e794:	2500      	movs	r5, #0
 800e796:	f104 0619 	add.w	r6, r4, #25
 800e79a:	e7f5      	b.n	800e788 <_printf_i+0x220>
 800e79c:	08012b4e 	.word	0x08012b4e
 800e7a0:	08012b5f 	.word	0x08012b5f

0800e7a4 <_scanf_float>:
 800e7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7a8:	b087      	sub	sp, #28
 800e7aa:	4691      	mov	r9, r2
 800e7ac:	9303      	str	r3, [sp, #12]
 800e7ae:	688b      	ldr	r3, [r1, #8]
 800e7b0:	1e5a      	subs	r2, r3, #1
 800e7b2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e7b6:	bf81      	itttt	hi
 800e7b8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e7bc:	eb03 0b05 	addhi.w	fp, r3, r5
 800e7c0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e7c4:	608b      	strhi	r3, [r1, #8]
 800e7c6:	680b      	ldr	r3, [r1, #0]
 800e7c8:	460a      	mov	r2, r1
 800e7ca:	f04f 0500 	mov.w	r5, #0
 800e7ce:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e7d2:	f842 3b1c 	str.w	r3, [r2], #28
 800e7d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e7da:	4680      	mov	r8, r0
 800e7dc:	460c      	mov	r4, r1
 800e7de:	bf98      	it	ls
 800e7e0:	f04f 0b00 	movls.w	fp, #0
 800e7e4:	9201      	str	r2, [sp, #4]
 800e7e6:	4616      	mov	r6, r2
 800e7e8:	46aa      	mov	sl, r5
 800e7ea:	462f      	mov	r7, r5
 800e7ec:	9502      	str	r5, [sp, #8]
 800e7ee:	68a2      	ldr	r2, [r4, #8]
 800e7f0:	b15a      	cbz	r2, 800e80a <_scanf_float+0x66>
 800e7f2:	f8d9 3000 	ldr.w	r3, [r9]
 800e7f6:	781b      	ldrb	r3, [r3, #0]
 800e7f8:	2b4e      	cmp	r3, #78	@ 0x4e
 800e7fa:	d863      	bhi.n	800e8c4 <_scanf_float+0x120>
 800e7fc:	2b40      	cmp	r3, #64	@ 0x40
 800e7fe:	d83b      	bhi.n	800e878 <_scanf_float+0xd4>
 800e800:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e804:	b2c8      	uxtb	r0, r1
 800e806:	280e      	cmp	r0, #14
 800e808:	d939      	bls.n	800e87e <_scanf_float+0xda>
 800e80a:	b11f      	cbz	r7, 800e814 <_scanf_float+0x70>
 800e80c:	6823      	ldr	r3, [r4, #0]
 800e80e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e812:	6023      	str	r3, [r4, #0]
 800e814:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e818:	f1ba 0f01 	cmp.w	sl, #1
 800e81c:	f200 8114 	bhi.w	800ea48 <_scanf_float+0x2a4>
 800e820:	9b01      	ldr	r3, [sp, #4]
 800e822:	429e      	cmp	r6, r3
 800e824:	f200 8105 	bhi.w	800ea32 <_scanf_float+0x28e>
 800e828:	2001      	movs	r0, #1
 800e82a:	b007      	add	sp, #28
 800e82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e830:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e834:	2a0d      	cmp	r2, #13
 800e836:	d8e8      	bhi.n	800e80a <_scanf_float+0x66>
 800e838:	a101      	add	r1, pc, #4	@ (adr r1, 800e840 <_scanf_float+0x9c>)
 800e83a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e83e:	bf00      	nop
 800e840:	0800e989 	.word	0x0800e989
 800e844:	0800e80b 	.word	0x0800e80b
 800e848:	0800e80b 	.word	0x0800e80b
 800e84c:	0800e80b 	.word	0x0800e80b
 800e850:	0800e9e5 	.word	0x0800e9e5
 800e854:	0800e9bf 	.word	0x0800e9bf
 800e858:	0800e80b 	.word	0x0800e80b
 800e85c:	0800e80b 	.word	0x0800e80b
 800e860:	0800e997 	.word	0x0800e997
 800e864:	0800e80b 	.word	0x0800e80b
 800e868:	0800e80b 	.word	0x0800e80b
 800e86c:	0800e80b 	.word	0x0800e80b
 800e870:	0800e80b 	.word	0x0800e80b
 800e874:	0800e953 	.word	0x0800e953
 800e878:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e87c:	e7da      	b.n	800e834 <_scanf_float+0x90>
 800e87e:	290e      	cmp	r1, #14
 800e880:	d8c3      	bhi.n	800e80a <_scanf_float+0x66>
 800e882:	a001      	add	r0, pc, #4	@ (adr r0, 800e888 <_scanf_float+0xe4>)
 800e884:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e888:	0800e943 	.word	0x0800e943
 800e88c:	0800e80b 	.word	0x0800e80b
 800e890:	0800e943 	.word	0x0800e943
 800e894:	0800e9d3 	.word	0x0800e9d3
 800e898:	0800e80b 	.word	0x0800e80b
 800e89c:	0800e8e5 	.word	0x0800e8e5
 800e8a0:	0800e929 	.word	0x0800e929
 800e8a4:	0800e929 	.word	0x0800e929
 800e8a8:	0800e929 	.word	0x0800e929
 800e8ac:	0800e929 	.word	0x0800e929
 800e8b0:	0800e929 	.word	0x0800e929
 800e8b4:	0800e929 	.word	0x0800e929
 800e8b8:	0800e929 	.word	0x0800e929
 800e8bc:	0800e929 	.word	0x0800e929
 800e8c0:	0800e929 	.word	0x0800e929
 800e8c4:	2b6e      	cmp	r3, #110	@ 0x6e
 800e8c6:	d809      	bhi.n	800e8dc <_scanf_float+0x138>
 800e8c8:	2b60      	cmp	r3, #96	@ 0x60
 800e8ca:	d8b1      	bhi.n	800e830 <_scanf_float+0x8c>
 800e8cc:	2b54      	cmp	r3, #84	@ 0x54
 800e8ce:	d07b      	beq.n	800e9c8 <_scanf_float+0x224>
 800e8d0:	2b59      	cmp	r3, #89	@ 0x59
 800e8d2:	d19a      	bne.n	800e80a <_scanf_float+0x66>
 800e8d4:	2d07      	cmp	r5, #7
 800e8d6:	d198      	bne.n	800e80a <_scanf_float+0x66>
 800e8d8:	2508      	movs	r5, #8
 800e8da:	e02f      	b.n	800e93c <_scanf_float+0x198>
 800e8dc:	2b74      	cmp	r3, #116	@ 0x74
 800e8de:	d073      	beq.n	800e9c8 <_scanf_float+0x224>
 800e8e0:	2b79      	cmp	r3, #121	@ 0x79
 800e8e2:	e7f6      	b.n	800e8d2 <_scanf_float+0x12e>
 800e8e4:	6821      	ldr	r1, [r4, #0]
 800e8e6:	05c8      	lsls	r0, r1, #23
 800e8e8:	d51e      	bpl.n	800e928 <_scanf_float+0x184>
 800e8ea:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e8ee:	6021      	str	r1, [r4, #0]
 800e8f0:	3701      	adds	r7, #1
 800e8f2:	f1bb 0f00 	cmp.w	fp, #0
 800e8f6:	d003      	beq.n	800e900 <_scanf_float+0x15c>
 800e8f8:	3201      	adds	r2, #1
 800e8fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e8fe:	60a2      	str	r2, [r4, #8]
 800e900:	68a3      	ldr	r3, [r4, #8]
 800e902:	3b01      	subs	r3, #1
 800e904:	60a3      	str	r3, [r4, #8]
 800e906:	6923      	ldr	r3, [r4, #16]
 800e908:	3301      	adds	r3, #1
 800e90a:	6123      	str	r3, [r4, #16]
 800e90c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e910:	3b01      	subs	r3, #1
 800e912:	2b00      	cmp	r3, #0
 800e914:	f8c9 3004 	str.w	r3, [r9, #4]
 800e918:	f340 8082 	ble.w	800ea20 <_scanf_float+0x27c>
 800e91c:	f8d9 3000 	ldr.w	r3, [r9]
 800e920:	3301      	adds	r3, #1
 800e922:	f8c9 3000 	str.w	r3, [r9]
 800e926:	e762      	b.n	800e7ee <_scanf_float+0x4a>
 800e928:	eb1a 0105 	adds.w	r1, sl, r5
 800e92c:	f47f af6d 	bne.w	800e80a <_scanf_float+0x66>
 800e930:	6822      	ldr	r2, [r4, #0]
 800e932:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e936:	6022      	str	r2, [r4, #0]
 800e938:	460d      	mov	r5, r1
 800e93a:	468a      	mov	sl, r1
 800e93c:	f806 3b01 	strb.w	r3, [r6], #1
 800e940:	e7de      	b.n	800e900 <_scanf_float+0x15c>
 800e942:	6822      	ldr	r2, [r4, #0]
 800e944:	0610      	lsls	r0, r2, #24
 800e946:	f57f af60 	bpl.w	800e80a <_scanf_float+0x66>
 800e94a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e94e:	6022      	str	r2, [r4, #0]
 800e950:	e7f4      	b.n	800e93c <_scanf_float+0x198>
 800e952:	f1ba 0f00 	cmp.w	sl, #0
 800e956:	d10c      	bne.n	800e972 <_scanf_float+0x1ce>
 800e958:	b977      	cbnz	r7, 800e978 <_scanf_float+0x1d4>
 800e95a:	6822      	ldr	r2, [r4, #0]
 800e95c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e960:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e964:	d108      	bne.n	800e978 <_scanf_float+0x1d4>
 800e966:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e96a:	6022      	str	r2, [r4, #0]
 800e96c:	f04f 0a01 	mov.w	sl, #1
 800e970:	e7e4      	b.n	800e93c <_scanf_float+0x198>
 800e972:	f1ba 0f02 	cmp.w	sl, #2
 800e976:	d050      	beq.n	800ea1a <_scanf_float+0x276>
 800e978:	2d01      	cmp	r5, #1
 800e97a:	d002      	beq.n	800e982 <_scanf_float+0x1de>
 800e97c:	2d04      	cmp	r5, #4
 800e97e:	f47f af44 	bne.w	800e80a <_scanf_float+0x66>
 800e982:	3501      	adds	r5, #1
 800e984:	b2ed      	uxtb	r5, r5
 800e986:	e7d9      	b.n	800e93c <_scanf_float+0x198>
 800e988:	f1ba 0f01 	cmp.w	sl, #1
 800e98c:	f47f af3d 	bne.w	800e80a <_scanf_float+0x66>
 800e990:	f04f 0a02 	mov.w	sl, #2
 800e994:	e7d2      	b.n	800e93c <_scanf_float+0x198>
 800e996:	b975      	cbnz	r5, 800e9b6 <_scanf_float+0x212>
 800e998:	2f00      	cmp	r7, #0
 800e99a:	f47f af37 	bne.w	800e80c <_scanf_float+0x68>
 800e99e:	6822      	ldr	r2, [r4, #0]
 800e9a0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e9a4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e9a8:	f040 80fc 	bne.w	800eba4 <_scanf_float+0x400>
 800e9ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e9b0:	6022      	str	r2, [r4, #0]
 800e9b2:	2501      	movs	r5, #1
 800e9b4:	e7c2      	b.n	800e93c <_scanf_float+0x198>
 800e9b6:	2d03      	cmp	r5, #3
 800e9b8:	d0e3      	beq.n	800e982 <_scanf_float+0x1de>
 800e9ba:	2d05      	cmp	r5, #5
 800e9bc:	e7df      	b.n	800e97e <_scanf_float+0x1da>
 800e9be:	2d02      	cmp	r5, #2
 800e9c0:	f47f af23 	bne.w	800e80a <_scanf_float+0x66>
 800e9c4:	2503      	movs	r5, #3
 800e9c6:	e7b9      	b.n	800e93c <_scanf_float+0x198>
 800e9c8:	2d06      	cmp	r5, #6
 800e9ca:	f47f af1e 	bne.w	800e80a <_scanf_float+0x66>
 800e9ce:	2507      	movs	r5, #7
 800e9d0:	e7b4      	b.n	800e93c <_scanf_float+0x198>
 800e9d2:	6822      	ldr	r2, [r4, #0]
 800e9d4:	0591      	lsls	r1, r2, #22
 800e9d6:	f57f af18 	bpl.w	800e80a <_scanf_float+0x66>
 800e9da:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e9de:	6022      	str	r2, [r4, #0]
 800e9e0:	9702      	str	r7, [sp, #8]
 800e9e2:	e7ab      	b.n	800e93c <_scanf_float+0x198>
 800e9e4:	6822      	ldr	r2, [r4, #0]
 800e9e6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e9ea:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e9ee:	d005      	beq.n	800e9fc <_scanf_float+0x258>
 800e9f0:	0550      	lsls	r0, r2, #21
 800e9f2:	f57f af0a 	bpl.w	800e80a <_scanf_float+0x66>
 800e9f6:	2f00      	cmp	r7, #0
 800e9f8:	f000 80d4 	beq.w	800eba4 <_scanf_float+0x400>
 800e9fc:	0591      	lsls	r1, r2, #22
 800e9fe:	bf58      	it	pl
 800ea00:	9902      	ldrpl	r1, [sp, #8]
 800ea02:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ea06:	bf58      	it	pl
 800ea08:	1a79      	subpl	r1, r7, r1
 800ea0a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ea0e:	bf58      	it	pl
 800ea10:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ea14:	6022      	str	r2, [r4, #0]
 800ea16:	2700      	movs	r7, #0
 800ea18:	e790      	b.n	800e93c <_scanf_float+0x198>
 800ea1a:	f04f 0a03 	mov.w	sl, #3
 800ea1e:	e78d      	b.n	800e93c <_scanf_float+0x198>
 800ea20:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ea24:	4649      	mov	r1, r9
 800ea26:	4640      	mov	r0, r8
 800ea28:	4798      	blx	r3
 800ea2a:	2800      	cmp	r0, #0
 800ea2c:	f43f aedf 	beq.w	800e7ee <_scanf_float+0x4a>
 800ea30:	e6eb      	b.n	800e80a <_scanf_float+0x66>
 800ea32:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ea36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ea3a:	464a      	mov	r2, r9
 800ea3c:	4640      	mov	r0, r8
 800ea3e:	4798      	blx	r3
 800ea40:	6923      	ldr	r3, [r4, #16]
 800ea42:	3b01      	subs	r3, #1
 800ea44:	6123      	str	r3, [r4, #16]
 800ea46:	e6eb      	b.n	800e820 <_scanf_float+0x7c>
 800ea48:	1e6b      	subs	r3, r5, #1
 800ea4a:	2b06      	cmp	r3, #6
 800ea4c:	d824      	bhi.n	800ea98 <_scanf_float+0x2f4>
 800ea4e:	2d02      	cmp	r5, #2
 800ea50:	d836      	bhi.n	800eac0 <_scanf_float+0x31c>
 800ea52:	9b01      	ldr	r3, [sp, #4]
 800ea54:	429e      	cmp	r6, r3
 800ea56:	f67f aee7 	bls.w	800e828 <_scanf_float+0x84>
 800ea5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ea5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ea62:	464a      	mov	r2, r9
 800ea64:	4640      	mov	r0, r8
 800ea66:	4798      	blx	r3
 800ea68:	6923      	ldr	r3, [r4, #16]
 800ea6a:	3b01      	subs	r3, #1
 800ea6c:	6123      	str	r3, [r4, #16]
 800ea6e:	e7f0      	b.n	800ea52 <_scanf_float+0x2ae>
 800ea70:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ea74:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ea78:	464a      	mov	r2, r9
 800ea7a:	4640      	mov	r0, r8
 800ea7c:	4798      	blx	r3
 800ea7e:	6923      	ldr	r3, [r4, #16]
 800ea80:	3b01      	subs	r3, #1
 800ea82:	6123      	str	r3, [r4, #16]
 800ea84:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ea88:	fa5f fa8a 	uxtb.w	sl, sl
 800ea8c:	f1ba 0f02 	cmp.w	sl, #2
 800ea90:	d1ee      	bne.n	800ea70 <_scanf_float+0x2cc>
 800ea92:	3d03      	subs	r5, #3
 800ea94:	b2ed      	uxtb	r5, r5
 800ea96:	1b76      	subs	r6, r6, r5
 800ea98:	6823      	ldr	r3, [r4, #0]
 800ea9a:	05da      	lsls	r2, r3, #23
 800ea9c:	d530      	bpl.n	800eb00 <_scanf_float+0x35c>
 800ea9e:	055b      	lsls	r3, r3, #21
 800eaa0:	d511      	bpl.n	800eac6 <_scanf_float+0x322>
 800eaa2:	9b01      	ldr	r3, [sp, #4]
 800eaa4:	429e      	cmp	r6, r3
 800eaa6:	f67f aebf 	bls.w	800e828 <_scanf_float+0x84>
 800eaaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eaae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eab2:	464a      	mov	r2, r9
 800eab4:	4640      	mov	r0, r8
 800eab6:	4798      	blx	r3
 800eab8:	6923      	ldr	r3, [r4, #16]
 800eaba:	3b01      	subs	r3, #1
 800eabc:	6123      	str	r3, [r4, #16]
 800eabe:	e7f0      	b.n	800eaa2 <_scanf_float+0x2fe>
 800eac0:	46aa      	mov	sl, r5
 800eac2:	46b3      	mov	fp, r6
 800eac4:	e7de      	b.n	800ea84 <_scanf_float+0x2e0>
 800eac6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800eaca:	6923      	ldr	r3, [r4, #16]
 800eacc:	2965      	cmp	r1, #101	@ 0x65
 800eace:	f103 33ff 	add.w	r3, r3, #4294967295
 800ead2:	f106 35ff 	add.w	r5, r6, #4294967295
 800ead6:	6123      	str	r3, [r4, #16]
 800ead8:	d00c      	beq.n	800eaf4 <_scanf_float+0x350>
 800eada:	2945      	cmp	r1, #69	@ 0x45
 800eadc:	d00a      	beq.n	800eaf4 <_scanf_float+0x350>
 800eade:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eae2:	464a      	mov	r2, r9
 800eae4:	4640      	mov	r0, r8
 800eae6:	4798      	blx	r3
 800eae8:	6923      	ldr	r3, [r4, #16]
 800eaea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800eaee:	3b01      	subs	r3, #1
 800eaf0:	1eb5      	subs	r5, r6, #2
 800eaf2:	6123      	str	r3, [r4, #16]
 800eaf4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eaf8:	464a      	mov	r2, r9
 800eafa:	4640      	mov	r0, r8
 800eafc:	4798      	blx	r3
 800eafe:	462e      	mov	r6, r5
 800eb00:	6822      	ldr	r2, [r4, #0]
 800eb02:	f012 0210 	ands.w	r2, r2, #16
 800eb06:	d001      	beq.n	800eb0c <_scanf_float+0x368>
 800eb08:	2000      	movs	r0, #0
 800eb0a:	e68e      	b.n	800e82a <_scanf_float+0x86>
 800eb0c:	7032      	strb	r2, [r6, #0]
 800eb0e:	6823      	ldr	r3, [r4, #0]
 800eb10:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800eb14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eb18:	d123      	bne.n	800eb62 <_scanf_float+0x3be>
 800eb1a:	9b02      	ldr	r3, [sp, #8]
 800eb1c:	429f      	cmp	r7, r3
 800eb1e:	d00a      	beq.n	800eb36 <_scanf_float+0x392>
 800eb20:	1bda      	subs	r2, r3, r7
 800eb22:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800eb26:	429e      	cmp	r6, r3
 800eb28:	bf28      	it	cs
 800eb2a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800eb2e:	491e      	ldr	r1, [pc, #120]	@ (800eba8 <_scanf_float+0x404>)
 800eb30:	4630      	mov	r0, r6
 800eb32:	f000 f9a5 	bl	800ee80 <siprintf>
 800eb36:	9901      	ldr	r1, [sp, #4]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	4640      	mov	r0, r8
 800eb3c:	f002 fc72 	bl	8011424 <_strtod_r>
 800eb40:	9b03      	ldr	r3, [sp, #12]
 800eb42:	6821      	ldr	r1, [r4, #0]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	f011 0f02 	tst.w	r1, #2
 800eb4a:	f103 0204 	add.w	r2, r3, #4
 800eb4e:	d015      	beq.n	800eb7c <_scanf_float+0x3d8>
 800eb50:	9903      	ldr	r1, [sp, #12]
 800eb52:	600a      	str	r2, [r1, #0]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	ed83 0b00 	vstr	d0, [r3]
 800eb5a:	68e3      	ldr	r3, [r4, #12]
 800eb5c:	3301      	adds	r3, #1
 800eb5e:	60e3      	str	r3, [r4, #12]
 800eb60:	e7d2      	b.n	800eb08 <_scanf_float+0x364>
 800eb62:	9b04      	ldr	r3, [sp, #16]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d0e6      	beq.n	800eb36 <_scanf_float+0x392>
 800eb68:	9905      	ldr	r1, [sp, #20]
 800eb6a:	230a      	movs	r3, #10
 800eb6c:	3101      	adds	r1, #1
 800eb6e:	4640      	mov	r0, r8
 800eb70:	f002 fcd8 	bl	8011524 <_strtol_r>
 800eb74:	9b04      	ldr	r3, [sp, #16]
 800eb76:	9e05      	ldr	r6, [sp, #20]
 800eb78:	1ac2      	subs	r2, r0, r3
 800eb7a:	e7d2      	b.n	800eb22 <_scanf_float+0x37e>
 800eb7c:	f011 0f04 	tst.w	r1, #4
 800eb80:	9903      	ldr	r1, [sp, #12]
 800eb82:	600a      	str	r2, [r1, #0]
 800eb84:	d1e6      	bne.n	800eb54 <_scanf_float+0x3b0>
 800eb86:	eeb4 0b40 	vcmp.f64	d0, d0
 800eb8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb8e:	681d      	ldr	r5, [r3, #0]
 800eb90:	d705      	bvc.n	800eb9e <_scanf_float+0x3fa>
 800eb92:	4806      	ldr	r0, [pc, #24]	@ (800ebac <_scanf_float+0x408>)
 800eb94:	f000 fafc 	bl	800f190 <nanf>
 800eb98:	ed85 0a00 	vstr	s0, [r5]
 800eb9c:	e7dd      	b.n	800eb5a <_scanf_float+0x3b6>
 800eb9e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800eba2:	e7f9      	b.n	800eb98 <_scanf_float+0x3f4>
 800eba4:	2700      	movs	r7, #0
 800eba6:	e635      	b.n	800e814 <_scanf_float+0x70>
 800eba8:	08012b70 	.word	0x08012b70
 800ebac:	08012cb1 	.word	0x08012cb1

0800ebb0 <std>:
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	b510      	push	{r4, lr}
 800ebb4:	4604      	mov	r4, r0
 800ebb6:	e9c0 3300 	strd	r3, r3, [r0]
 800ebba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ebbe:	6083      	str	r3, [r0, #8]
 800ebc0:	8181      	strh	r1, [r0, #12]
 800ebc2:	6643      	str	r3, [r0, #100]	@ 0x64
 800ebc4:	81c2      	strh	r2, [r0, #14]
 800ebc6:	6183      	str	r3, [r0, #24]
 800ebc8:	4619      	mov	r1, r3
 800ebca:	2208      	movs	r2, #8
 800ebcc:	305c      	adds	r0, #92	@ 0x5c
 800ebce:	f000 fa51 	bl	800f074 <memset>
 800ebd2:	4b0d      	ldr	r3, [pc, #52]	@ (800ec08 <std+0x58>)
 800ebd4:	6263      	str	r3, [r4, #36]	@ 0x24
 800ebd6:	4b0d      	ldr	r3, [pc, #52]	@ (800ec0c <std+0x5c>)
 800ebd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ebda:	4b0d      	ldr	r3, [pc, #52]	@ (800ec10 <std+0x60>)
 800ebdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ebde:	4b0d      	ldr	r3, [pc, #52]	@ (800ec14 <std+0x64>)
 800ebe0:	6323      	str	r3, [r4, #48]	@ 0x30
 800ebe2:	4b0d      	ldr	r3, [pc, #52]	@ (800ec18 <std+0x68>)
 800ebe4:	6224      	str	r4, [r4, #32]
 800ebe6:	429c      	cmp	r4, r3
 800ebe8:	d006      	beq.n	800ebf8 <std+0x48>
 800ebea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ebee:	4294      	cmp	r4, r2
 800ebf0:	d002      	beq.n	800ebf8 <std+0x48>
 800ebf2:	33d0      	adds	r3, #208	@ 0xd0
 800ebf4:	429c      	cmp	r4, r3
 800ebf6:	d105      	bne.n	800ec04 <std+0x54>
 800ebf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ebfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec00:	f000 bab4 	b.w	800f16c <__retarget_lock_init_recursive>
 800ec04:	bd10      	pop	{r4, pc}
 800ec06:	bf00      	nop
 800ec08:	0800eec5 	.word	0x0800eec5
 800ec0c:	0800eee7 	.word	0x0800eee7
 800ec10:	0800ef1f 	.word	0x0800ef1f
 800ec14:	0800ef43 	.word	0x0800ef43
 800ec18:	20005a3c 	.word	0x20005a3c

0800ec1c <stdio_exit_handler>:
 800ec1c:	4a02      	ldr	r2, [pc, #8]	@ (800ec28 <stdio_exit_handler+0xc>)
 800ec1e:	4903      	ldr	r1, [pc, #12]	@ (800ec2c <stdio_exit_handler+0x10>)
 800ec20:	4803      	ldr	r0, [pc, #12]	@ (800ec30 <stdio_exit_handler+0x14>)
 800ec22:	f000 b869 	b.w	800ecf8 <_fwalk_sglue>
 800ec26:	bf00      	nop
 800ec28:	20000024 	.word	0x20000024
 800ec2c:	08011b65 	.word	0x08011b65
 800ec30:	20000034 	.word	0x20000034

0800ec34 <cleanup_stdio>:
 800ec34:	6841      	ldr	r1, [r0, #4]
 800ec36:	4b0c      	ldr	r3, [pc, #48]	@ (800ec68 <cleanup_stdio+0x34>)
 800ec38:	4299      	cmp	r1, r3
 800ec3a:	b510      	push	{r4, lr}
 800ec3c:	4604      	mov	r4, r0
 800ec3e:	d001      	beq.n	800ec44 <cleanup_stdio+0x10>
 800ec40:	f002 ff90 	bl	8011b64 <_fflush_r>
 800ec44:	68a1      	ldr	r1, [r4, #8]
 800ec46:	4b09      	ldr	r3, [pc, #36]	@ (800ec6c <cleanup_stdio+0x38>)
 800ec48:	4299      	cmp	r1, r3
 800ec4a:	d002      	beq.n	800ec52 <cleanup_stdio+0x1e>
 800ec4c:	4620      	mov	r0, r4
 800ec4e:	f002 ff89 	bl	8011b64 <_fflush_r>
 800ec52:	68e1      	ldr	r1, [r4, #12]
 800ec54:	4b06      	ldr	r3, [pc, #24]	@ (800ec70 <cleanup_stdio+0x3c>)
 800ec56:	4299      	cmp	r1, r3
 800ec58:	d004      	beq.n	800ec64 <cleanup_stdio+0x30>
 800ec5a:	4620      	mov	r0, r4
 800ec5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec60:	f002 bf80 	b.w	8011b64 <_fflush_r>
 800ec64:	bd10      	pop	{r4, pc}
 800ec66:	bf00      	nop
 800ec68:	20005a3c 	.word	0x20005a3c
 800ec6c:	20005aa4 	.word	0x20005aa4
 800ec70:	20005b0c 	.word	0x20005b0c

0800ec74 <global_stdio_init.part.0>:
 800ec74:	b510      	push	{r4, lr}
 800ec76:	4b0b      	ldr	r3, [pc, #44]	@ (800eca4 <global_stdio_init.part.0+0x30>)
 800ec78:	4c0b      	ldr	r4, [pc, #44]	@ (800eca8 <global_stdio_init.part.0+0x34>)
 800ec7a:	4a0c      	ldr	r2, [pc, #48]	@ (800ecac <global_stdio_init.part.0+0x38>)
 800ec7c:	601a      	str	r2, [r3, #0]
 800ec7e:	4620      	mov	r0, r4
 800ec80:	2200      	movs	r2, #0
 800ec82:	2104      	movs	r1, #4
 800ec84:	f7ff ff94 	bl	800ebb0 <std>
 800ec88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ec8c:	2201      	movs	r2, #1
 800ec8e:	2109      	movs	r1, #9
 800ec90:	f7ff ff8e 	bl	800ebb0 <std>
 800ec94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ec98:	2202      	movs	r2, #2
 800ec9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec9e:	2112      	movs	r1, #18
 800eca0:	f7ff bf86 	b.w	800ebb0 <std>
 800eca4:	20005b74 	.word	0x20005b74
 800eca8:	20005a3c 	.word	0x20005a3c
 800ecac:	0800ec1d 	.word	0x0800ec1d

0800ecb0 <__sfp_lock_acquire>:
 800ecb0:	4801      	ldr	r0, [pc, #4]	@ (800ecb8 <__sfp_lock_acquire+0x8>)
 800ecb2:	f000 ba5c 	b.w	800f16e <__retarget_lock_acquire_recursive>
 800ecb6:	bf00      	nop
 800ecb8:	20005b7d 	.word	0x20005b7d

0800ecbc <__sfp_lock_release>:
 800ecbc:	4801      	ldr	r0, [pc, #4]	@ (800ecc4 <__sfp_lock_release+0x8>)
 800ecbe:	f000 ba57 	b.w	800f170 <__retarget_lock_release_recursive>
 800ecc2:	bf00      	nop
 800ecc4:	20005b7d 	.word	0x20005b7d

0800ecc8 <__sinit>:
 800ecc8:	b510      	push	{r4, lr}
 800ecca:	4604      	mov	r4, r0
 800eccc:	f7ff fff0 	bl	800ecb0 <__sfp_lock_acquire>
 800ecd0:	6a23      	ldr	r3, [r4, #32]
 800ecd2:	b11b      	cbz	r3, 800ecdc <__sinit+0x14>
 800ecd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecd8:	f7ff bff0 	b.w	800ecbc <__sfp_lock_release>
 800ecdc:	4b04      	ldr	r3, [pc, #16]	@ (800ecf0 <__sinit+0x28>)
 800ecde:	6223      	str	r3, [r4, #32]
 800ece0:	4b04      	ldr	r3, [pc, #16]	@ (800ecf4 <__sinit+0x2c>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d1f5      	bne.n	800ecd4 <__sinit+0xc>
 800ece8:	f7ff ffc4 	bl	800ec74 <global_stdio_init.part.0>
 800ecec:	e7f2      	b.n	800ecd4 <__sinit+0xc>
 800ecee:	bf00      	nop
 800ecf0:	0800ec35 	.word	0x0800ec35
 800ecf4:	20005b74 	.word	0x20005b74

0800ecf8 <_fwalk_sglue>:
 800ecf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecfc:	4607      	mov	r7, r0
 800ecfe:	4688      	mov	r8, r1
 800ed00:	4614      	mov	r4, r2
 800ed02:	2600      	movs	r6, #0
 800ed04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed08:	f1b9 0901 	subs.w	r9, r9, #1
 800ed0c:	d505      	bpl.n	800ed1a <_fwalk_sglue+0x22>
 800ed0e:	6824      	ldr	r4, [r4, #0]
 800ed10:	2c00      	cmp	r4, #0
 800ed12:	d1f7      	bne.n	800ed04 <_fwalk_sglue+0xc>
 800ed14:	4630      	mov	r0, r6
 800ed16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed1a:	89ab      	ldrh	r3, [r5, #12]
 800ed1c:	2b01      	cmp	r3, #1
 800ed1e:	d907      	bls.n	800ed30 <_fwalk_sglue+0x38>
 800ed20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed24:	3301      	adds	r3, #1
 800ed26:	d003      	beq.n	800ed30 <_fwalk_sglue+0x38>
 800ed28:	4629      	mov	r1, r5
 800ed2a:	4638      	mov	r0, r7
 800ed2c:	47c0      	blx	r8
 800ed2e:	4306      	orrs	r6, r0
 800ed30:	3568      	adds	r5, #104	@ 0x68
 800ed32:	e7e9      	b.n	800ed08 <_fwalk_sglue+0x10>

0800ed34 <iprintf>:
 800ed34:	b40f      	push	{r0, r1, r2, r3}
 800ed36:	b507      	push	{r0, r1, r2, lr}
 800ed38:	4906      	ldr	r1, [pc, #24]	@ (800ed54 <iprintf+0x20>)
 800ed3a:	ab04      	add	r3, sp, #16
 800ed3c:	6808      	ldr	r0, [r1, #0]
 800ed3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed42:	6881      	ldr	r1, [r0, #8]
 800ed44:	9301      	str	r3, [sp, #4]
 800ed46:	f002 fd71 	bl	801182c <_vfiprintf_r>
 800ed4a:	b003      	add	sp, #12
 800ed4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed50:	b004      	add	sp, #16
 800ed52:	4770      	bx	lr
 800ed54:	20000030 	.word	0x20000030

0800ed58 <_puts_r>:
 800ed58:	6a03      	ldr	r3, [r0, #32]
 800ed5a:	b570      	push	{r4, r5, r6, lr}
 800ed5c:	6884      	ldr	r4, [r0, #8]
 800ed5e:	4605      	mov	r5, r0
 800ed60:	460e      	mov	r6, r1
 800ed62:	b90b      	cbnz	r3, 800ed68 <_puts_r+0x10>
 800ed64:	f7ff ffb0 	bl	800ecc8 <__sinit>
 800ed68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ed6a:	07db      	lsls	r3, r3, #31
 800ed6c:	d405      	bmi.n	800ed7a <_puts_r+0x22>
 800ed6e:	89a3      	ldrh	r3, [r4, #12]
 800ed70:	0598      	lsls	r0, r3, #22
 800ed72:	d402      	bmi.n	800ed7a <_puts_r+0x22>
 800ed74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed76:	f000 f9fa 	bl	800f16e <__retarget_lock_acquire_recursive>
 800ed7a:	89a3      	ldrh	r3, [r4, #12]
 800ed7c:	0719      	lsls	r1, r3, #28
 800ed7e:	d502      	bpl.n	800ed86 <_puts_r+0x2e>
 800ed80:	6923      	ldr	r3, [r4, #16]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d135      	bne.n	800edf2 <_puts_r+0x9a>
 800ed86:	4621      	mov	r1, r4
 800ed88:	4628      	mov	r0, r5
 800ed8a:	f000 f91d 	bl	800efc8 <__swsetup_r>
 800ed8e:	b380      	cbz	r0, 800edf2 <_puts_r+0x9a>
 800ed90:	f04f 35ff 	mov.w	r5, #4294967295
 800ed94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ed96:	07da      	lsls	r2, r3, #31
 800ed98:	d405      	bmi.n	800eda6 <_puts_r+0x4e>
 800ed9a:	89a3      	ldrh	r3, [r4, #12]
 800ed9c:	059b      	lsls	r3, r3, #22
 800ed9e:	d402      	bmi.n	800eda6 <_puts_r+0x4e>
 800eda0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eda2:	f000 f9e5 	bl	800f170 <__retarget_lock_release_recursive>
 800eda6:	4628      	mov	r0, r5
 800eda8:	bd70      	pop	{r4, r5, r6, pc}
 800edaa:	2b00      	cmp	r3, #0
 800edac:	da04      	bge.n	800edb8 <_puts_r+0x60>
 800edae:	69a2      	ldr	r2, [r4, #24]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	dc17      	bgt.n	800ede4 <_puts_r+0x8c>
 800edb4:	290a      	cmp	r1, #10
 800edb6:	d015      	beq.n	800ede4 <_puts_r+0x8c>
 800edb8:	6823      	ldr	r3, [r4, #0]
 800edba:	1c5a      	adds	r2, r3, #1
 800edbc:	6022      	str	r2, [r4, #0]
 800edbe:	7019      	strb	r1, [r3, #0]
 800edc0:	68a3      	ldr	r3, [r4, #8]
 800edc2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800edc6:	3b01      	subs	r3, #1
 800edc8:	60a3      	str	r3, [r4, #8]
 800edca:	2900      	cmp	r1, #0
 800edcc:	d1ed      	bne.n	800edaa <_puts_r+0x52>
 800edce:	2b00      	cmp	r3, #0
 800edd0:	da11      	bge.n	800edf6 <_puts_r+0x9e>
 800edd2:	4622      	mov	r2, r4
 800edd4:	210a      	movs	r1, #10
 800edd6:	4628      	mov	r0, r5
 800edd8:	f000 f8b7 	bl	800ef4a <__swbuf_r>
 800eddc:	3001      	adds	r0, #1
 800edde:	d0d7      	beq.n	800ed90 <_puts_r+0x38>
 800ede0:	250a      	movs	r5, #10
 800ede2:	e7d7      	b.n	800ed94 <_puts_r+0x3c>
 800ede4:	4622      	mov	r2, r4
 800ede6:	4628      	mov	r0, r5
 800ede8:	f000 f8af 	bl	800ef4a <__swbuf_r>
 800edec:	3001      	adds	r0, #1
 800edee:	d1e7      	bne.n	800edc0 <_puts_r+0x68>
 800edf0:	e7ce      	b.n	800ed90 <_puts_r+0x38>
 800edf2:	3e01      	subs	r6, #1
 800edf4:	e7e4      	b.n	800edc0 <_puts_r+0x68>
 800edf6:	6823      	ldr	r3, [r4, #0]
 800edf8:	1c5a      	adds	r2, r3, #1
 800edfa:	6022      	str	r2, [r4, #0]
 800edfc:	220a      	movs	r2, #10
 800edfe:	701a      	strb	r2, [r3, #0]
 800ee00:	e7ee      	b.n	800ede0 <_puts_r+0x88>
	...

0800ee04 <puts>:
 800ee04:	4b02      	ldr	r3, [pc, #8]	@ (800ee10 <puts+0xc>)
 800ee06:	4601      	mov	r1, r0
 800ee08:	6818      	ldr	r0, [r3, #0]
 800ee0a:	f7ff bfa5 	b.w	800ed58 <_puts_r>
 800ee0e:	bf00      	nop
 800ee10:	20000030 	.word	0x20000030

0800ee14 <sniprintf>:
 800ee14:	b40c      	push	{r2, r3}
 800ee16:	b530      	push	{r4, r5, lr}
 800ee18:	4b18      	ldr	r3, [pc, #96]	@ (800ee7c <sniprintf+0x68>)
 800ee1a:	1e0c      	subs	r4, r1, #0
 800ee1c:	681d      	ldr	r5, [r3, #0]
 800ee1e:	b09d      	sub	sp, #116	@ 0x74
 800ee20:	da08      	bge.n	800ee34 <sniprintf+0x20>
 800ee22:	238b      	movs	r3, #139	@ 0x8b
 800ee24:	602b      	str	r3, [r5, #0]
 800ee26:	f04f 30ff 	mov.w	r0, #4294967295
 800ee2a:	b01d      	add	sp, #116	@ 0x74
 800ee2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee30:	b002      	add	sp, #8
 800ee32:	4770      	bx	lr
 800ee34:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ee38:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ee3c:	f04f 0300 	mov.w	r3, #0
 800ee40:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ee42:	bf14      	ite	ne
 800ee44:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ee48:	4623      	moveq	r3, r4
 800ee4a:	9304      	str	r3, [sp, #16]
 800ee4c:	9307      	str	r3, [sp, #28]
 800ee4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ee52:	9002      	str	r0, [sp, #8]
 800ee54:	9006      	str	r0, [sp, #24]
 800ee56:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ee5a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ee5c:	ab21      	add	r3, sp, #132	@ 0x84
 800ee5e:	a902      	add	r1, sp, #8
 800ee60:	4628      	mov	r0, r5
 800ee62:	9301      	str	r3, [sp, #4]
 800ee64:	f002 fbbc 	bl	80115e0 <_svfiprintf_r>
 800ee68:	1c43      	adds	r3, r0, #1
 800ee6a:	bfbc      	itt	lt
 800ee6c:	238b      	movlt	r3, #139	@ 0x8b
 800ee6e:	602b      	strlt	r3, [r5, #0]
 800ee70:	2c00      	cmp	r4, #0
 800ee72:	d0da      	beq.n	800ee2a <sniprintf+0x16>
 800ee74:	9b02      	ldr	r3, [sp, #8]
 800ee76:	2200      	movs	r2, #0
 800ee78:	701a      	strb	r2, [r3, #0]
 800ee7a:	e7d6      	b.n	800ee2a <sniprintf+0x16>
 800ee7c:	20000030 	.word	0x20000030

0800ee80 <siprintf>:
 800ee80:	b40e      	push	{r1, r2, r3}
 800ee82:	b510      	push	{r4, lr}
 800ee84:	b09d      	sub	sp, #116	@ 0x74
 800ee86:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ee88:	9002      	str	r0, [sp, #8]
 800ee8a:	9006      	str	r0, [sp, #24]
 800ee8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ee90:	480a      	ldr	r0, [pc, #40]	@ (800eebc <siprintf+0x3c>)
 800ee92:	9107      	str	r1, [sp, #28]
 800ee94:	9104      	str	r1, [sp, #16]
 800ee96:	490a      	ldr	r1, [pc, #40]	@ (800eec0 <siprintf+0x40>)
 800ee98:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee9c:	9105      	str	r1, [sp, #20]
 800ee9e:	2400      	movs	r4, #0
 800eea0:	a902      	add	r1, sp, #8
 800eea2:	6800      	ldr	r0, [r0, #0]
 800eea4:	9301      	str	r3, [sp, #4]
 800eea6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800eea8:	f002 fb9a 	bl	80115e0 <_svfiprintf_r>
 800eeac:	9b02      	ldr	r3, [sp, #8]
 800eeae:	701c      	strb	r4, [r3, #0]
 800eeb0:	b01d      	add	sp, #116	@ 0x74
 800eeb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eeb6:	b003      	add	sp, #12
 800eeb8:	4770      	bx	lr
 800eeba:	bf00      	nop
 800eebc:	20000030 	.word	0x20000030
 800eec0:	ffff0208 	.word	0xffff0208

0800eec4 <__sread>:
 800eec4:	b510      	push	{r4, lr}
 800eec6:	460c      	mov	r4, r1
 800eec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eecc:	f000 f900 	bl	800f0d0 <_read_r>
 800eed0:	2800      	cmp	r0, #0
 800eed2:	bfab      	itete	ge
 800eed4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800eed6:	89a3      	ldrhlt	r3, [r4, #12]
 800eed8:	181b      	addge	r3, r3, r0
 800eeda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800eede:	bfac      	ite	ge
 800eee0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800eee2:	81a3      	strhlt	r3, [r4, #12]
 800eee4:	bd10      	pop	{r4, pc}

0800eee6 <__swrite>:
 800eee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeea:	461f      	mov	r7, r3
 800eeec:	898b      	ldrh	r3, [r1, #12]
 800eeee:	05db      	lsls	r3, r3, #23
 800eef0:	4605      	mov	r5, r0
 800eef2:	460c      	mov	r4, r1
 800eef4:	4616      	mov	r6, r2
 800eef6:	d505      	bpl.n	800ef04 <__swrite+0x1e>
 800eef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eefc:	2302      	movs	r3, #2
 800eefe:	2200      	movs	r2, #0
 800ef00:	f000 f8d4 	bl	800f0ac <_lseek_r>
 800ef04:	89a3      	ldrh	r3, [r4, #12]
 800ef06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ef0e:	81a3      	strh	r3, [r4, #12]
 800ef10:	4632      	mov	r2, r6
 800ef12:	463b      	mov	r3, r7
 800ef14:	4628      	mov	r0, r5
 800ef16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef1a:	f000 b8eb 	b.w	800f0f4 <_write_r>

0800ef1e <__sseek>:
 800ef1e:	b510      	push	{r4, lr}
 800ef20:	460c      	mov	r4, r1
 800ef22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef26:	f000 f8c1 	bl	800f0ac <_lseek_r>
 800ef2a:	1c43      	adds	r3, r0, #1
 800ef2c:	89a3      	ldrh	r3, [r4, #12]
 800ef2e:	bf15      	itete	ne
 800ef30:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ef32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ef36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ef3a:	81a3      	strheq	r3, [r4, #12]
 800ef3c:	bf18      	it	ne
 800ef3e:	81a3      	strhne	r3, [r4, #12]
 800ef40:	bd10      	pop	{r4, pc}

0800ef42 <__sclose>:
 800ef42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef46:	f000 b8a1 	b.w	800f08c <_close_r>

0800ef4a <__swbuf_r>:
 800ef4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef4c:	460e      	mov	r6, r1
 800ef4e:	4614      	mov	r4, r2
 800ef50:	4605      	mov	r5, r0
 800ef52:	b118      	cbz	r0, 800ef5c <__swbuf_r+0x12>
 800ef54:	6a03      	ldr	r3, [r0, #32]
 800ef56:	b90b      	cbnz	r3, 800ef5c <__swbuf_r+0x12>
 800ef58:	f7ff feb6 	bl	800ecc8 <__sinit>
 800ef5c:	69a3      	ldr	r3, [r4, #24]
 800ef5e:	60a3      	str	r3, [r4, #8]
 800ef60:	89a3      	ldrh	r3, [r4, #12]
 800ef62:	071a      	lsls	r2, r3, #28
 800ef64:	d501      	bpl.n	800ef6a <__swbuf_r+0x20>
 800ef66:	6923      	ldr	r3, [r4, #16]
 800ef68:	b943      	cbnz	r3, 800ef7c <__swbuf_r+0x32>
 800ef6a:	4621      	mov	r1, r4
 800ef6c:	4628      	mov	r0, r5
 800ef6e:	f000 f82b 	bl	800efc8 <__swsetup_r>
 800ef72:	b118      	cbz	r0, 800ef7c <__swbuf_r+0x32>
 800ef74:	f04f 37ff 	mov.w	r7, #4294967295
 800ef78:	4638      	mov	r0, r7
 800ef7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef7c:	6823      	ldr	r3, [r4, #0]
 800ef7e:	6922      	ldr	r2, [r4, #16]
 800ef80:	1a98      	subs	r0, r3, r2
 800ef82:	6963      	ldr	r3, [r4, #20]
 800ef84:	b2f6      	uxtb	r6, r6
 800ef86:	4283      	cmp	r3, r0
 800ef88:	4637      	mov	r7, r6
 800ef8a:	dc05      	bgt.n	800ef98 <__swbuf_r+0x4e>
 800ef8c:	4621      	mov	r1, r4
 800ef8e:	4628      	mov	r0, r5
 800ef90:	f002 fde8 	bl	8011b64 <_fflush_r>
 800ef94:	2800      	cmp	r0, #0
 800ef96:	d1ed      	bne.n	800ef74 <__swbuf_r+0x2a>
 800ef98:	68a3      	ldr	r3, [r4, #8]
 800ef9a:	3b01      	subs	r3, #1
 800ef9c:	60a3      	str	r3, [r4, #8]
 800ef9e:	6823      	ldr	r3, [r4, #0]
 800efa0:	1c5a      	adds	r2, r3, #1
 800efa2:	6022      	str	r2, [r4, #0]
 800efa4:	701e      	strb	r6, [r3, #0]
 800efa6:	6962      	ldr	r2, [r4, #20]
 800efa8:	1c43      	adds	r3, r0, #1
 800efaa:	429a      	cmp	r2, r3
 800efac:	d004      	beq.n	800efb8 <__swbuf_r+0x6e>
 800efae:	89a3      	ldrh	r3, [r4, #12]
 800efb0:	07db      	lsls	r3, r3, #31
 800efb2:	d5e1      	bpl.n	800ef78 <__swbuf_r+0x2e>
 800efb4:	2e0a      	cmp	r6, #10
 800efb6:	d1df      	bne.n	800ef78 <__swbuf_r+0x2e>
 800efb8:	4621      	mov	r1, r4
 800efba:	4628      	mov	r0, r5
 800efbc:	f002 fdd2 	bl	8011b64 <_fflush_r>
 800efc0:	2800      	cmp	r0, #0
 800efc2:	d0d9      	beq.n	800ef78 <__swbuf_r+0x2e>
 800efc4:	e7d6      	b.n	800ef74 <__swbuf_r+0x2a>
	...

0800efc8 <__swsetup_r>:
 800efc8:	b538      	push	{r3, r4, r5, lr}
 800efca:	4b29      	ldr	r3, [pc, #164]	@ (800f070 <__swsetup_r+0xa8>)
 800efcc:	4605      	mov	r5, r0
 800efce:	6818      	ldr	r0, [r3, #0]
 800efd0:	460c      	mov	r4, r1
 800efd2:	b118      	cbz	r0, 800efdc <__swsetup_r+0x14>
 800efd4:	6a03      	ldr	r3, [r0, #32]
 800efd6:	b90b      	cbnz	r3, 800efdc <__swsetup_r+0x14>
 800efd8:	f7ff fe76 	bl	800ecc8 <__sinit>
 800efdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efe0:	0719      	lsls	r1, r3, #28
 800efe2:	d422      	bmi.n	800f02a <__swsetup_r+0x62>
 800efe4:	06da      	lsls	r2, r3, #27
 800efe6:	d407      	bmi.n	800eff8 <__swsetup_r+0x30>
 800efe8:	2209      	movs	r2, #9
 800efea:	602a      	str	r2, [r5, #0]
 800efec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eff0:	81a3      	strh	r3, [r4, #12]
 800eff2:	f04f 30ff 	mov.w	r0, #4294967295
 800eff6:	e033      	b.n	800f060 <__swsetup_r+0x98>
 800eff8:	0758      	lsls	r0, r3, #29
 800effa:	d512      	bpl.n	800f022 <__swsetup_r+0x5a>
 800effc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800effe:	b141      	cbz	r1, 800f012 <__swsetup_r+0x4a>
 800f000:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f004:	4299      	cmp	r1, r3
 800f006:	d002      	beq.n	800f00e <__swsetup_r+0x46>
 800f008:	4628      	mov	r0, r5
 800f00a:	f000 feaf 	bl	800fd6c <_free_r>
 800f00e:	2300      	movs	r3, #0
 800f010:	6363      	str	r3, [r4, #52]	@ 0x34
 800f012:	89a3      	ldrh	r3, [r4, #12]
 800f014:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f018:	81a3      	strh	r3, [r4, #12]
 800f01a:	2300      	movs	r3, #0
 800f01c:	6063      	str	r3, [r4, #4]
 800f01e:	6923      	ldr	r3, [r4, #16]
 800f020:	6023      	str	r3, [r4, #0]
 800f022:	89a3      	ldrh	r3, [r4, #12]
 800f024:	f043 0308 	orr.w	r3, r3, #8
 800f028:	81a3      	strh	r3, [r4, #12]
 800f02a:	6923      	ldr	r3, [r4, #16]
 800f02c:	b94b      	cbnz	r3, 800f042 <__swsetup_r+0x7a>
 800f02e:	89a3      	ldrh	r3, [r4, #12]
 800f030:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f034:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f038:	d003      	beq.n	800f042 <__swsetup_r+0x7a>
 800f03a:	4621      	mov	r1, r4
 800f03c:	4628      	mov	r0, r5
 800f03e:	f002 fddf 	bl	8011c00 <__smakebuf_r>
 800f042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f046:	f013 0201 	ands.w	r2, r3, #1
 800f04a:	d00a      	beq.n	800f062 <__swsetup_r+0x9a>
 800f04c:	2200      	movs	r2, #0
 800f04e:	60a2      	str	r2, [r4, #8]
 800f050:	6962      	ldr	r2, [r4, #20]
 800f052:	4252      	negs	r2, r2
 800f054:	61a2      	str	r2, [r4, #24]
 800f056:	6922      	ldr	r2, [r4, #16]
 800f058:	b942      	cbnz	r2, 800f06c <__swsetup_r+0xa4>
 800f05a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f05e:	d1c5      	bne.n	800efec <__swsetup_r+0x24>
 800f060:	bd38      	pop	{r3, r4, r5, pc}
 800f062:	0799      	lsls	r1, r3, #30
 800f064:	bf58      	it	pl
 800f066:	6962      	ldrpl	r2, [r4, #20]
 800f068:	60a2      	str	r2, [r4, #8]
 800f06a:	e7f4      	b.n	800f056 <__swsetup_r+0x8e>
 800f06c:	2000      	movs	r0, #0
 800f06e:	e7f7      	b.n	800f060 <__swsetup_r+0x98>
 800f070:	20000030 	.word	0x20000030

0800f074 <memset>:
 800f074:	4402      	add	r2, r0
 800f076:	4603      	mov	r3, r0
 800f078:	4293      	cmp	r3, r2
 800f07a:	d100      	bne.n	800f07e <memset+0xa>
 800f07c:	4770      	bx	lr
 800f07e:	f803 1b01 	strb.w	r1, [r3], #1
 800f082:	e7f9      	b.n	800f078 <memset+0x4>

0800f084 <_localeconv_r>:
 800f084:	4800      	ldr	r0, [pc, #0]	@ (800f088 <_localeconv_r+0x4>)
 800f086:	4770      	bx	lr
 800f088:	20000170 	.word	0x20000170

0800f08c <_close_r>:
 800f08c:	b538      	push	{r3, r4, r5, lr}
 800f08e:	4d06      	ldr	r5, [pc, #24]	@ (800f0a8 <_close_r+0x1c>)
 800f090:	2300      	movs	r3, #0
 800f092:	4604      	mov	r4, r0
 800f094:	4608      	mov	r0, r1
 800f096:	602b      	str	r3, [r5, #0]
 800f098:	f7f3 ffa4 	bl	8002fe4 <_close>
 800f09c:	1c43      	adds	r3, r0, #1
 800f09e:	d102      	bne.n	800f0a6 <_close_r+0x1a>
 800f0a0:	682b      	ldr	r3, [r5, #0]
 800f0a2:	b103      	cbz	r3, 800f0a6 <_close_r+0x1a>
 800f0a4:	6023      	str	r3, [r4, #0]
 800f0a6:	bd38      	pop	{r3, r4, r5, pc}
 800f0a8:	20005b78 	.word	0x20005b78

0800f0ac <_lseek_r>:
 800f0ac:	b538      	push	{r3, r4, r5, lr}
 800f0ae:	4d07      	ldr	r5, [pc, #28]	@ (800f0cc <_lseek_r+0x20>)
 800f0b0:	4604      	mov	r4, r0
 800f0b2:	4608      	mov	r0, r1
 800f0b4:	4611      	mov	r1, r2
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	602a      	str	r2, [r5, #0]
 800f0ba:	461a      	mov	r2, r3
 800f0bc:	f7f3 ffb9 	bl	8003032 <_lseek>
 800f0c0:	1c43      	adds	r3, r0, #1
 800f0c2:	d102      	bne.n	800f0ca <_lseek_r+0x1e>
 800f0c4:	682b      	ldr	r3, [r5, #0]
 800f0c6:	b103      	cbz	r3, 800f0ca <_lseek_r+0x1e>
 800f0c8:	6023      	str	r3, [r4, #0]
 800f0ca:	bd38      	pop	{r3, r4, r5, pc}
 800f0cc:	20005b78 	.word	0x20005b78

0800f0d0 <_read_r>:
 800f0d0:	b538      	push	{r3, r4, r5, lr}
 800f0d2:	4d07      	ldr	r5, [pc, #28]	@ (800f0f0 <_read_r+0x20>)
 800f0d4:	4604      	mov	r4, r0
 800f0d6:	4608      	mov	r0, r1
 800f0d8:	4611      	mov	r1, r2
 800f0da:	2200      	movs	r2, #0
 800f0dc:	602a      	str	r2, [r5, #0]
 800f0de:	461a      	mov	r2, r3
 800f0e0:	f7f3 ff63 	bl	8002faa <_read>
 800f0e4:	1c43      	adds	r3, r0, #1
 800f0e6:	d102      	bne.n	800f0ee <_read_r+0x1e>
 800f0e8:	682b      	ldr	r3, [r5, #0]
 800f0ea:	b103      	cbz	r3, 800f0ee <_read_r+0x1e>
 800f0ec:	6023      	str	r3, [r4, #0]
 800f0ee:	bd38      	pop	{r3, r4, r5, pc}
 800f0f0:	20005b78 	.word	0x20005b78

0800f0f4 <_write_r>:
 800f0f4:	b538      	push	{r3, r4, r5, lr}
 800f0f6:	4d07      	ldr	r5, [pc, #28]	@ (800f114 <_write_r+0x20>)
 800f0f8:	4604      	mov	r4, r0
 800f0fa:	4608      	mov	r0, r1
 800f0fc:	4611      	mov	r1, r2
 800f0fe:	2200      	movs	r2, #0
 800f100:	602a      	str	r2, [r5, #0]
 800f102:	461a      	mov	r2, r3
 800f104:	f7f1 fd1c 	bl	8000b40 <_write>
 800f108:	1c43      	adds	r3, r0, #1
 800f10a:	d102      	bne.n	800f112 <_write_r+0x1e>
 800f10c:	682b      	ldr	r3, [r5, #0]
 800f10e:	b103      	cbz	r3, 800f112 <_write_r+0x1e>
 800f110:	6023      	str	r3, [r4, #0]
 800f112:	bd38      	pop	{r3, r4, r5, pc}
 800f114:	20005b78 	.word	0x20005b78

0800f118 <__errno>:
 800f118:	4b01      	ldr	r3, [pc, #4]	@ (800f120 <__errno+0x8>)
 800f11a:	6818      	ldr	r0, [r3, #0]
 800f11c:	4770      	bx	lr
 800f11e:	bf00      	nop
 800f120:	20000030 	.word	0x20000030

0800f124 <__libc_init_array>:
 800f124:	b570      	push	{r4, r5, r6, lr}
 800f126:	4d0d      	ldr	r5, [pc, #52]	@ (800f15c <__libc_init_array+0x38>)
 800f128:	4c0d      	ldr	r4, [pc, #52]	@ (800f160 <__libc_init_array+0x3c>)
 800f12a:	1b64      	subs	r4, r4, r5
 800f12c:	10a4      	asrs	r4, r4, #2
 800f12e:	2600      	movs	r6, #0
 800f130:	42a6      	cmp	r6, r4
 800f132:	d109      	bne.n	800f148 <__libc_init_array+0x24>
 800f134:	4d0b      	ldr	r5, [pc, #44]	@ (800f164 <__libc_init_array+0x40>)
 800f136:	4c0c      	ldr	r4, [pc, #48]	@ (800f168 <__libc_init_array+0x44>)
 800f138:	f003 fa24 	bl	8012584 <_init>
 800f13c:	1b64      	subs	r4, r4, r5
 800f13e:	10a4      	asrs	r4, r4, #2
 800f140:	2600      	movs	r6, #0
 800f142:	42a6      	cmp	r6, r4
 800f144:	d105      	bne.n	800f152 <__libc_init_array+0x2e>
 800f146:	bd70      	pop	{r4, r5, r6, pc}
 800f148:	f855 3b04 	ldr.w	r3, [r5], #4
 800f14c:	4798      	blx	r3
 800f14e:	3601      	adds	r6, #1
 800f150:	e7ee      	b.n	800f130 <__libc_init_array+0xc>
 800f152:	f855 3b04 	ldr.w	r3, [r5], #4
 800f156:	4798      	blx	r3
 800f158:	3601      	adds	r6, #1
 800f15a:	e7f2      	b.n	800f142 <__libc_init_array+0x1e>
 800f15c:	08012f6c 	.word	0x08012f6c
 800f160:	08012f6c 	.word	0x08012f6c
 800f164:	08012f6c 	.word	0x08012f6c
 800f168:	08012f70 	.word	0x08012f70

0800f16c <__retarget_lock_init_recursive>:
 800f16c:	4770      	bx	lr

0800f16e <__retarget_lock_acquire_recursive>:
 800f16e:	4770      	bx	lr

0800f170 <__retarget_lock_release_recursive>:
 800f170:	4770      	bx	lr

0800f172 <memcpy>:
 800f172:	440a      	add	r2, r1
 800f174:	4291      	cmp	r1, r2
 800f176:	f100 33ff 	add.w	r3, r0, #4294967295
 800f17a:	d100      	bne.n	800f17e <memcpy+0xc>
 800f17c:	4770      	bx	lr
 800f17e:	b510      	push	{r4, lr}
 800f180:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f184:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f188:	4291      	cmp	r1, r2
 800f18a:	d1f9      	bne.n	800f180 <memcpy+0xe>
 800f18c:	bd10      	pop	{r4, pc}
	...

0800f190 <nanf>:
 800f190:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f198 <nanf+0x8>
 800f194:	4770      	bx	lr
 800f196:	bf00      	nop
 800f198:	7fc00000 	.word	0x7fc00000

0800f19c <quorem>:
 800f19c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1a0:	6903      	ldr	r3, [r0, #16]
 800f1a2:	690c      	ldr	r4, [r1, #16]
 800f1a4:	42a3      	cmp	r3, r4
 800f1a6:	4607      	mov	r7, r0
 800f1a8:	db7e      	blt.n	800f2a8 <quorem+0x10c>
 800f1aa:	3c01      	subs	r4, #1
 800f1ac:	f101 0814 	add.w	r8, r1, #20
 800f1b0:	00a3      	lsls	r3, r4, #2
 800f1b2:	f100 0514 	add.w	r5, r0, #20
 800f1b6:	9300      	str	r3, [sp, #0]
 800f1b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f1bc:	9301      	str	r3, [sp, #4]
 800f1be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f1c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f1c6:	3301      	adds	r3, #1
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f1ce:	fbb2 f6f3 	udiv	r6, r2, r3
 800f1d2:	d32e      	bcc.n	800f232 <quorem+0x96>
 800f1d4:	f04f 0a00 	mov.w	sl, #0
 800f1d8:	46c4      	mov	ip, r8
 800f1da:	46ae      	mov	lr, r5
 800f1dc:	46d3      	mov	fp, sl
 800f1de:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f1e2:	b298      	uxth	r0, r3
 800f1e4:	fb06 a000 	mla	r0, r6, r0, sl
 800f1e8:	0c02      	lsrs	r2, r0, #16
 800f1ea:	0c1b      	lsrs	r3, r3, #16
 800f1ec:	fb06 2303 	mla	r3, r6, r3, r2
 800f1f0:	f8de 2000 	ldr.w	r2, [lr]
 800f1f4:	b280      	uxth	r0, r0
 800f1f6:	b292      	uxth	r2, r2
 800f1f8:	1a12      	subs	r2, r2, r0
 800f1fa:	445a      	add	r2, fp
 800f1fc:	f8de 0000 	ldr.w	r0, [lr]
 800f200:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f204:	b29b      	uxth	r3, r3
 800f206:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f20a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f20e:	b292      	uxth	r2, r2
 800f210:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f214:	45e1      	cmp	r9, ip
 800f216:	f84e 2b04 	str.w	r2, [lr], #4
 800f21a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f21e:	d2de      	bcs.n	800f1de <quorem+0x42>
 800f220:	9b00      	ldr	r3, [sp, #0]
 800f222:	58eb      	ldr	r3, [r5, r3]
 800f224:	b92b      	cbnz	r3, 800f232 <quorem+0x96>
 800f226:	9b01      	ldr	r3, [sp, #4]
 800f228:	3b04      	subs	r3, #4
 800f22a:	429d      	cmp	r5, r3
 800f22c:	461a      	mov	r2, r3
 800f22e:	d32f      	bcc.n	800f290 <quorem+0xf4>
 800f230:	613c      	str	r4, [r7, #16]
 800f232:	4638      	mov	r0, r7
 800f234:	f001 f956 	bl	80104e4 <__mcmp>
 800f238:	2800      	cmp	r0, #0
 800f23a:	db25      	blt.n	800f288 <quorem+0xec>
 800f23c:	4629      	mov	r1, r5
 800f23e:	2000      	movs	r0, #0
 800f240:	f858 2b04 	ldr.w	r2, [r8], #4
 800f244:	f8d1 c000 	ldr.w	ip, [r1]
 800f248:	fa1f fe82 	uxth.w	lr, r2
 800f24c:	fa1f f38c 	uxth.w	r3, ip
 800f250:	eba3 030e 	sub.w	r3, r3, lr
 800f254:	4403      	add	r3, r0
 800f256:	0c12      	lsrs	r2, r2, #16
 800f258:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f25c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f260:	b29b      	uxth	r3, r3
 800f262:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f266:	45c1      	cmp	r9, r8
 800f268:	f841 3b04 	str.w	r3, [r1], #4
 800f26c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f270:	d2e6      	bcs.n	800f240 <quorem+0xa4>
 800f272:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f276:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f27a:	b922      	cbnz	r2, 800f286 <quorem+0xea>
 800f27c:	3b04      	subs	r3, #4
 800f27e:	429d      	cmp	r5, r3
 800f280:	461a      	mov	r2, r3
 800f282:	d30b      	bcc.n	800f29c <quorem+0x100>
 800f284:	613c      	str	r4, [r7, #16]
 800f286:	3601      	adds	r6, #1
 800f288:	4630      	mov	r0, r6
 800f28a:	b003      	add	sp, #12
 800f28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f290:	6812      	ldr	r2, [r2, #0]
 800f292:	3b04      	subs	r3, #4
 800f294:	2a00      	cmp	r2, #0
 800f296:	d1cb      	bne.n	800f230 <quorem+0x94>
 800f298:	3c01      	subs	r4, #1
 800f29a:	e7c6      	b.n	800f22a <quorem+0x8e>
 800f29c:	6812      	ldr	r2, [r2, #0]
 800f29e:	3b04      	subs	r3, #4
 800f2a0:	2a00      	cmp	r2, #0
 800f2a2:	d1ef      	bne.n	800f284 <quorem+0xe8>
 800f2a4:	3c01      	subs	r4, #1
 800f2a6:	e7ea      	b.n	800f27e <quorem+0xe2>
 800f2a8:	2000      	movs	r0, #0
 800f2aa:	e7ee      	b.n	800f28a <quorem+0xee>
 800f2ac:	0000      	movs	r0, r0
	...

0800f2b0 <_dtoa_r>:
 800f2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2b4:	ed2d 8b02 	vpush	{d8}
 800f2b8:	69c7      	ldr	r7, [r0, #28]
 800f2ba:	b091      	sub	sp, #68	@ 0x44
 800f2bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f2c0:	ec55 4b10 	vmov	r4, r5, d0
 800f2c4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800f2c6:	9107      	str	r1, [sp, #28]
 800f2c8:	4681      	mov	r9, r0
 800f2ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800f2cc:	930d      	str	r3, [sp, #52]	@ 0x34
 800f2ce:	b97f      	cbnz	r7, 800f2f0 <_dtoa_r+0x40>
 800f2d0:	2010      	movs	r0, #16
 800f2d2:	f000 fd95 	bl	800fe00 <malloc>
 800f2d6:	4602      	mov	r2, r0
 800f2d8:	f8c9 001c 	str.w	r0, [r9, #28]
 800f2dc:	b920      	cbnz	r0, 800f2e8 <_dtoa_r+0x38>
 800f2de:	4ba0      	ldr	r3, [pc, #640]	@ (800f560 <_dtoa_r+0x2b0>)
 800f2e0:	21ef      	movs	r1, #239	@ 0xef
 800f2e2:	48a0      	ldr	r0, [pc, #640]	@ (800f564 <_dtoa_r+0x2b4>)
 800f2e4:	f002 fd30 	bl	8011d48 <__assert_func>
 800f2e8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f2ec:	6007      	str	r7, [r0, #0]
 800f2ee:	60c7      	str	r7, [r0, #12]
 800f2f0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f2f4:	6819      	ldr	r1, [r3, #0]
 800f2f6:	b159      	cbz	r1, 800f310 <_dtoa_r+0x60>
 800f2f8:	685a      	ldr	r2, [r3, #4]
 800f2fa:	604a      	str	r2, [r1, #4]
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	4093      	lsls	r3, r2
 800f300:	608b      	str	r3, [r1, #8]
 800f302:	4648      	mov	r0, r9
 800f304:	f000 fe72 	bl	800ffec <_Bfree>
 800f308:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f30c:	2200      	movs	r2, #0
 800f30e:	601a      	str	r2, [r3, #0]
 800f310:	1e2b      	subs	r3, r5, #0
 800f312:	bfbb      	ittet	lt
 800f314:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f318:	9303      	strlt	r3, [sp, #12]
 800f31a:	2300      	movge	r3, #0
 800f31c:	2201      	movlt	r2, #1
 800f31e:	bfac      	ite	ge
 800f320:	6033      	strge	r3, [r6, #0]
 800f322:	6032      	strlt	r2, [r6, #0]
 800f324:	4b90      	ldr	r3, [pc, #576]	@ (800f568 <_dtoa_r+0x2b8>)
 800f326:	9e03      	ldr	r6, [sp, #12]
 800f328:	43b3      	bics	r3, r6
 800f32a:	d110      	bne.n	800f34e <_dtoa_r+0x9e>
 800f32c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f32e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f332:	6013      	str	r3, [r2, #0]
 800f334:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800f338:	4323      	orrs	r3, r4
 800f33a:	f000 84e6 	beq.w	800fd0a <_dtoa_r+0xa5a>
 800f33e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f340:	4f8a      	ldr	r7, [pc, #552]	@ (800f56c <_dtoa_r+0x2bc>)
 800f342:	2b00      	cmp	r3, #0
 800f344:	f000 84e8 	beq.w	800fd18 <_dtoa_r+0xa68>
 800f348:	1cfb      	adds	r3, r7, #3
 800f34a:	f000 bce3 	b.w	800fd14 <_dtoa_r+0xa64>
 800f34e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f352:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f35a:	d10a      	bne.n	800f372 <_dtoa_r+0xc2>
 800f35c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f35e:	2301      	movs	r3, #1
 800f360:	6013      	str	r3, [r2, #0]
 800f362:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f364:	b113      	cbz	r3, 800f36c <_dtoa_r+0xbc>
 800f366:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f368:	4b81      	ldr	r3, [pc, #516]	@ (800f570 <_dtoa_r+0x2c0>)
 800f36a:	6013      	str	r3, [r2, #0]
 800f36c:	4f81      	ldr	r7, [pc, #516]	@ (800f574 <_dtoa_r+0x2c4>)
 800f36e:	f000 bcd3 	b.w	800fd18 <_dtoa_r+0xa68>
 800f372:	aa0e      	add	r2, sp, #56	@ 0x38
 800f374:	a90f      	add	r1, sp, #60	@ 0x3c
 800f376:	4648      	mov	r0, r9
 800f378:	eeb0 0b48 	vmov.f64	d0, d8
 800f37c:	f001 f9d2 	bl	8010724 <__d2b>
 800f380:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800f384:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f386:	9001      	str	r0, [sp, #4]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d045      	beq.n	800f418 <_dtoa_r+0x168>
 800f38c:	eeb0 7b48 	vmov.f64	d7, d8
 800f390:	ee18 1a90 	vmov	r1, s17
 800f394:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f398:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800f39c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800f3a0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f3a4:	2500      	movs	r5, #0
 800f3a6:	ee07 1a90 	vmov	s15, r1
 800f3aa:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800f3ae:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f548 <_dtoa_r+0x298>
 800f3b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f3b6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800f550 <_dtoa_r+0x2a0>
 800f3ba:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f3be:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f558 <_dtoa_r+0x2a8>
 800f3c2:	ee07 3a90 	vmov	s15, r3
 800f3c6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f3ca:	eeb0 7b46 	vmov.f64	d7, d6
 800f3ce:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f3d2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f3d6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f3da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3de:	ee16 8a90 	vmov	r8, s13
 800f3e2:	d508      	bpl.n	800f3f6 <_dtoa_r+0x146>
 800f3e4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f3e8:	eeb4 6b47 	vcmp.f64	d6, d7
 800f3ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3f0:	bf18      	it	ne
 800f3f2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800f3f6:	f1b8 0f16 	cmp.w	r8, #22
 800f3fa:	d82b      	bhi.n	800f454 <_dtoa_r+0x1a4>
 800f3fc:	495e      	ldr	r1, [pc, #376]	@ (800f578 <_dtoa_r+0x2c8>)
 800f3fe:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800f402:	ed91 7b00 	vldr	d7, [r1]
 800f406:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f40e:	d501      	bpl.n	800f414 <_dtoa_r+0x164>
 800f410:	f108 38ff 	add.w	r8, r8, #4294967295
 800f414:	2100      	movs	r1, #0
 800f416:	e01e      	b.n	800f456 <_dtoa_r+0x1a6>
 800f418:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f41a:	4413      	add	r3, r2
 800f41c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800f420:	2920      	cmp	r1, #32
 800f422:	bfc1      	itttt	gt
 800f424:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800f428:	408e      	lslgt	r6, r1
 800f42a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800f42e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800f432:	bfd6      	itet	le
 800f434:	f1c1 0120 	rsble	r1, r1, #32
 800f438:	4331      	orrgt	r1, r6
 800f43a:	fa04 f101 	lslle.w	r1, r4, r1
 800f43e:	ee07 1a90 	vmov	s15, r1
 800f442:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f446:	3b01      	subs	r3, #1
 800f448:	ee17 1a90 	vmov	r1, s15
 800f44c:	2501      	movs	r5, #1
 800f44e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800f452:	e7a8      	b.n	800f3a6 <_dtoa_r+0xf6>
 800f454:	2101      	movs	r1, #1
 800f456:	1ad2      	subs	r2, r2, r3
 800f458:	1e53      	subs	r3, r2, #1
 800f45a:	9306      	str	r3, [sp, #24]
 800f45c:	bf45      	ittet	mi
 800f45e:	f1c2 0301 	rsbmi	r3, r2, #1
 800f462:	9304      	strmi	r3, [sp, #16]
 800f464:	2300      	movpl	r3, #0
 800f466:	2300      	movmi	r3, #0
 800f468:	bf4c      	ite	mi
 800f46a:	9306      	strmi	r3, [sp, #24]
 800f46c:	9304      	strpl	r3, [sp, #16]
 800f46e:	f1b8 0f00 	cmp.w	r8, #0
 800f472:	910c      	str	r1, [sp, #48]	@ 0x30
 800f474:	db18      	blt.n	800f4a8 <_dtoa_r+0x1f8>
 800f476:	9b06      	ldr	r3, [sp, #24]
 800f478:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800f47c:	4443      	add	r3, r8
 800f47e:	9306      	str	r3, [sp, #24]
 800f480:	2300      	movs	r3, #0
 800f482:	9a07      	ldr	r2, [sp, #28]
 800f484:	2a09      	cmp	r2, #9
 800f486:	d845      	bhi.n	800f514 <_dtoa_r+0x264>
 800f488:	2a05      	cmp	r2, #5
 800f48a:	bfc4      	itt	gt
 800f48c:	3a04      	subgt	r2, #4
 800f48e:	9207      	strgt	r2, [sp, #28]
 800f490:	9a07      	ldr	r2, [sp, #28]
 800f492:	f1a2 0202 	sub.w	r2, r2, #2
 800f496:	bfcc      	ite	gt
 800f498:	2400      	movgt	r4, #0
 800f49a:	2401      	movle	r4, #1
 800f49c:	2a03      	cmp	r2, #3
 800f49e:	d844      	bhi.n	800f52a <_dtoa_r+0x27a>
 800f4a0:	e8df f002 	tbb	[pc, r2]
 800f4a4:	0b173634 	.word	0x0b173634
 800f4a8:	9b04      	ldr	r3, [sp, #16]
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	eba3 0308 	sub.w	r3, r3, r8
 800f4b0:	9304      	str	r3, [sp, #16]
 800f4b2:	920a      	str	r2, [sp, #40]	@ 0x28
 800f4b4:	f1c8 0300 	rsb	r3, r8, #0
 800f4b8:	e7e3      	b.n	800f482 <_dtoa_r+0x1d2>
 800f4ba:	2201      	movs	r2, #1
 800f4bc:	9208      	str	r2, [sp, #32]
 800f4be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4c0:	eb08 0b02 	add.w	fp, r8, r2
 800f4c4:	f10b 0a01 	add.w	sl, fp, #1
 800f4c8:	4652      	mov	r2, sl
 800f4ca:	2a01      	cmp	r2, #1
 800f4cc:	bfb8      	it	lt
 800f4ce:	2201      	movlt	r2, #1
 800f4d0:	e006      	b.n	800f4e0 <_dtoa_r+0x230>
 800f4d2:	2201      	movs	r2, #1
 800f4d4:	9208      	str	r2, [sp, #32]
 800f4d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4d8:	2a00      	cmp	r2, #0
 800f4da:	dd29      	ble.n	800f530 <_dtoa_r+0x280>
 800f4dc:	4693      	mov	fp, r2
 800f4de:	4692      	mov	sl, r2
 800f4e0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800f4e4:	2100      	movs	r1, #0
 800f4e6:	2004      	movs	r0, #4
 800f4e8:	f100 0614 	add.w	r6, r0, #20
 800f4ec:	4296      	cmp	r6, r2
 800f4ee:	d926      	bls.n	800f53e <_dtoa_r+0x28e>
 800f4f0:	6079      	str	r1, [r7, #4]
 800f4f2:	4648      	mov	r0, r9
 800f4f4:	9305      	str	r3, [sp, #20]
 800f4f6:	f000 fd39 	bl	800ff6c <_Balloc>
 800f4fa:	9b05      	ldr	r3, [sp, #20]
 800f4fc:	4607      	mov	r7, r0
 800f4fe:	2800      	cmp	r0, #0
 800f500:	d13e      	bne.n	800f580 <_dtoa_r+0x2d0>
 800f502:	4b1e      	ldr	r3, [pc, #120]	@ (800f57c <_dtoa_r+0x2cc>)
 800f504:	4602      	mov	r2, r0
 800f506:	f240 11af 	movw	r1, #431	@ 0x1af
 800f50a:	e6ea      	b.n	800f2e2 <_dtoa_r+0x32>
 800f50c:	2200      	movs	r2, #0
 800f50e:	e7e1      	b.n	800f4d4 <_dtoa_r+0x224>
 800f510:	2200      	movs	r2, #0
 800f512:	e7d3      	b.n	800f4bc <_dtoa_r+0x20c>
 800f514:	2401      	movs	r4, #1
 800f516:	2200      	movs	r2, #0
 800f518:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f51c:	f04f 3bff 	mov.w	fp, #4294967295
 800f520:	2100      	movs	r1, #0
 800f522:	46da      	mov	sl, fp
 800f524:	2212      	movs	r2, #18
 800f526:	9109      	str	r1, [sp, #36]	@ 0x24
 800f528:	e7da      	b.n	800f4e0 <_dtoa_r+0x230>
 800f52a:	2201      	movs	r2, #1
 800f52c:	9208      	str	r2, [sp, #32]
 800f52e:	e7f5      	b.n	800f51c <_dtoa_r+0x26c>
 800f530:	f04f 0b01 	mov.w	fp, #1
 800f534:	46da      	mov	sl, fp
 800f536:	465a      	mov	r2, fp
 800f538:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800f53c:	e7d0      	b.n	800f4e0 <_dtoa_r+0x230>
 800f53e:	3101      	adds	r1, #1
 800f540:	0040      	lsls	r0, r0, #1
 800f542:	e7d1      	b.n	800f4e8 <_dtoa_r+0x238>
 800f544:	f3af 8000 	nop.w
 800f548:	636f4361 	.word	0x636f4361
 800f54c:	3fd287a7 	.word	0x3fd287a7
 800f550:	8b60c8b3 	.word	0x8b60c8b3
 800f554:	3fc68a28 	.word	0x3fc68a28
 800f558:	509f79fb 	.word	0x509f79fb
 800f55c:	3fd34413 	.word	0x3fd34413
 800f560:	08012b82 	.word	0x08012b82
 800f564:	08012b99 	.word	0x08012b99
 800f568:	7ff00000 	.word	0x7ff00000
 800f56c:	08012b7e 	.word	0x08012b7e
 800f570:	08012b4d 	.word	0x08012b4d
 800f574:	08012b4c 	.word	0x08012b4c
 800f578:	08012d48 	.word	0x08012d48
 800f57c:	08012bf1 	.word	0x08012bf1
 800f580:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800f584:	f1ba 0f0e 	cmp.w	sl, #14
 800f588:	6010      	str	r0, [r2, #0]
 800f58a:	d86e      	bhi.n	800f66a <_dtoa_r+0x3ba>
 800f58c:	2c00      	cmp	r4, #0
 800f58e:	d06c      	beq.n	800f66a <_dtoa_r+0x3ba>
 800f590:	f1b8 0f00 	cmp.w	r8, #0
 800f594:	f340 80b4 	ble.w	800f700 <_dtoa_r+0x450>
 800f598:	4ac8      	ldr	r2, [pc, #800]	@ (800f8bc <_dtoa_r+0x60c>)
 800f59a:	f008 010f 	and.w	r1, r8, #15
 800f59e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f5a2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800f5a6:	ed92 7b00 	vldr	d7, [r2]
 800f5aa:	ea4f 1128 	mov.w	r1, r8, asr #4
 800f5ae:	f000 809b 	beq.w	800f6e8 <_dtoa_r+0x438>
 800f5b2:	4ac3      	ldr	r2, [pc, #780]	@ (800f8c0 <_dtoa_r+0x610>)
 800f5b4:	ed92 6b08 	vldr	d6, [r2, #32]
 800f5b8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f5bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f5c0:	f001 010f 	and.w	r1, r1, #15
 800f5c4:	2203      	movs	r2, #3
 800f5c6:	48be      	ldr	r0, [pc, #760]	@ (800f8c0 <_dtoa_r+0x610>)
 800f5c8:	2900      	cmp	r1, #0
 800f5ca:	f040 808f 	bne.w	800f6ec <_dtoa_r+0x43c>
 800f5ce:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f5d2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f5d6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f5da:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f5dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f5e0:	2900      	cmp	r1, #0
 800f5e2:	f000 80b3 	beq.w	800f74c <_dtoa_r+0x49c>
 800f5e6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800f5ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5f2:	f140 80ab 	bpl.w	800f74c <_dtoa_r+0x49c>
 800f5f6:	f1ba 0f00 	cmp.w	sl, #0
 800f5fa:	f000 80a7 	beq.w	800f74c <_dtoa_r+0x49c>
 800f5fe:	f1bb 0f00 	cmp.w	fp, #0
 800f602:	dd30      	ble.n	800f666 <_dtoa_r+0x3b6>
 800f604:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800f608:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f60c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f610:	f108 31ff 	add.w	r1, r8, #4294967295
 800f614:	9105      	str	r1, [sp, #20]
 800f616:	3201      	adds	r2, #1
 800f618:	465c      	mov	r4, fp
 800f61a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f61e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800f622:	ee07 2a90 	vmov	s15, r2
 800f626:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f62a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f62e:	ee15 2a90 	vmov	r2, s11
 800f632:	ec51 0b15 	vmov	r0, r1, d5
 800f636:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800f63a:	2c00      	cmp	r4, #0
 800f63c:	f040 808a 	bne.w	800f754 <_dtoa_r+0x4a4>
 800f640:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f644:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f648:	ec41 0b17 	vmov	d7, r0, r1
 800f64c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f654:	f300 826a 	bgt.w	800fb2c <_dtoa_r+0x87c>
 800f658:	eeb1 7b47 	vneg.f64	d7, d7
 800f65c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f664:	d423      	bmi.n	800f6ae <_dtoa_r+0x3fe>
 800f666:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f66a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f66c:	2a00      	cmp	r2, #0
 800f66e:	f2c0 8129 	blt.w	800f8c4 <_dtoa_r+0x614>
 800f672:	f1b8 0f0e 	cmp.w	r8, #14
 800f676:	f300 8125 	bgt.w	800f8c4 <_dtoa_r+0x614>
 800f67a:	4b90      	ldr	r3, [pc, #576]	@ (800f8bc <_dtoa_r+0x60c>)
 800f67c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f680:	ed93 6b00 	vldr	d6, [r3]
 800f684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f686:	2b00      	cmp	r3, #0
 800f688:	f280 80c8 	bge.w	800f81c <_dtoa_r+0x56c>
 800f68c:	f1ba 0f00 	cmp.w	sl, #0
 800f690:	f300 80c4 	bgt.w	800f81c <_dtoa_r+0x56c>
 800f694:	d10b      	bne.n	800f6ae <_dtoa_r+0x3fe>
 800f696:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f69a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f69e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f6a2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f6a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6aa:	f2c0 823c 	blt.w	800fb26 <_dtoa_r+0x876>
 800f6ae:	2400      	movs	r4, #0
 800f6b0:	4625      	mov	r5, r4
 800f6b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6b4:	43db      	mvns	r3, r3
 800f6b6:	9305      	str	r3, [sp, #20]
 800f6b8:	463e      	mov	r6, r7
 800f6ba:	f04f 0800 	mov.w	r8, #0
 800f6be:	4621      	mov	r1, r4
 800f6c0:	4648      	mov	r0, r9
 800f6c2:	f000 fc93 	bl	800ffec <_Bfree>
 800f6c6:	2d00      	cmp	r5, #0
 800f6c8:	f000 80a2 	beq.w	800f810 <_dtoa_r+0x560>
 800f6cc:	f1b8 0f00 	cmp.w	r8, #0
 800f6d0:	d005      	beq.n	800f6de <_dtoa_r+0x42e>
 800f6d2:	45a8      	cmp	r8, r5
 800f6d4:	d003      	beq.n	800f6de <_dtoa_r+0x42e>
 800f6d6:	4641      	mov	r1, r8
 800f6d8:	4648      	mov	r0, r9
 800f6da:	f000 fc87 	bl	800ffec <_Bfree>
 800f6de:	4629      	mov	r1, r5
 800f6e0:	4648      	mov	r0, r9
 800f6e2:	f000 fc83 	bl	800ffec <_Bfree>
 800f6e6:	e093      	b.n	800f810 <_dtoa_r+0x560>
 800f6e8:	2202      	movs	r2, #2
 800f6ea:	e76c      	b.n	800f5c6 <_dtoa_r+0x316>
 800f6ec:	07cc      	lsls	r4, r1, #31
 800f6ee:	d504      	bpl.n	800f6fa <_dtoa_r+0x44a>
 800f6f0:	ed90 6b00 	vldr	d6, [r0]
 800f6f4:	3201      	adds	r2, #1
 800f6f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f6fa:	1049      	asrs	r1, r1, #1
 800f6fc:	3008      	adds	r0, #8
 800f6fe:	e763      	b.n	800f5c8 <_dtoa_r+0x318>
 800f700:	d022      	beq.n	800f748 <_dtoa_r+0x498>
 800f702:	f1c8 0100 	rsb	r1, r8, #0
 800f706:	4a6d      	ldr	r2, [pc, #436]	@ (800f8bc <_dtoa_r+0x60c>)
 800f708:	f001 000f 	and.w	r0, r1, #15
 800f70c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f710:	ed92 7b00 	vldr	d7, [r2]
 800f714:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f718:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f71c:	4868      	ldr	r0, [pc, #416]	@ (800f8c0 <_dtoa_r+0x610>)
 800f71e:	1109      	asrs	r1, r1, #4
 800f720:	2400      	movs	r4, #0
 800f722:	2202      	movs	r2, #2
 800f724:	b929      	cbnz	r1, 800f732 <_dtoa_r+0x482>
 800f726:	2c00      	cmp	r4, #0
 800f728:	f43f af57 	beq.w	800f5da <_dtoa_r+0x32a>
 800f72c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f730:	e753      	b.n	800f5da <_dtoa_r+0x32a>
 800f732:	07ce      	lsls	r6, r1, #31
 800f734:	d505      	bpl.n	800f742 <_dtoa_r+0x492>
 800f736:	ed90 6b00 	vldr	d6, [r0]
 800f73a:	3201      	adds	r2, #1
 800f73c:	2401      	movs	r4, #1
 800f73e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f742:	1049      	asrs	r1, r1, #1
 800f744:	3008      	adds	r0, #8
 800f746:	e7ed      	b.n	800f724 <_dtoa_r+0x474>
 800f748:	2202      	movs	r2, #2
 800f74a:	e746      	b.n	800f5da <_dtoa_r+0x32a>
 800f74c:	f8cd 8014 	str.w	r8, [sp, #20]
 800f750:	4654      	mov	r4, sl
 800f752:	e762      	b.n	800f61a <_dtoa_r+0x36a>
 800f754:	4a59      	ldr	r2, [pc, #356]	@ (800f8bc <_dtoa_r+0x60c>)
 800f756:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800f75a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f75e:	9a08      	ldr	r2, [sp, #32]
 800f760:	ec41 0b17 	vmov	d7, r0, r1
 800f764:	443c      	add	r4, r7
 800f766:	b34a      	cbz	r2, 800f7bc <_dtoa_r+0x50c>
 800f768:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800f76c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800f770:	463e      	mov	r6, r7
 800f772:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f776:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f77a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f77e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f782:	ee14 2a90 	vmov	r2, s9
 800f786:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f78a:	3230      	adds	r2, #48	@ 0x30
 800f78c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f790:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f798:	f806 2b01 	strb.w	r2, [r6], #1
 800f79c:	d438      	bmi.n	800f810 <_dtoa_r+0x560>
 800f79e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f7a2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f7a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7aa:	d46e      	bmi.n	800f88a <_dtoa_r+0x5da>
 800f7ac:	42a6      	cmp	r6, r4
 800f7ae:	f43f af5a 	beq.w	800f666 <_dtoa_r+0x3b6>
 800f7b2:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f7b6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f7ba:	e7e0      	b.n	800f77e <_dtoa_r+0x4ce>
 800f7bc:	4621      	mov	r1, r4
 800f7be:	463e      	mov	r6, r7
 800f7c0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f7c4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f7c8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f7cc:	ee14 2a90 	vmov	r2, s9
 800f7d0:	3230      	adds	r2, #48	@ 0x30
 800f7d2:	f806 2b01 	strb.w	r2, [r6], #1
 800f7d6:	42a6      	cmp	r6, r4
 800f7d8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f7dc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f7e0:	d119      	bne.n	800f816 <_dtoa_r+0x566>
 800f7e2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800f7e6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f7ea:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7f2:	dc4a      	bgt.n	800f88a <_dtoa_r+0x5da>
 800f7f4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f7f8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f800:	f57f af31 	bpl.w	800f666 <_dtoa_r+0x3b6>
 800f804:	460e      	mov	r6, r1
 800f806:	3901      	subs	r1, #1
 800f808:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f80c:	2b30      	cmp	r3, #48	@ 0x30
 800f80e:	d0f9      	beq.n	800f804 <_dtoa_r+0x554>
 800f810:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f814:	e027      	b.n	800f866 <_dtoa_r+0x5b6>
 800f816:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f81a:	e7d5      	b.n	800f7c8 <_dtoa_r+0x518>
 800f81c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f820:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800f824:	463e      	mov	r6, r7
 800f826:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f82a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f82e:	ee15 3a10 	vmov	r3, s10
 800f832:	3330      	adds	r3, #48	@ 0x30
 800f834:	f806 3b01 	strb.w	r3, [r6], #1
 800f838:	1bf3      	subs	r3, r6, r7
 800f83a:	459a      	cmp	sl, r3
 800f83c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f840:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f844:	d132      	bne.n	800f8ac <_dtoa_r+0x5fc>
 800f846:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f84a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f852:	dc18      	bgt.n	800f886 <_dtoa_r+0x5d6>
 800f854:	eeb4 7b46 	vcmp.f64	d7, d6
 800f858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f85c:	d103      	bne.n	800f866 <_dtoa_r+0x5b6>
 800f85e:	ee15 3a10 	vmov	r3, s10
 800f862:	07db      	lsls	r3, r3, #31
 800f864:	d40f      	bmi.n	800f886 <_dtoa_r+0x5d6>
 800f866:	9901      	ldr	r1, [sp, #4]
 800f868:	4648      	mov	r0, r9
 800f86a:	f000 fbbf 	bl	800ffec <_Bfree>
 800f86e:	2300      	movs	r3, #0
 800f870:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f872:	7033      	strb	r3, [r6, #0]
 800f874:	f108 0301 	add.w	r3, r8, #1
 800f878:	6013      	str	r3, [r2, #0]
 800f87a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	f000 824b 	beq.w	800fd18 <_dtoa_r+0xa68>
 800f882:	601e      	str	r6, [r3, #0]
 800f884:	e248      	b.n	800fd18 <_dtoa_r+0xa68>
 800f886:	f8cd 8014 	str.w	r8, [sp, #20]
 800f88a:	4633      	mov	r3, r6
 800f88c:	461e      	mov	r6, r3
 800f88e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f892:	2a39      	cmp	r2, #57	@ 0x39
 800f894:	d106      	bne.n	800f8a4 <_dtoa_r+0x5f4>
 800f896:	429f      	cmp	r7, r3
 800f898:	d1f8      	bne.n	800f88c <_dtoa_r+0x5dc>
 800f89a:	9a05      	ldr	r2, [sp, #20]
 800f89c:	3201      	adds	r2, #1
 800f89e:	9205      	str	r2, [sp, #20]
 800f8a0:	2230      	movs	r2, #48	@ 0x30
 800f8a2:	703a      	strb	r2, [r7, #0]
 800f8a4:	781a      	ldrb	r2, [r3, #0]
 800f8a6:	3201      	adds	r2, #1
 800f8a8:	701a      	strb	r2, [r3, #0]
 800f8aa:	e7b1      	b.n	800f810 <_dtoa_r+0x560>
 800f8ac:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f8b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8b8:	d1b5      	bne.n	800f826 <_dtoa_r+0x576>
 800f8ba:	e7d4      	b.n	800f866 <_dtoa_r+0x5b6>
 800f8bc:	08012d48 	.word	0x08012d48
 800f8c0:	08012d20 	.word	0x08012d20
 800f8c4:	9908      	ldr	r1, [sp, #32]
 800f8c6:	2900      	cmp	r1, #0
 800f8c8:	f000 80e9 	beq.w	800fa9e <_dtoa_r+0x7ee>
 800f8cc:	9907      	ldr	r1, [sp, #28]
 800f8ce:	2901      	cmp	r1, #1
 800f8d0:	f300 80cb 	bgt.w	800fa6a <_dtoa_r+0x7ba>
 800f8d4:	2d00      	cmp	r5, #0
 800f8d6:	f000 80c4 	beq.w	800fa62 <_dtoa_r+0x7b2>
 800f8da:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f8de:	9e04      	ldr	r6, [sp, #16]
 800f8e0:	461c      	mov	r4, r3
 800f8e2:	9305      	str	r3, [sp, #20]
 800f8e4:	9b04      	ldr	r3, [sp, #16]
 800f8e6:	4413      	add	r3, r2
 800f8e8:	9304      	str	r3, [sp, #16]
 800f8ea:	9b06      	ldr	r3, [sp, #24]
 800f8ec:	2101      	movs	r1, #1
 800f8ee:	4413      	add	r3, r2
 800f8f0:	4648      	mov	r0, r9
 800f8f2:	9306      	str	r3, [sp, #24]
 800f8f4:	f000 fc78 	bl	80101e8 <__i2b>
 800f8f8:	9b05      	ldr	r3, [sp, #20]
 800f8fa:	4605      	mov	r5, r0
 800f8fc:	b166      	cbz	r6, 800f918 <_dtoa_r+0x668>
 800f8fe:	9a06      	ldr	r2, [sp, #24]
 800f900:	2a00      	cmp	r2, #0
 800f902:	dd09      	ble.n	800f918 <_dtoa_r+0x668>
 800f904:	42b2      	cmp	r2, r6
 800f906:	9904      	ldr	r1, [sp, #16]
 800f908:	bfa8      	it	ge
 800f90a:	4632      	movge	r2, r6
 800f90c:	1a89      	subs	r1, r1, r2
 800f90e:	9104      	str	r1, [sp, #16]
 800f910:	9906      	ldr	r1, [sp, #24]
 800f912:	1ab6      	subs	r6, r6, r2
 800f914:	1a8a      	subs	r2, r1, r2
 800f916:	9206      	str	r2, [sp, #24]
 800f918:	b30b      	cbz	r3, 800f95e <_dtoa_r+0x6ae>
 800f91a:	9a08      	ldr	r2, [sp, #32]
 800f91c:	2a00      	cmp	r2, #0
 800f91e:	f000 80c5 	beq.w	800faac <_dtoa_r+0x7fc>
 800f922:	2c00      	cmp	r4, #0
 800f924:	f000 80bf 	beq.w	800faa6 <_dtoa_r+0x7f6>
 800f928:	4629      	mov	r1, r5
 800f92a:	4622      	mov	r2, r4
 800f92c:	4648      	mov	r0, r9
 800f92e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f930:	f000 fd12 	bl	8010358 <__pow5mult>
 800f934:	9a01      	ldr	r2, [sp, #4]
 800f936:	4601      	mov	r1, r0
 800f938:	4605      	mov	r5, r0
 800f93a:	4648      	mov	r0, r9
 800f93c:	f000 fc6a 	bl	8010214 <__multiply>
 800f940:	9901      	ldr	r1, [sp, #4]
 800f942:	9005      	str	r0, [sp, #20]
 800f944:	4648      	mov	r0, r9
 800f946:	f000 fb51 	bl	800ffec <_Bfree>
 800f94a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f94c:	1b1b      	subs	r3, r3, r4
 800f94e:	f000 80b0 	beq.w	800fab2 <_dtoa_r+0x802>
 800f952:	9905      	ldr	r1, [sp, #20]
 800f954:	461a      	mov	r2, r3
 800f956:	4648      	mov	r0, r9
 800f958:	f000 fcfe 	bl	8010358 <__pow5mult>
 800f95c:	9001      	str	r0, [sp, #4]
 800f95e:	2101      	movs	r1, #1
 800f960:	4648      	mov	r0, r9
 800f962:	f000 fc41 	bl	80101e8 <__i2b>
 800f966:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f968:	4604      	mov	r4, r0
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	f000 81da 	beq.w	800fd24 <_dtoa_r+0xa74>
 800f970:	461a      	mov	r2, r3
 800f972:	4601      	mov	r1, r0
 800f974:	4648      	mov	r0, r9
 800f976:	f000 fcef 	bl	8010358 <__pow5mult>
 800f97a:	9b07      	ldr	r3, [sp, #28]
 800f97c:	2b01      	cmp	r3, #1
 800f97e:	4604      	mov	r4, r0
 800f980:	f300 80a0 	bgt.w	800fac4 <_dtoa_r+0x814>
 800f984:	9b02      	ldr	r3, [sp, #8]
 800f986:	2b00      	cmp	r3, #0
 800f988:	f040 8096 	bne.w	800fab8 <_dtoa_r+0x808>
 800f98c:	9b03      	ldr	r3, [sp, #12]
 800f98e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f992:	2a00      	cmp	r2, #0
 800f994:	f040 8092 	bne.w	800fabc <_dtoa_r+0x80c>
 800f998:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f99c:	0d12      	lsrs	r2, r2, #20
 800f99e:	0512      	lsls	r2, r2, #20
 800f9a0:	2a00      	cmp	r2, #0
 800f9a2:	f000 808d 	beq.w	800fac0 <_dtoa_r+0x810>
 800f9a6:	9b04      	ldr	r3, [sp, #16]
 800f9a8:	3301      	adds	r3, #1
 800f9aa:	9304      	str	r3, [sp, #16]
 800f9ac:	9b06      	ldr	r3, [sp, #24]
 800f9ae:	3301      	adds	r3, #1
 800f9b0:	9306      	str	r3, [sp, #24]
 800f9b2:	2301      	movs	r3, #1
 800f9b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	f000 81b9 	beq.w	800fd30 <_dtoa_r+0xa80>
 800f9be:	6922      	ldr	r2, [r4, #16]
 800f9c0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f9c4:	6910      	ldr	r0, [r2, #16]
 800f9c6:	f000 fbc3 	bl	8010150 <__hi0bits>
 800f9ca:	f1c0 0020 	rsb	r0, r0, #32
 800f9ce:	9b06      	ldr	r3, [sp, #24]
 800f9d0:	4418      	add	r0, r3
 800f9d2:	f010 001f 	ands.w	r0, r0, #31
 800f9d6:	f000 8081 	beq.w	800fadc <_dtoa_r+0x82c>
 800f9da:	f1c0 0220 	rsb	r2, r0, #32
 800f9de:	2a04      	cmp	r2, #4
 800f9e0:	dd73      	ble.n	800faca <_dtoa_r+0x81a>
 800f9e2:	9b04      	ldr	r3, [sp, #16]
 800f9e4:	f1c0 001c 	rsb	r0, r0, #28
 800f9e8:	4403      	add	r3, r0
 800f9ea:	9304      	str	r3, [sp, #16]
 800f9ec:	9b06      	ldr	r3, [sp, #24]
 800f9ee:	4406      	add	r6, r0
 800f9f0:	4403      	add	r3, r0
 800f9f2:	9306      	str	r3, [sp, #24]
 800f9f4:	9b04      	ldr	r3, [sp, #16]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	dd05      	ble.n	800fa06 <_dtoa_r+0x756>
 800f9fa:	9901      	ldr	r1, [sp, #4]
 800f9fc:	461a      	mov	r2, r3
 800f9fe:	4648      	mov	r0, r9
 800fa00:	f000 fd04 	bl	801040c <__lshift>
 800fa04:	9001      	str	r0, [sp, #4]
 800fa06:	9b06      	ldr	r3, [sp, #24]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	dd05      	ble.n	800fa18 <_dtoa_r+0x768>
 800fa0c:	4621      	mov	r1, r4
 800fa0e:	461a      	mov	r2, r3
 800fa10:	4648      	mov	r0, r9
 800fa12:	f000 fcfb 	bl	801040c <__lshift>
 800fa16:	4604      	mov	r4, r0
 800fa18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d060      	beq.n	800fae0 <_dtoa_r+0x830>
 800fa1e:	9801      	ldr	r0, [sp, #4]
 800fa20:	4621      	mov	r1, r4
 800fa22:	f000 fd5f 	bl	80104e4 <__mcmp>
 800fa26:	2800      	cmp	r0, #0
 800fa28:	da5a      	bge.n	800fae0 <_dtoa_r+0x830>
 800fa2a:	f108 33ff 	add.w	r3, r8, #4294967295
 800fa2e:	9305      	str	r3, [sp, #20]
 800fa30:	9901      	ldr	r1, [sp, #4]
 800fa32:	2300      	movs	r3, #0
 800fa34:	220a      	movs	r2, #10
 800fa36:	4648      	mov	r0, r9
 800fa38:	f000 fafa 	bl	8010030 <__multadd>
 800fa3c:	9b08      	ldr	r3, [sp, #32]
 800fa3e:	9001      	str	r0, [sp, #4]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	f000 8177 	beq.w	800fd34 <_dtoa_r+0xa84>
 800fa46:	4629      	mov	r1, r5
 800fa48:	2300      	movs	r3, #0
 800fa4a:	220a      	movs	r2, #10
 800fa4c:	4648      	mov	r0, r9
 800fa4e:	f000 faef 	bl	8010030 <__multadd>
 800fa52:	f1bb 0f00 	cmp.w	fp, #0
 800fa56:	4605      	mov	r5, r0
 800fa58:	dc6e      	bgt.n	800fb38 <_dtoa_r+0x888>
 800fa5a:	9b07      	ldr	r3, [sp, #28]
 800fa5c:	2b02      	cmp	r3, #2
 800fa5e:	dc48      	bgt.n	800faf2 <_dtoa_r+0x842>
 800fa60:	e06a      	b.n	800fb38 <_dtoa_r+0x888>
 800fa62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fa64:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fa68:	e739      	b.n	800f8de <_dtoa_r+0x62e>
 800fa6a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800fa6e:	42a3      	cmp	r3, r4
 800fa70:	db07      	blt.n	800fa82 <_dtoa_r+0x7d2>
 800fa72:	f1ba 0f00 	cmp.w	sl, #0
 800fa76:	eba3 0404 	sub.w	r4, r3, r4
 800fa7a:	db0b      	blt.n	800fa94 <_dtoa_r+0x7e4>
 800fa7c:	9e04      	ldr	r6, [sp, #16]
 800fa7e:	4652      	mov	r2, sl
 800fa80:	e72f      	b.n	800f8e2 <_dtoa_r+0x632>
 800fa82:	1ae2      	subs	r2, r4, r3
 800fa84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa86:	9e04      	ldr	r6, [sp, #16]
 800fa88:	4413      	add	r3, r2
 800fa8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa8c:	4652      	mov	r2, sl
 800fa8e:	4623      	mov	r3, r4
 800fa90:	2400      	movs	r4, #0
 800fa92:	e726      	b.n	800f8e2 <_dtoa_r+0x632>
 800fa94:	9a04      	ldr	r2, [sp, #16]
 800fa96:	eba2 060a 	sub.w	r6, r2, sl
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	e721      	b.n	800f8e2 <_dtoa_r+0x632>
 800fa9e:	9e04      	ldr	r6, [sp, #16]
 800faa0:	9d08      	ldr	r5, [sp, #32]
 800faa2:	461c      	mov	r4, r3
 800faa4:	e72a      	b.n	800f8fc <_dtoa_r+0x64c>
 800faa6:	9a01      	ldr	r2, [sp, #4]
 800faa8:	9205      	str	r2, [sp, #20]
 800faaa:	e752      	b.n	800f952 <_dtoa_r+0x6a2>
 800faac:	9901      	ldr	r1, [sp, #4]
 800faae:	461a      	mov	r2, r3
 800fab0:	e751      	b.n	800f956 <_dtoa_r+0x6a6>
 800fab2:	9b05      	ldr	r3, [sp, #20]
 800fab4:	9301      	str	r3, [sp, #4]
 800fab6:	e752      	b.n	800f95e <_dtoa_r+0x6ae>
 800fab8:	2300      	movs	r3, #0
 800faba:	e77b      	b.n	800f9b4 <_dtoa_r+0x704>
 800fabc:	9b02      	ldr	r3, [sp, #8]
 800fabe:	e779      	b.n	800f9b4 <_dtoa_r+0x704>
 800fac0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fac2:	e778      	b.n	800f9b6 <_dtoa_r+0x706>
 800fac4:	2300      	movs	r3, #0
 800fac6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fac8:	e779      	b.n	800f9be <_dtoa_r+0x70e>
 800faca:	d093      	beq.n	800f9f4 <_dtoa_r+0x744>
 800facc:	9b04      	ldr	r3, [sp, #16]
 800face:	321c      	adds	r2, #28
 800fad0:	4413      	add	r3, r2
 800fad2:	9304      	str	r3, [sp, #16]
 800fad4:	9b06      	ldr	r3, [sp, #24]
 800fad6:	4416      	add	r6, r2
 800fad8:	4413      	add	r3, r2
 800fada:	e78a      	b.n	800f9f2 <_dtoa_r+0x742>
 800fadc:	4602      	mov	r2, r0
 800fade:	e7f5      	b.n	800facc <_dtoa_r+0x81c>
 800fae0:	f1ba 0f00 	cmp.w	sl, #0
 800fae4:	f8cd 8014 	str.w	r8, [sp, #20]
 800fae8:	46d3      	mov	fp, sl
 800faea:	dc21      	bgt.n	800fb30 <_dtoa_r+0x880>
 800faec:	9b07      	ldr	r3, [sp, #28]
 800faee:	2b02      	cmp	r3, #2
 800faf0:	dd1e      	ble.n	800fb30 <_dtoa_r+0x880>
 800faf2:	f1bb 0f00 	cmp.w	fp, #0
 800faf6:	f47f addc 	bne.w	800f6b2 <_dtoa_r+0x402>
 800fafa:	4621      	mov	r1, r4
 800fafc:	465b      	mov	r3, fp
 800fafe:	2205      	movs	r2, #5
 800fb00:	4648      	mov	r0, r9
 800fb02:	f000 fa95 	bl	8010030 <__multadd>
 800fb06:	4601      	mov	r1, r0
 800fb08:	4604      	mov	r4, r0
 800fb0a:	9801      	ldr	r0, [sp, #4]
 800fb0c:	f000 fcea 	bl	80104e4 <__mcmp>
 800fb10:	2800      	cmp	r0, #0
 800fb12:	f77f adce 	ble.w	800f6b2 <_dtoa_r+0x402>
 800fb16:	463e      	mov	r6, r7
 800fb18:	2331      	movs	r3, #49	@ 0x31
 800fb1a:	f806 3b01 	strb.w	r3, [r6], #1
 800fb1e:	9b05      	ldr	r3, [sp, #20]
 800fb20:	3301      	adds	r3, #1
 800fb22:	9305      	str	r3, [sp, #20]
 800fb24:	e5c9      	b.n	800f6ba <_dtoa_r+0x40a>
 800fb26:	f8cd 8014 	str.w	r8, [sp, #20]
 800fb2a:	4654      	mov	r4, sl
 800fb2c:	4625      	mov	r5, r4
 800fb2e:	e7f2      	b.n	800fb16 <_dtoa_r+0x866>
 800fb30:	9b08      	ldr	r3, [sp, #32]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	f000 8102 	beq.w	800fd3c <_dtoa_r+0xa8c>
 800fb38:	2e00      	cmp	r6, #0
 800fb3a:	dd05      	ble.n	800fb48 <_dtoa_r+0x898>
 800fb3c:	4629      	mov	r1, r5
 800fb3e:	4632      	mov	r2, r6
 800fb40:	4648      	mov	r0, r9
 800fb42:	f000 fc63 	bl	801040c <__lshift>
 800fb46:	4605      	mov	r5, r0
 800fb48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d058      	beq.n	800fc00 <_dtoa_r+0x950>
 800fb4e:	6869      	ldr	r1, [r5, #4]
 800fb50:	4648      	mov	r0, r9
 800fb52:	f000 fa0b 	bl	800ff6c <_Balloc>
 800fb56:	4606      	mov	r6, r0
 800fb58:	b928      	cbnz	r0, 800fb66 <_dtoa_r+0x8b6>
 800fb5a:	4b82      	ldr	r3, [pc, #520]	@ (800fd64 <_dtoa_r+0xab4>)
 800fb5c:	4602      	mov	r2, r0
 800fb5e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fb62:	f7ff bbbe 	b.w	800f2e2 <_dtoa_r+0x32>
 800fb66:	692a      	ldr	r2, [r5, #16]
 800fb68:	3202      	adds	r2, #2
 800fb6a:	0092      	lsls	r2, r2, #2
 800fb6c:	f105 010c 	add.w	r1, r5, #12
 800fb70:	300c      	adds	r0, #12
 800fb72:	f7ff fafe 	bl	800f172 <memcpy>
 800fb76:	2201      	movs	r2, #1
 800fb78:	4631      	mov	r1, r6
 800fb7a:	4648      	mov	r0, r9
 800fb7c:	f000 fc46 	bl	801040c <__lshift>
 800fb80:	1c7b      	adds	r3, r7, #1
 800fb82:	9304      	str	r3, [sp, #16]
 800fb84:	eb07 030b 	add.w	r3, r7, fp
 800fb88:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb8a:	9b02      	ldr	r3, [sp, #8]
 800fb8c:	f003 0301 	and.w	r3, r3, #1
 800fb90:	46a8      	mov	r8, r5
 800fb92:	9308      	str	r3, [sp, #32]
 800fb94:	4605      	mov	r5, r0
 800fb96:	9b04      	ldr	r3, [sp, #16]
 800fb98:	9801      	ldr	r0, [sp, #4]
 800fb9a:	4621      	mov	r1, r4
 800fb9c:	f103 3bff 	add.w	fp, r3, #4294967295
 800fba0:	f7ff fafc 	bl	800f19c <quorem>
 800fba4:	4641      	mov	r1, r8
 800fba6:	9002      	str	r0, [sp, #8]
 800fba8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800fbac:	9801      	ldr	r0, [sp, #4]
 800fbae:	f000 fc99 	bl	80104e4 <__mcmp>
 800fbb2:	462a      	mov	r2, r5
 800fbb4:	9006      	str	r0, [sp, #24]
 800fbb6:	4621      	mov	r1, r4
 800fbb8:	4648      	mov	r0, r9
 800fbba:	f000 fcaf 	bl	801051c <__mdiff>
 800fbbe:	68c2      	ldr	r2, [r0, #12]
 800fbc0:	4606      	mov	r6, r0
 800fbc2:	b9fa      	cbnz	r2, 800fc04 <_dtoa_r+0x954>
 800fbc4:	4601      	mov	r1, r0
 800fbc6:	9801      	ldr	r0, [sp, #4]
 800fbc8:	f000 fc8c 	bl	80104e4 <__mcmp>
 800fbcc:	4602      	mov	r2, r0
 800fbce:	4631      	mov	r1, r6
 800fbd0:	4648      	mov	r0, r9
 800fbd2:	920a      	str	r2, [sp, #40]	@ 0x28
 800fbd4:	f000 fa0a 	bl	800ffec <_Bfree>
 800fbd8:	9b07      	ldr	r3, [sp, #28]
 800fbda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fbdc:	9e04      	ldr	r6, [sp, #16]
 800fbde:	ea42 0103 	orr.w	r1, r2, r3
 800fbe2:	9b08      	ldr	r3, [sp, #32]
 800fbe4:	4319      	orrs	r1, r3
 800fbe6:	d10f      	bne.n	800fc08 <_dtoa_r+0x958>
 800fbe8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fbec:	d028      	beq.n	800fc40 <_dtoa_r+0x990>
 800fbee:	9b06      	ldr	r3, [sp, #24]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	dd02      	ble.n	800fbfa <_dtoa_r+0x94a>
 800fbf4:	9b02      	ldr	r3, [sp, #8]
 800fbf6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800fbfa:	f88b a000 	strb.w	sl, [fp]
 800fbfe:	e55e      	b.n	800f6be <_dtoa_r+0x40e>
 800fc00:	4628      	mov	r0, r5
 800fc02:	e7bd      	b.n	800fb80 <_dtoa_r+0x8d0>
 800fc04:	2201      	movs	r2, #1
 800fc06:	e7e2      	b.n	800fbce <_dtoa_r+0x91e>
 800fc08:	9b06      	ldr	r3, [sp, #24]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	db04      	blt.n	800fc18 <_dtoa_r+0x968>
 800fc0e:	9907      	ldr	r1, [sp, #28]
 800fc10:	430b      	orrs	r3, r1
 800fc12:	9908      	ldr	r1, [sp, #32]
 800fc14:	430b      	orrs	r3, r1
 800fc16:	d120      	bne.n	800fc5a <_dtoa_r+0x9aa>
 800fc18:	2a00      	cmp	r2, #0
 800fc1a:	ddee      	ble.n	800fbfa <_dtoa_r+0x94a>
 800fc1c:	9901      	ldr	r1, [sp, #4]
 800fc1e:	2201      	movs	r2, #1
 800fc20:	4648      	mov	r0, r9
 800fc22:	f000 fbf3 	bl	801040c <__lshift>
 800fc26:	4621      	mov	r1, r4
 800fc28:	9001      	str	r0, [sp, #4]
 800fc2a:	f000 fc5b 	bl	80104e4 <__mcmp>
 800fc2e:	2800      	cmp	r0, #0
 800fc30:	dc03      	bgt.n	800fc3a <_dtoa_r+0x98a>
 800fc32:	d1e2      	bne.n	800fbfa <_dtoa_r+0x94a>
 800fc34:	f01a 0f01 	tst.w	sl, #1
 800fc38:	d0df      	beq.n	800fbfa <_dtoa_r+0x94a>
 800fc3a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fc3e:	d1d9      	bne.n	800fbf4 <_dtoa_r+0x944>
 800fc40:	2339      	movs	r3, #57	@ 0x39
 800fc42:	f88b 3000 	strb.w	r3, [fp]
 800fc46:	4633      	mov	r3, r6
 800fc48:	461e      	mov	r6, r3
 800fc4a:	3b01      	subs	r3, #1
 800fc4c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fc50:	2a39      	cmp	r2, #57	@ 0x39
 800fc52:	d052      	beq.n	800fcfa <_dtoa_r+0xa4a>
 800fc54:	3201      	adds	r2, #1
 800fc56:	701a      	strb	r2, [r3, #0]
 800fc58:	e531      	b.n	800f6be <_dtoa_r+0x40e>
 800fc5a:	2a00      	cmp	r2, #0
 800fc5c:	dd07      	ble.n	800fc6e <_dtoa_r+0x9be>
 800fc5e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fc62:	d0ed      	beq.n	800fc40 <_dtoa_r+0x990>
 800fc64:	f10a 0301 	add.w	r3, sl, #1
 800fc68:	f88b 3000 	strb.w	r3, [fp]
 800fc6c:	e527      	b.n	800f6be <_dtoa_r+0x40e>
 800fc6e:	9b04      	ldr	r3, [sp, #16]
 800fc70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc72:	f803 ac01 	strb.w	sl, [r3, #-1]
 800fc76:	4293      	cmp	r3, r2
 800fc78:	d029      	beq.n	800fcce <_dtoa_r+0xa1e>
 800fc7a:	9901      	ldr	r1, [sp, #4]
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	220a      	movs	r2, #10
 800fc80:	4648      	mov	r0, r9
 800fc82:	f000 f9d5 	bl	8010030 <__multadd>
 800fc86:	45a8      	cmp	r8, r5
 800fc88:	9001      	str	r0, [sp, #4]
 800fc8a:	f04f 0300 	mov.w	r3, #0
 800fc8e:	f04f 020a 	mov.w	r2, #10
 800fc92:	4641      	mov	r1, r8
 800fc94:	4648      	mov	r0, r9
 800fc96:	d107      	bne.n	800fca8 <_dtoa_r+0x9f8>
 800fc98:	f000 f9ca 	bl	8010030 <__multadd>
 800fc9c:	4680      	mov	r8, r0
 800fc9e:	4605      	mov	r5, r0
 800fca0:	9b04      	ldr	r3, [sp, #16]
 800fca2:	3301      	adds	r3, #1
 800fca4:	9304      	str	r3, [sp, #16]
 800fca6:	e776      	b.n	800fb96 <_dtoa_r+0x8e6>
 800fca8:	f000 f9c2 	bl	8010030 <__multadd>
 800fcac:	4629      	mov	r1, r5
 800fcae:	4680      	mov	r8, r0
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	220a      	movs	r2, #10
 800fcb4:	4648      	mov	r0, r9
 800fcb6:	f000 f9bb 	bl	8010030 <__multadd>
 800fcba:	4605      	mov	r5, r0
 800fcbc:	e7f0      	b.n	800fca0 <_dtoa_r+0x9f0>
 800fcbe:	f1bb 0f00 	cmp.w	fp, #0
 800fcc2:	bfcc      	ite	gt
 800fcc4:	465e      	movgt	r6, fp
 800fcc6:	2601      	movle	r6, #1
 800fcc8:	443e      	add	r6, r7
 800fcca:	f04f 0800 	mov.w	r8, #0
 800fcce:	9901      	ldr	r1, [sp, #4]
 800fcd0:	2201      	movs	r2, #1
 800fcd2:	4648      	mov	r0, r9
 800fcd4:	f000 fb9a 	bl	801040c <__lshift>
 800fcd8:	4621      	mov	r1, r4
 800fcda:	9001      	str	r0, [sp, #4]
 800fcdc:	f000 fc02 	bl	80104e4 <__mcmp>
 800fce0:	2800      	cmp	r0, #0
 800fce2:	dcb0      	bgt.n	800fc46 <_dtoa_r+0x996>
 800fce4:	d102      	bne.n	800fcec <_dtoa_r+0xa3c>
 800fce6:	f01a 0f01 	tst.w	sl, #1
 800fcea:	d1ac      	bne.n	800fc46 <_dtoa_r+0x996>
 800fcec:	4633      	mov	r3, r6
 800fcee:	461e      	mov	r6, r3
 800fcf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fcf4:	2a30      	cmp	r2, #48	@ 0x30
 800fcf6:	d0fa      	beq.n	800fcee <_dtoa_r+0xa3e>
 800fcf8:	e4e1      	b.n	800f6be <_dtoa_r+0x40e>
 800fcfa:	429f      	cmp	r7, r3
 800fcfc:	d1a4      	bne.n	800fc48 <_dtoa_r+0x998>
 800fcfe:	9b05      	ldr	r3, [sp, #20]
 800fd00:	3301      	adds	r3, #1
 800fd02:	9305      	str	r3, [sp, #20]
 800fd04:	2331      	movs	r3, #49	@ 0x31
 800fd06:	703b      	strb	r3, [r7, #0]
 800fd08:	e4d9      	b.n	800f6be <_dtoa_r+0x40e>
 800fd0a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fd0c:	4f16      	ldr	r7, [pc, #88]	@ (800fd68 <_dtoa_r+0xab8>)
 800fd0e:	b11b      	cbz	r3, 800fd18 <_dtoa_r+0xa68>
 800fd10:	f107 0308 	add.w	r3, r7, #8
 800fd14:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fd16:	6013      	str	r3, [r2, #0]
 800fd18:	4638      	mov	r0, r7
 800fd1a:	b011      	add	sp, #68	@ 0x44
 800fd1c:	ecbd 8b02 	vpop	{d8}
 800fd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd24:	9b07      	ldr	r3, [sp, #28]
 800fd26:	2b01      	cmp	r3, #1
 800fd28:	f77f ae2c 	ble.w	800f984 <_dtoa_r+0x6d4>
 800fd2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd30:	2001      	movs	r0, #1
 800fd32:	e64c      	b.n	800f9ce <_dtoa_r+0x71e>
 800fd34:	f1bb 0f00 	cmp.w	fp, #0
 800fd38:	f77f aed8 	ble.w	800faec <_dtoa_r+0x83c>
 800fd3c:	463e      	mov	r6, r7
 800fd3e:	9801      	ldr	r0, [sp, #4]
 800fd40:	4621      	mov	r1, r4
 800fd42:	f7ff fa2b 	bl	800f19c <quorem>
 800fd46:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800fd4a:	f806 ab01 	strb.w	sl, [r6], #1
 800fd4e:	1bf2      	subs	r2, r6, r7
 800fd50:	4593      	cmp	fp, r2
 800fd52:	ddb4      	ble.n	800fcbe <_dtoa_r+0xa0e>
 800fd54:	9901      	ldr	r1, [sp, #4]
 800fd56:	2300      	movs	r3, #0
 800fd58:	220a      	movs	r2, #10
 800fd5a:	4648      	mov	r0, r9
 800fd5c:	f000 f968 	bl	8010030 <__multadd>
 800fd60:	9001      	str	r0, [sp, #4]
 800fd62:	e7ec      	b.n	800fd3e <_dtoa_r+0xa8e>
 800fd64:	08012bf1 	.word	0x08012bf1
 800fd68:	08012b75 	.word	0x08012b75

0800fd6c <_free_r>:
 800fd6c:	b538      	push	{r3, r4, r5, lr}
 800fd6e:	4605      	mov	r5, r0
 800fd70:	2900      	cmp	r1, #0
 800fd72:	d041      	beq.n	800fdf8 <_free_r+0x8c>
 800fd74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd78:	1f0c      	subs	r4, r1, #4
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	bfb8      	it	lt
 800fd7e:	18e4      	addlt	r4, r4, r3
 800fd80:	f000 f8e8 	bl	800ff54 <__malloc_lock>
 800fd84:	4a1d      	ldr	r2, [pc, #116]	@ (800fdfc <_free_r+0x90>)
 800fd86:	6813      	ldr	r3, [r2, #0]
 800fd88:	b933      	cbnz	r3, 800fd98 <_free_r+0x2c>
 800fd8a:	6063      	str	r3, [r4, #4]
 800fd8c:	6014      	str	r4, [r2, #0]
 800fd8e:	4628      	mov	r0, r5
 800fd90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd94:	f000 b8e4 	b.w	800ff60 <__malloc_unlock>
 800fd98:	42a3      	cmp	r3, r4
 800fd9a:	d908      	bls.n	800fdae <_free_r+0x42>
 800fd9c:	6820      	ldr	r0, [r4, #0]
 800fd9e:	1821      	adds	r1, r4, r0
 800fda0:	428b      	cmp	r3, r1
 800fda2:	bf01      	itttt	eq
 800fda4:	6819      	ldreq	r1, [r3, #0]
 800fda6:	685b      	ldreq	r3, [r3, #4]
 800fda8:	1809      	addeq	r1, r1, r0
 800fdaa:	6021      	streq	r1, [r4, #0]
 800fdac:	e7ed      	b.n	800fd8a <_free_r+0x1e>
 800fdae:	461a      	mov	r2, r3
 800fdb0:	685b      	ldr	r3, [r3, #4]
 800fdb2:	b10b      	cbz	r3, 800fdb8 <_free_r+0x4c>
 800fdb4:	42a3      	cmp	r3, r4
 800fdb6:	d9fa      	bls.n	800fdae <_free_r+0x42>
 800fdb8:	6811      	ldr	r1, [r2, #0]
 800fdba:	1850      	adds	r0, r2, r1
 800fdbc:	42a0      	cmp	r0, r4
 800fdbe:	d10b      	bne.n	800fdd8 <_free_r+0x6c>
 800fdc0:	6820      	ldr	r0, [r4, #0]
 800fdc2:	4401      	add	r1, r0
 800fdc4:	1850      	adds	r0, r2, r1
 800fdc6:	4283      	cmp	r3, r0
 800fdc8:	6011      	str	r1, [r2, #0]
 800fdca:	d1e0      	bne.n	800fd8e <_free_r+0x22>
 800fdcc:	6818      	ldr	r0, [r3, #0]
 800fdce:	685b      	ldr	r3, [r3, #4]
 800fdd0:	6053      	str	r3, [r2, #4]
 800fdd2:	4408      	add	r0, r1
 800fdd4:	6010      	str	r0, [r2, #0]
 800fdd6:	e7da      	b.n	800fd8e <_free_r+0x22>
 800fdd8:	d902      	bls.n	800fde0 <_free_r+0x74>
 800fdda:	230c      	movs	r3, #12
 800fddc:	602b      	str	r3, [r5, #0]
 800fdde:	e7d6      	b.n	800fd8e <_free_r+0x22>
 800fde0:	6820      	ldr	r0, [r4, #0]
 800fde2:	1821      	adds	r1, r4, r0
 800fde4:	428b      	cmp	r3, r1
 800fde6:	bf04      	itt	eq
 800fde8:	6819      	ldreq	r1, [r3, #0]
 800fdea:	685b      	ldreq	r3, [r3, #4]
 800fdec:	6063      	str	r3, [r4, #4]
 800fdee:	bf04      	itt	eq
 800fdf0:	1809      	addeq	r1, r1, r0
 800fdf2:	6021      	streq	r1, [r4, #0]
 800fdf4:	6054      	str	r4, [r2, #4]
 800fdf6:	e7ca      	b.n	800fd8e <_free_r+0x22>
 800fdf8:	bd38      	pop	{r3, r4, r5, pc}
 800fdfa:	bf00      	nop
 800fdfc:	20005b84 	.word	0x20005b84

0800fe00 <malloc>:
 800fe00:	4b02      	ldr	r3, [pc, #8]	@ (800fe0c <malloc+0xc>)
 800fe02:	4601      	mov	r1, r0
 800fe04:	6818      	ldr	r0, [r3, #0]
 800fe06:	f000 b825 	b.w	800fe54 <_malloc_r>
 800fe0a:	bf00      	nop
 800fe0c:	20000030 	.word	0x20000030

0800fe10 <sbrk_aligned>:
 800fe10:	b570      	push	{r4, r5, r6, lr}
 800fe12:	4e0f      	ldr	r6, [pc, #60]	@ (800fe50 <sbrk_aligned+0x40>)
 800fe14:	460c      	mov	r4, r1
 800fe16:	6831      	ldr	r1, [r6, #0]
 800fe18:	4605      	mov	r5, r0
 800fe1a:	b911      	cbnz	r1, 800fe22 <sbrk_aligned+0x12>
 800fe1c:	f001 ff7a 	bl	8011d14 <_sbrk_r>
 800fe20:	6030      	str	r0, [r6, #0]
 800fe22:	4621      	mov	r1, r4
 800fe24:	4628      	mov	r0, r5
 800fe26:	f001 ff75 	bl	8011d14 <_sbrk_r>
 800fe2a:	1c43      	adds	r3, r0, #1
 800fe2c:	d103      	bne.n	800fe36 <sbrk_aligned+0x26>
 800fe2e:	f04f 34ff 	mov.w	r4, #4294967295
 800fe32:	4620      	mov	r0, r4
 800fe34:	bd70      	pop	{r4, r5, r6, pc}
 800fe36:	1cc4      	adds	r4, r0, #3
 800fe38:	f024 0403 	bic.w	r4, r4, #3
 800fe3c:	42a0      	cmp	r0, r4
 800fe3e:	d0f8      	beq.n	800fe32 <sbrk_aligned+0x22>
 800fe40:	1a21      	subs	r1, r4, r0
 800fe42:	4628      	mov	r0, r5
 800fe44:	f001 ff66 	bl	8011d14 <_sbrk_r>
 800fe48:	3001      	adds	r0, #1
 800fe4a:	d1f2      	bne.n	800fe32 <sbrk_aligned+0x22>
 800fe4c:	e7ef      	b.n	800fe2e <sbrk_aligned+0x1e>
 800fe4e:	bf00      	nop
 800fe50:	20005b80 	.word	0x20005b80

0800fe54 <_malloc_r>:
 800fe54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe58:	1ccd      	adds	r5, r1, #3
 800fe5a:	f025 0503 	bic.w	r5, r5, #3
 800fe5e:	3508      	adds	r5, #8
 800fe60:	2d0c      	cmp	r5, #12
 800fe62:	bf38      	it	cc
 800fe64:	250c      	movcc	r5, #12
 800fe66:	2d00      	cmp	r5, #0
 800fe68:	4606      	mov	r6, r0
 800fe6a:	db01      	blt.n	800fe70 <_malloc_r+0x1c>
 800fe6c:	42a9      	cmp	r1, r5
 800fe6e:	d904      	bls.n	800fe7a <_malloc_r+0x26>
 800fe70:	230c      	movs	r3, #12
 800fe72:	6033      	str	r3, [r6, #0]
 800fe74:	2000      	movs	r0, #0
 800fe76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ff50 <_malloc_r+0xfc>
 800fe7e:	f000 f869 	bl	800ff54 <__malloc_lock>
 800fe82:	f8d8 3000 	ldr.w	r3, [r8]
 800fe86:	461c      	mov	r4, r3
 800fe88:	bb44      	cbnz	r4, 800fedc <_malloc_r+0x88>
 800fe8a:	4629      	mov	r1, r5
 800fe8c:	4630      	mov	r0, r6
 800fe8e:	f7ff ffbf 	bl	800fe10 <sbrk_aligned>
 800fe92:	1c43      	adds	r3, r0, #1
 800fe94:	4604      	mov	r4, r0
 800fe96:	d158      	bne.n	800ff4a <_malloc_r+0xf6>
 800fe98:	f8d8 4000 	ldr.w	r4, [r8]
 800fe9c:	4627      	mov	r7, r4
 800fe9e:	2f00      	cmp	r7, #0
 800fea0:	d143      	bne.n	800ff2a <_malloc_r+0xd6>
 800fea2:	2c00      	cmp	r4, #0
 800fea4:	d04b      	beq.n	800ff3e <_malloc_r+0xea>
 800fea6:	6823      	ldr	r3, [r4, #0]
 800fea8:	4639      	mov	r1, r7
 800feaa:	4630      	mov	r0, r6
 800feac:	eb04 0903 	add.w	r9, r4, r3
 800feb0:	f001 ff30 	bl	8011d14 <_sbrk_r>
 800feb4:	4581      	cmp	r9, r0
 800feb6:	d142      	bne.n	800ff3e <_malloc_r+0xea>
 800feb8:	6821      	ldr	r1, [r4, #0]
 800feba:	1a6d      	subs	r5, r5, r1
 800febc:	4629      	mov	r1, r5
 800febe:	4630      	mov	r0, r6
 800fec0:	f7ff ffa6 	bl	800fe10 <sbrk_aligned>
 800fec4:	3001      	adds	r0, #1
 800fec6:	d03a      	beq.n	800ff3e <_malloc_r+0xea>
 800fec8:	6823      	ldr	r3, [r4, #0]
 800feca:	442b      	add	r3, r5
 800fecc:	6023      	str	r3, [r4, #0]
 800fece:	f8d8 3000 	ldr.w	r3, [r8]
 800fed2:	685a      	ldr	r2, [r3, #4]
 800fed4:	bb62      	cbnz	r2, 800ff30 <_malloc_r+0xdc>
 800fed6:	f8c8 7000 	str.w	r7, [r8]
 800feda:	e00f      	b.n	800fefc <_malloc_r+0xa8>
 800fedc:	6822      	ldr	r2, [r4, #0]
 800fede:	1b52      	subs	r2, r2, r5
 800fee0:	d420      	bmi.n	800ff24 <_malloc_r+0xd0>
 800fee2:	2a0b      	cmp	r2, #11
 800fee4:	d917      	bls.n	800ff16 <_malloc_r+0xc2>
 800fee6:	1961      	adds	r1, r4, r5
 800fee8:	42a3      	cmp	r3, r4
 800feea:	6025      	str	r5, [r4, #0]
 800feec:	bf18      	it	ne
 800feee:	6059      	strne	r1, [r3, #4]
 800fef0:	6863      	ldr	r3, [r4, #4]
 800fef2:	bf08      	it	eq
 800fef4:	f8c8 1000 	streq.w	r1, [r8]
 800fef8:	5162      	str	r2, [r4, r5]
 800fefa:	604b      	str	r3, [r1, #4]
 800fefc:	4630      	mov	r0, r6
 800fefe:	f000 f82f 	bl	800ff60 <__malloc_unlock>
 800ff02:	f104 000b 	add.w	r0, r4, #11
 800ff06:	1d23      	adds	r3, r4, #4
 800ff08:	f020 0007 	bic.w	r0, r0, #7
 800ff0c:	1ac2      	subs	r2, r0, r3
 800ff0e:	bf1c      	itt	ne
 800ff10:	1a1b      	subne	r3, r3, r0
 800ff12:	50a3      	strne	r3, [r4, r2]
 800ff14:	e7af      	b.n	800fe76 <_malloc_r+0x22>
 800ff16:	6862      	ldr	r2, [r4, #4]
 800ff18:	42a3      	cmp	r3, r4
 800ff1a:	bf0c      	ite	eq
 800ff1c:	f8c8 2000 	streq.w	r2, [r8]
 800ff20:	605a      	strne	r2, [r3, #4]
 800ff22:	e7eb      	b.n	800fefc <_malloc_r+0xa8>
 800ff24:	4623      	mov	r3, r4
 800ff26:	6864      	ldr	r4, [r4, #4]
 800ff28:	e7ae      	b.n	800fe88 <_malloc_r+0x34>
 800ff2a:	463c      	mov	r4, r7
 800ff2c:	687f      	ldr	r7, [r7, #4]
 800ff2e:	e7b6      	b.n	800fe9e <_malloc_r+0x4a>
 800ff30:	461a      	mov	r2, r3
 800ff32:	685b      	ldr	r3, [r3, #4]
 800ff34:	42a3      	cmp	r3, r4
 800ff36:	d1fb      	bne.n	800ff30 <_malloc_r+0xdc>
 800ff38:	2300      	movs	r3, #0
 800ff3a:	6053      	str	r3, [r2, #4]
 800ff3c:	e7de      	b.n	800fefc <_malloc_r+0xa8>
 800ff3e:	230c      	movs	r3, #12
 800ff40:	6033      	str	r3, [r6, #0]
 800ff42:	4630      	mov	r0, r6
 800ff44:	f000 f80c 	bl	800ff60 <__malloc_unlock>
 800ff48:	e794      	b.n	800fe74 <_malloc_r+0x20>
 800ff4a:	6005      	str	r5, [r0, #0]
 800ff4c:	e7d6      	b.n	800fefc <_malloc_r+0xa8>
 800ff4e:	bf00      	nop
 800ff50:	20005b84 	.word	0x20005b84

0800ff54 <__malloc_lock>:
 800ff54:	4801      	ldr	r0, [pc, #4]	@ (800ff5c <__malloc_lock+0x8>)
 800ff56:	f7ff b90a 	b.w	800f16e <__retarget_lock_acquire_recursive>
 800ff5a:	bf00      	nop
 800ff5c:	20005b7c 	.word	0x20005b7c

0800ff60 <__malloc_unlock>:
 800ff60:	4801      	ldr	r0, [pc, #4]	@ (800ff68 <__malloc_unlock+0x8>)
 800ff62:	f7ff b905 	b.w	800f170 <__retarget_lock_release_recursive>
 800ff66:	bf00      	nop
 800ff68:	20005b7c 	.word	0x20005b7c

0800ff6c <_Balloc>:
 800ff6c:	b570      	push	{r4, r5, r6, lr}
 800ff6e:	69c6      	ldr	r6, [r0, #28]
 800ff70:	4604      	mov	r4, r0
 800ff72:	460d      	mov	r5, r1
 800ff74:	b976      	cbnz	r6, 800ff94 <_Balloc+0x28>
 800ff76:	2010      	movs	r0, #16
 800ff78:	f7ff ff42 	bl	800fe00 <malloc>
 800ff7c:	4602      	mov	r2, r0
 800ff7e:	61e0      	str	r0, [r4, #28]
 800ff80:	b920      	cbnz	r0, 800ff8c <_Balloc+0x20>
 800ff82:	4b18      	ldr	r3, [pc, #96]	@ (800ffe4 <_Balloc+0x78>)
 800ff84:	4818      	ldr	r0, [pc, #96]	@ (800ffe8 <_Balloc+0x7c>)
 800ff86:	216b      	movs	r1, #107	@ 0x6b
 800ff88:	f001 fede 	bl	8011d48 <__assert_func>
 800ff8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ff90:	6006      	str	r6, [r0, #0]
 800ff92:	60c6      	str	r6, [r0, #12]
 800ff94:	69e6      	ldr	r6, [r4, #28]
 800ff96:	68f3      	ldr	r3, [r6, #12]
 800ff98:	b183      	cbz	r3, 800ffbc <_Balloc+0x50>
 800ff9a:	69e3      	ldr	r3, [r4, #28]
 800ff9c:	68db      	ldr	r3, [r3, #12]
 800ff9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ffa2:	b9b8      	cbnz	r0, 800ffd4 <_Balloc+0x68>
 800ffa4:	2101      	movs	r1, #1
 800ffa6:	fa01 f605 	lsl.w	r6, r1, r5
 800ffaa:	1d72      	adds	r2, r6, #5
 800ffac:	0092      	lsls	r2, r2, #2
 800ffae:	4620      	mov	r0, r4
 800ffb0:	f001 fee8 	bl	8011d84 <_calloc_r>
 800ffb4:	b160      	cbz	r0, 800ffd0 <_Balloc+0x64>
 800ffb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ffba:	e00e      	b.n	800ffda <_Balloc+0x6e>
 800ffbc:	2221      	movs	r2, #33	@ 0x21
 800ffbe:	2104      	movs	r1, #4
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	f001 fedf 	bl	8011d84 <_calloc_r>
 800ffc6:	69e3      	ldr	r3, [r4, #28]
 800ffc8:	60f0      	str	r0, [r6, #12]
 800ffca:	68db      	ldr	r3, [r3, #12]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d1e4      	bne.n	800ff9a <_Balloc+0x2e>
 800ffd0:	2000      	movs	r0, #0
 800ffd2:	bd70      	pop	{r4, r5, r6, pc}
 800ffd4:	6802      	ldr	r2, [r0, #0]
 800ffd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ffda:	2300      	movs	r3, #0
 800ffdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ffe0:	e7f7      	b.n	800ffd2 <_Balloc+0x66>
 800ffe2:	bf00      	nop
 800ffe4:	08012b82 	.word	0x08012b82
 800ffe8:	08012c02 	.word	0x08012c02

0800ffec <_Bfree>:
 800ffec:	b570      	push	{r4, r5, r6, lr}
 800ffee:	69c6      	ldr	r6, [r0, #28]
 800fff0:	4605      	mov	r5, r0
 800fff2:	460c      	mov	r4, r1
 800fff4:	b976      	cbnz	r6, 8010014 <_Bfree+0x28>
 800fff6:	2010      	movs	r0, #16
 800fff8:	f7ff ff02 	bl	800fe00 <malloc>
 800fffc:	4602      	mov	r2, r0
 800fffe:	61e8      	str	r0, [r5, #28]
 8010000:	b920      	cbnz	r0, 801000c <_Bfree+0x20>
 8010002:	4b09      	ldr	r3, [pc, #36]	@ (8010028 <_Bfree+0x3c>)
 8010004:	4809      	ldr	r0, [pc, #36]	@ (801002c <_Bfree+0x40>)
 8010006:	218f      	movs	r1, #143	@ 0x8f
 8010008:	f001 fe9e 	bl	8011d48 <__assert_func>
 801000c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010010:	6006      	str	r6, [r0, #0]
 8010012:	60c6      	str	r6, [r0, #12]
 8010014:	b13c      	cbz	r4, 8010026 <_Bfree+0x3a>
 8010016:	69eb      	ldr	r3, [r5, #28]
 8010018:	6862      	ldr	r2, [r4, #4]
 801001a:	68db      	ldr	r3, [r3, #12]
 801001c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010020:	6021      	str	r1, [r4, #0]
 8010022:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010026:	bd70      	pop	{r4, r5, r6, pc}
 8010028:	08012b82 	.word	0x08012b82
 801002c:	08012c02 	.word	0x08012c02

08010030 <__multadd>:
 8010030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010034:	690d      	ldr	r5, [r1, #16]
 8010036:	4607      	mov	r7, r0
 8010038:	460c      	mov	r4, r1
 801003a:	461e      	mov	r6, r3
 801003c:	f101 0c14 	add.w	ip, r1, #20
 8010040:	2000      	movs	r0, #0
 8010042:	f8dc 3000 	ldr.w	r3, [ip]
 8010046:	b299      	uxth	r1, r3
 8010048:	fb02 6101 	mla	r1, r2, r1, r6
 801004c:	0c1e      	lsrs	r6, r3, #16
 801004e:	0c0b      	lsrs	r3, r1, #16
 8010050:	fb02 3306 	mla	r3, r2, r6, r3
 8010054:	b289      	uxth	r1, r1
 8010056:	3001      	adds	r0, #1
 8010058:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801005c:	4285      	cmp	r5, r0
 801005e:	f84c 1b04 	str.w	r1, [ip], #4
 8010062:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010066:	dcec      	bgt.n	8010042 <__multadd+0x12>
 8010068:	b30e      	cbz	r6, 80100ae <__multadd+0x7e>
 801006a:	68a3      	ldr	r3, [r4, #8]
 801006c:	42ab      	cmp	r3, r5
 801006e:	dc19      	bgt.n	80100a4 <__multadd+0x74>
 8010070:	6861      	ldr	r1, [r4, #4]
 8010072:	4638      	mov	r0, r7
 8010074:	3101      	adds	r1, #1
 8010076:	f7ff ff79 	bl	800ff6c <_Balloc>
 801007a:	4680      	mov	r8, r0
 801007c:	b928      	cbnz	r0, 801008a <__multadd+0x5a>
 801007e:	4602      	mov	r2, r0
 8010080:	4b0c      	ldr	r3, [pc, #48]	@ (80100b4 <__multadd+0x84>)
 8010082:	480d      	ldr	r0, [pc, #52]	@ (80100b8 <__multadd+0x88>)
 8010084:	21ba      	movs	r1, #186	@ 0xba
 8010086:	f001 fe5f 	bl	8011d48 <__assert_func>
 801008a:	6922      	ldr	r2, [r4, #16]
 801008c:	3202      	adds	r2, #2
 801008e:	f104 010c 	add.w	r1, r4, #12
 8010092:	0092      	lsls	r2, r2, #2
 8010094:	300c      	adds	r0, #12
 8010096:	f7ff f86c 	bl	800f172 <memcpy>
 801009a:	4621      	mov	r1, r4
 801009c:	4638      	mov	r0, r7
 801009e:	f7ff ffa5 	bl	800ffec <_Bfree>
 80100a2:	4644      	mov	r4, r8
 80100a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80100a8:	3501      	adds	r5, #1
 80100aa:	615e      	str	r6, [r3, #20]
 80100ac:	6125      	str	r5, [r4, #16]
 80100ae:	4620      	mov	r0, r4
 80100b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100b4:	08012bf1 	.word	0x08012bf1
 80100b8:	08012c02 	.word	0x08012c02

080100bc <__s2b>:
 80100bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100c0:	460c      	mov	r4, r1
 80100c2:	4615      	mov	r5, r2
 80100c4:	461f      	mov	r7, r3
 80100c6:	2209      	movs	r2, #9
 80100c8:	3308      	adds	r3, #8
 80100ca:	4606      	mov	r6, r0
 80100cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80100d0:	2100      	movs	r1, #0
 80100d2:	2201      	movs	r2, #1
 80100d4:	429a      	cmp	r2, r3
 80100d6:	db09      	blt.n	80100ec <__s2b+0x30>
 80100d8:	4630      	mov	r0, r6
 80100da:	f7ff ff47 	bl	800ff6c <_Balloc>
 80100de:	b940      	cbnz	r0, 80100f2 <__s2b+0x36>
 80100e0:	4602      	mov	r2, r0
 80100e2:	4b19      	ldr	r3, [pc, #100]	@ (8010148 <__s2b+0x8c>)
 80100e4:	4819      	ldr	r0, [pc, #100]	@ (801014c <__s2b+0x90>)
 80100e6:	21d3      	movs	r1, #211	@ 0xd3
 80100e8:	f001 fe2e 	bl	8011d48 <__assert_func>
 80100ec:	0052      	lsls	r2, r2, #1
 80100ee:	3101      	adds	r1, #1
 80100f0:	e7f0      	b.n	80100d4 <__s2b+0x18>
 80100f2:	9b08      	ldr	r3, [sp, #32]
 80100f4:	6143      	str	r3, [r0, #20]
 80100f6:	2d09      	cmp	r5, #9
 80100f8:	f04f 0301 	mov.w	r3, #1
 80100fc:	6103      	str	r3, [r0, #16]
 80100fe:	dd16      	ble.n	801012e <__s2b+0x72>
 8010100:	f104 0909 	add.w	r9, r4, #9
 8010104:	46c8      	mov	r8, r9
 8010106:	442c      	add	r4, r5
 8010108:	f818 3b01 	ldrb.w	r3, [r8], #1
 801010c:	4601      	mov	r1, r0
 801010e:	3b30      	subs	r3, #48	@ 0x30
 8010110:	220a      	movs	r2, #10
 8010112:	4630      	mov	r0, r6
 8010114:	f7ff ff8c 	bl	8010030 <__multadd>
 8010118:	45a0      	cmp	r8, r4
 801011a:	d1f5      	bne.n	8010108 <__s2b+0x4c>
 801011c:	f1a5 0408 	sub.w	r4, r5, #8
 8010120:	444c      	add	r4, r9
 8010122:	1b2d      	subs	r5, r5, r4
 8010124:	1963      	adds	r3, r4, r5
 8010126:	42bb      	cmp	r3, r7
 8010128:	db04      	blt.n	8010134 <__s2b+0x78>
 801012a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801012e:	340a      	adds	r4, #10
 8010130:	2509      	movs	r5, #9
 8010132:	e7f6      	b.n	8010122 <__s2b+0x66>
 8010134:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010138:	4601      	mov	r1, r0
 801013a:	3b30      	subs	r3, #48	@ 0x30
 801013c:	220a      	movs	r2, #10
 801013e:	4630      	mov	r0, r6
 8010140:	f7ff ff76 	bl	8010030 <__multadd>
 8010144:	e7ee      	b.n	8010124 <__s2b+0x68>
 8010146:	bf00      	nop
 8010148:	08012bf1 	.word	0x08012bf1
 801014c:	08012c02 	.word	0x08012c02

08010150 <__hi0bits>:
 8010150:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010154:	4603      	mov	r3, r0
 8010156:	bf36      	itet	cc
 8010158:	0403      	lslcc	r3, r0, #16
 801015a:	2000      	movcs	r0, #0
 801015c:	2010      	movcc	r0, #16
 801015e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010162:	bf3c      	itt	cc
 8010164:	021b      	lslcc	r3, r3, #8
 8010166:	3008      	addcc	r0, #8
 8010168:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801016c:	bf3c      	itt	cc
 801016e:	011b      	lslcc	r3, r3, #4
 8010170:	3004      	addcc	r0, #4
 8010172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010176:	bf3c      	itt	cc
 8010178:	009b      	lslcc	r3, r3, #2
 801017a:	3002      	addcc	r0, #2
 801017c:	2b00      	cmp	r3, #0
 801017e:	db05      	blt.n	801018c <__hi0bits+0x3c>
 8010180:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010184:	f100 0001 	add.w	r0, r0, #1
 8010188:	bf08      	it	eq
 801018a:	2020      	moveq	r0, #32
 801018c:	4770      	bx	lr

0801018e <__lo0bits>:
 801018e:	6803      	ldr	r3, [r0, #0]
 8010190:	4602      	mov	r2, r0
 8010192:	f013 0007 	ands.w	r0, r3, #7
 8010196:	d00b      	beq.n	80101b0 <__lo0bits+0x22>
 8010198:	07d9      	lsls	r1, r3, #31
 801019a:	d421      	bmi.n	80101e0 <__lo0bits+0x52>
 801019c:	0798      	lsls	r0, r3, #30
 801019e:	bf49      	itett	mi
 80101a0:	085b      	lsrmi	r3, r3, #1
 80101a2:	089b      	lsrpl	r3, r3, #2
 80101a4:	2001      	movmi	r0, #1
 80101a6:	6013      	strmi	r3, [r2, #0]
 80101a8:	bf5c      	itt	pl
 80101aa:	6013      	strpl	r3, [r2, #0]
 80101ac:	2002      	movpl	r0, #2
 80101ae:	4770      	bx	lr
 80101b0:	b299      	uxth	r1, r3
 80101b2:	b909      	cbnz	r1, 80101b8 <__lo0bits+0x2a>
 80101b4:	0c1b      	lsrs	r3, r3, #16
 80101b6:	2010      	movs	r0, #16
 80101b8:	b2d9      	uxtb	r1, r3
 80101ba:	b909      	cbnz	r1, 80101c0 <__lo0bits+0x32>
 80101bc:	3008      	adds	r0, #8
 80101be:	0a1b      	lsrs	r3, r3, #8
 80101c0:	0719      	lsls	r1, r3, #28
 80101c2:	bf04      	itt	eq
 80101c4:	091b      	lsreq	r3, r3, #4
 80101c6:	3004      	addeq	r0, #4
 80101c8:	0799      	lsls	r1, r3, #30
 80101ca:	bf04      	itt	eq
 80101cc:	089b      	lsreq	r3, r3, #2
 80101ce:	3002      	addeq	r0, #2
 80101d0:	07d9      	lsls	r1, r3, #31
 80101d2:	d403      	bmi.n	80101dc <__lo0bits+0x4e>
 80101d4:	085b      	lsrs	r3, r3, #1
 80101d6:	f100 0001 	add.w	r0, r0, #1
 80101da:	d003      	beq.n	80101e4 <__lo0bits+0x56>
 80101dc:	6013      	str	r3, [r2, #0]
 80101de:	4770      	bx	lr
 80101e0:	2000      	movs	r0, #0
 80101e2:	4770      	bx	lr
 80101e4:	2020      	movs	r0, #32
 80101e6:	4770      	bx	lr

080101e8 <__i2b>:
 80101e8:	b510      	push	{r4, lr}
 80101ea:	460c      	mov	r4, r1
 80101ec:	2101      	movs	r1, #1
 80101ee:	f7ff febd 	bl	800ff6c <_Balloc>
 80101f2:	4602      	mov	r2, r0
 80101f4:	b928      	cbnz	r0, 8010202 <__i2b+0x1a>
 80101f6:	4b05      	ldr	r3, [pc, #20]	@ (801020c <__i2b+0x24>)
 80101f8:	4805      	ldr	r0, [pc, #20]	@ (8010210 <__i2b+0x28>)
 80101fa:	f240 1145 	movw	r1, #325	@ 0x145
 80101fe:	f001 fda3 	bl	8011d48 <__assert_func>
 8010202:	2301      	movs	r3, #1
 8010204:	6144      	str	r4, [r0, #20]
 8010206:	6103      	str	r3, [r0, #16]
 8010208:	bd10      	pop	{r4, pc}
 801020a:	bf00      	nop
 801020c:	08012bf1 	.word	0x08012bf1
 8010210:	08012c02 	.word	0x08012c02

08010214 <__multiply>:
 8010214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010218:	4617      	mov	r7, r2
 801021a:	690a      	ldr	r2, [r1, #16]
 801021c:	693b      	ldr	r3, [r7, #16]
 801021e:	429a      	cmp	r2, r3
 8010220:	bfa8      	it	ge
 8010222:	463b      	movge	r3, r7
 8010224:	4689      	mov	r9, r1
 8010226:	bfa4      	itt	ge
 8010228:	460f      	movge	r7, r1
 801022a:	4699      	movge	r9, r3
 801022c:	693d      	ldr	r5, [r7, #16]
 801022e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	6879      	ldr	r1, [r7, #4]
 8010236:	eb05 060a 	add.w	r6, r5, sl
 801023a:	42b3      	cmp	r3, r6
 801023c:	b085      	sub	sp, #20
 801023e:	bfb8      	it	lt
 8010240:	3101      	addlt	r1, #1
 8010242:	f7ff fe93 	bl	800ff6c <_Balloc>
 8010246:	b930      	cbnz	r0, 8010256 <__multiply+0x42>
 8010248:	4602      	mov	r2, r0
 801024a:	4b41      	ldr	r3, [pc, #260]	@ (8010350 <__multiply+0x13c>)
 801024c:	4841      	ldr	r0, [pc, #260]	@ (8010354 <__multiply+0x140>)
 801024e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010252:	f001 fd79 	bl	8011d48 <__assert_func>
 8010256:	f100 0414 	add.w	r4, r0, #20
 801025a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801025e:	4623      	mov	r3, r4
 8010260:	2200      	movs	r2, #0
 8010262:	4573      	cmp	r3, lr
 8010264:	d320      	bcc.n	80102a8 <__multiply+0x94>
 8010266:	f107 0814 	add.w	r8, r7, #20
 801026a:	f109 0114 	add.w	r1, r9, #20
 801026e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8010272:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8010276:	9302      	str	r3, [sp, #8]
 8010278:	1beb      	subs	r3, r5, r7
 801027a:	3b15      	subs	r3, #21
 801027c:	f023 0303 	bic.w	r3, r3, #3
 8010280:	3304      	adds	r3, #4
 8010282:	3715      	adds	r7, #21
 8010284:	42bd      	cmp	r5, r7
 8010286:	bf38      	it	cc
 8010288:	2304      	movcc	r3, #4
 801028a:	9301      	str	r3, [sp, #4]
 801028c:	9b02      	ldr	r3, [sp, #8]
 801028e:	9103      	str	r1, [sp, #12]
 8010290:	428b      	cmp	r3, r1
 8010292:	d80c      	bhi.n	80102ae <__multiply+0x9a>
 8010294:	2e00      	cmp	r6, #0
 8010296:	dd03      	ble.n	80102a0 <__multiply+0x8c>
 8010298:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801029c:	2b00      	cmp	r3, #0
 801029e:	d055      	beq.n	801034c <__multiply+0x138>
 80102a0:	6106      	str	r6, [r0, #16]
 80102a2:	b005      	add	sp, #20
 80102a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102a8:	f843 2b04 	str.w	r2, [r3], #4
 80102ac:	e7d9      	b.n	8010262 <__multiply+0x4e>
 80102ae:	f8b1 a000 	ldrh.w	sl, [r1]
 80102b2:	f1ba 0f00 	cmp.w	sl, #0
 80102b6:	d01f      	beq.n	80102f8 <__multiply+0xe4>
 80102b8:	46c4      	mov	ip, r8
 80102ba:	46a1      	mov	r9, r4
 80102bc:	2700      	movs	r7, #0
 80102be:	f85c 2b04 	ldr.w	r2, [ip], #4
 80102c2:	f8d9 3000 	ldr.w	r3, [r9]
 80102c6:	fa1f fb82 	uxth.w	fp, r2
 80102ca:	b29b      	uxth	r3, r3
 80102cc:	fb0a 330b 	mla	r3, sl, fp, r3
 80102d0:	443b      	add	r3, r7
 80102d2:	f8d9 7000 	ldr.w	r7, [r9]
 80102d6:	0c12      	lsrs	r2, r2, #16
 80102d8:	0c3f      	lsrs	r7, r7, #16
 80102da:	fb0a 7202 	mla	r2, sl, r2, r7
 80102de:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80102e2:	b29b      	uxth	r3, r3
 80102e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102e8:	4565      	cmp	r5, ip
 80102ea:	f849 3b04 	str.w	r3, [r9], #4
 80102ee:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80102f2:	d8e4      	bhi.n	80102be <__multiply+0xaa>
 80102f4:	9b01      	ldr	r3, [sp, #4]
 80102f6:	50e7      	str	r7, [r4, r3]
 80102f8:	9b03      	ldr	r3, [sp, #12]
 80102fa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80102fe:	3104      	adds	r1, #4
 8010300:	f1b9 0f00 	cmp.w	r9, #0
 8010304:	d020      	beq.n	8010348 <__multiply+0x134>
 8010306:	6823      	ldr	r3, [r4, #0]
 8010308:	4647      	mov	r7, r8
 801030a:	46a4      	mov	ip, r4
 801030c:	f04f 0a00 	mov.w	sl, #0
 8010310:	f8b7 b000 	ldrh.w	fp, [r7]
 8010314:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010318:	fb09 220b 	mla	r2, r9, fp, r2
 801031c:	4452      	add	r2, sl
 801031e:	b29b      	uxth	r3, r3
 8010320:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010324:	f84c 3b04 	str.w	r3, [ip], #4
 8010328:	f857 3b04 	ldr.w	r3, [r7], #4
 801032c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010330:	f8bc 3000 	ldrh.w	r3, [ip]
 8010334:	fb09 330a 	mla	r3, r9, sl, r3
 8010338:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801033c:	42bd      	cmp	r5, r7
 801033e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010342:	d8e5      	bhi.n	8010310 <__multiply+0xfc>
 8010344:	9a01      	ldr	r2, [sp, #4]
 8010346:	50a3      	str	r3, [r4, r2]
 8010348:	3404      	adds	r4, #4
 801034a:	e79f      	b.n	801028c <__multiply+0x78>
 801034c:	3e01      	subs	r6, #1
 801034e:	e7a1      	b.n	8010294 <__multiply+0x80>
 8010350:	08012bf1 	.word	0x08012bf1
 8010354:	08012c02 	.word	0x08012c02

08010358 <__pow5mult>:
 8010358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801035c:	4615      	mov	r5, r2
 801035e:	f012 0203 	ands.w	r2, r2, #3
 8010362:	4607      	mov	r7, r0
 8010364:	460e      	mov	r6, r1
 8010366:	d007      	beq.n	8010378 <__pow5mult+0x20>
 8010368:	4c25      	ldr	r4, [pc, #148]	@ (8010400 <__pow5mult+0xa8>)
 801036a:	3a01      	subs	r2, #1
 801036c:	2300      	movs	r3, #0
 801036e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010372:	f7ff fe5d 	bl	8010030 <__multadd>
 8010376:	4606      	mov	r6, r0
 8010378:	10ad      	asrs	r5, r5, #2
 801037a:	d03d      	beq.n	80103f8 <__pow5mult+0xa0>
 801037c:	69fc      	ldr	r4, [r7, #28]
 801037e:	b97c      	cbnz	r4, 80103a0 <__pow5mult+0x48>
 8010380:	2010      	movs	r0, #16
 8010382:	f7ff fd3d 	bl	800fe00 <malloc>
 8010386:	4602      	mov	r2, r0
 8010388:	61f8      	str	r0, [r7, #28]
 801038a:	b928      	cbnz	r0, 8010398 <__pow5mult+0x40>
 801038c:	4b1d      	ldr	r3, [pc, #116]	@ (8010404 <__pow5mult+0xac>)
 801038e:	481e      	ldr	r0, [pc, #120]	@ (8010408 <__pow5mult+0xb0>)
 8010390:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010394:	f001 fcd8 	bl	8011d48 <__assert_func>
 8010398:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801039c:	6004      	str	r4, [r0, #0]
 801039e:	60c4      	str	r4, [r0, #12]
 80103a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80103a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80103a8:	b94c      	cbnz	r4, 80103be <__pow5mult+0x66>
 80103aa:	f240 2171 	movw	r1, #625	@ 0x271
 80103ae:	4638      	mov	r0, r7
 80103b0:	f7ff ff1a 	bl	80101e8 <__i2b>
 80103b4:	2300      	movs	r3, #0
 80103b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80103ba:	4604      	mov	r4, r0
 80103bc:	6003      	str	r3, [r0, #0]
 80103be:	f04f 0900 	mov.w	r9, #0
 80103c2:	07eb      	lsls	r3, r5, #31
 80103c4:	d50a      	bpl.n	80103dc <__pow5mult+0x84>
 80103c6:	4631      	mov	r1, r6
 80103c8:	4622      	mov	r2, r4
 80103ca:	4638      	mov	r0, r7
 80103cc:	f7ff ff22 	bl	8010214 <__multiply>
 80103d0:	4631      	mov	r1, r6
 80103d2:	4680      	mov	r8, r0
 80103d4:	4638      	mov	r0, r7
 80103d6:	f7ff fe09 	bl	800ffec <_Bfree>
 80103da:	4646      	mov	r6, r8
 80103dc:	106d      	asrs	r5, r5, #1
 80103de:	d00b      	beq.n	80103f8 <__pow5mult+0xa0>
 80103e0:	6820      	ldr	r0, [r4, #0]
 80103e2:	b938      	cbnz	r0, 80103f4 <__pow5mult+0x9c>
 80103e4:	4622      	mov	r2, r4
 80103e6:	4621      	mov	r1, r4
 80103e8:	4638      	mov	r0, r7
 80103ea:	f7ff ff13 	bl	8010214 <__multiply>
 80103ee:	6020      	str	r0, [r4, #0]
 80103f0:	f8c0 9000 	str.w	r9, [r0]
 80103f4:	4604      	mov	r4, r0
 80103f6:	e7e4      	b.n	80103c2 <__pow5mult+0x6a>
 80103f8:	4630      	mov	r0, r6
 80103fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103fe:	bf00      	nop
 8010400:	08012d14 	.word	0x08012d14
 8010404:	08012b82 	.word	0x08012b82
 8010408:	08012c02 	.word	0x08012c02

0801040c <__lshift>:
 801040c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010410:	460c      	mov	r4, r1
 8010412:	6849      	ldr	r1, [r1, #4]
 8010414:	6923      	ldr	r3, [r4, #16]
 8010416:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801041a:	68a3      	ldr	r3, [r4, #8]
 801041c:	4607      	mov	r7, r0
 801041e:	4691      	mov	r9, r2
 8010420:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010424:	f108 0601 	add.w	r6, r8, #1
 8010428:	42b3      	cmp	r3, r6
 801042a:	db0b      	blt.n	8010444 <__lshift+0x38>
 801042c:	4638      	mov	r0, r7
 801042e:	f7ff fd9d 	bl	800ff6c <_Balloc>
 8010432:	4605      	mov	r5, r0
 8010434:	b948      	cbnz	r0, 801044a <__lshift+0x3e>
 8010436:	4602      	mov	r2, r0
 8010438:	4b28      	ldr	r3, [pc, #160]	@ (80104dc <__lshift+0xd0>)
 801043a:	4829      	ldr	r0, [pc, #164]	@ (80104e0 <__lshift+0xd4>)
 801043c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010440:	f001 fc82 	bl	8011d48 <__assert_func>
 8010444:	3101      	adds	r1, #1
 8010446:	005b      	lsls	r3, r3, #1
 8010448:	e7ee      	b.n	8010428 <__lshift+0x1c>
 801044a:	2300      	movs	r3, #0
 801044c:	f100 0114 	add.w	r1, r0, #20
 8010450:	f100 0210 	add.w	r2, r0, #16
 8010454:	4618      	mov	r0, r3
 8010456:	4553      	cmp	r3, sl
 8010458:	db33      	blt.n	80104c2 <__lshift+0xb6>
 801045a:	6920      	ldr	r0, [r4, #16]
 801045c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010460:	f104 0314 	add.w	r3, r4, #20
 8010464:	f019 091f 	ands.w	r9, r9, #31
 8010468:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801046c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010470:	d02b      	beq.n	80104ca <__lshift+0xbe>
 8010472:	f1c9 0e20 	rsb	lr, r9, #32
 8010476:	468a      	mov	sl, r1
 8010478:	2200      	movs	r2, #0
 801047a:	6818      	ldr	r0, [r3, #0]
 801047c:	fa00 f009 	lsl.w	r0, r0, r9
 8010480:	4310      	orrs	r0, r2
 8010482:	f84a 0b04 	str.w	r0, [sl], #4
 8010486:	f853 2b04 	ldr.w	r2, [r3], #4
 801048a:	459c      	cmp	ip, r3
 801048c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010490:	d8f3      	bhi.n	801047a <__lshift+0x6e>
 8010492:	ebac 0304 	sub.w	r3, ip, r4
 8010496:	3b15      	subs	r3, #21
 8010498:	f023 0303 	bic.w	r3, r3, #3
 801049c:	3304      	adds	r3, #4
 801049e:	f104 0015 	add.w	r0, r4, #21
 80104a2:	4560      	cmp	r0, ip
 80104a4:	bf88      	it	hi
 80104a6:	2304      	movhi	r3, #4
 80104a8:	50ca      	str	r2, [r1, r3]
 80104aa:	b10a      	cbz	r2, 80104b0 <__lshift+0xa4>
 80104ac:	f108 0602 	add.w	r6, r8, #2
 80104b0:	3e01      	subs	r6, #1
 80104b2:	4638      	mov	r0, r7
 80104b4:	612e      	str	r6, [r5, #16]
 80104b6:	4621      	mov	r1, r4
 80104b8:	f7ff fd98 	bl	800ffec <_Bfree>
 80104bc:	4628      	mov	r0, r5
 80104be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80104c6:	3301      	adds	r3, #1
 80104c8:	e7c5      	b.n	8010456 <__lshift+0x4a>
 80104ca:	3904      	subs	r1, #4
 80104cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80104d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80104d4:	459c      	cmp	ip, r3
 80104d6:	d8f9      	bhi.n	80104cc <__lshift+0xc0>
 80104d8:	e7ea      	b.n	80104b0 <__lshift+0xa4>
 80104da:	bf00      	nop
 80104dc:	08012bf1 	.word	0x08012bf1
 80104e0:	08012c02 	.word	0x08012c02

080104e4 <__mcmp>:
 80104e4:	690a      	ldr	r2, [r1, #16]
 80104e6:	4603      	mov	r3, r0
 80104e8:	6900      	ldr	r0, [r0, #16]
 80104ea:	1a80      	subs	r0, r0, r2
 80104ec:	b530      	push	{r4, r5, lr}
 80104ee:	d10e      	bne.n	801050e <__mcmp+0x2a>
 80104f0:	3314      	adds	r3, #20
 80104f2:	3114      	adds	r1, #20
 80104f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80104f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80104fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010500:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010504:	4295      	cmp	r5, r2
 8010506:	d003      	beq.n	8010510 <__mcmp+0x2c>
 8010508:	d205      	bcs.n	8010516 <__mcmp+0x32>
 801050a:	f04f 30ff 	mov.w	r0, #4294967295
 801050e:	bd30      	pop	{r4, r5, pc}
 8010510:	42a3      	cmp	r3, r4
 8010512:	d3f3      	bcc.n	80104fc <__mcmp+0x18>
 8010514:	e7fb      	b.n	801050e <__mcmp+0x2a>
 8010516:	2001      	movs	r0, #1
 8010518:	e7f9      	b.n	801050e <__mcmp+0x2a>
	...

0801051c <__mdiff>:
 801051c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010520:	4689      	mov	r9, r1
 8010522:	4606      	mov	r6, r0
 8010524:	4611      	mov	r1, r2
 8010526:	4648      	mov	r0, r9
 8010528:	4614      	mov	r4, r2
 801052a:	f7ff ffdb 	bl	80104e4 <__mcmp>
 801052e:	1e05      	subs	r5, r0, #0
 8010530:	d112      	bne.n	8010558 <__mdiff+0x3c>
 8010532:	4629      	mov	r1, r5
 8010534:	4630      	mov	r0, r6
 8010536:	f7ff fd19 	bl	800ff6c <_Balloc>
 801053a:	4602      	mov	r2, r0
 801053c:	b928      	cbnz	r0, 801054a <__mdiff+0x2e>
 801053e:	4b3f      	ldr	r3, [pc, #252]	@ (801063c <__mdiff+0x120>)
 8010540:	f240 2137 	movw	r1, #567	@ 0x237
 8010544:	483e      	ldr	r0, [pc, #248]	@ (8010640 <__mdiff+0x124>)
 8010546:	f001 fbff 	bl	8011d48 <__assert_func>
 801054a:	2301      	movs	r3, #1
 801054c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010550:	4610      	mov	r0, r2
 8010552:	b003      	add	sp, #12
 8010554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010558:	bfbc      	itt	lt
 801055a:	464b      	movlt	r3, r9
 801055c:	46a1      	movlt	r9, r4
 801055e:	4630      	mov	r0, r6
 8010560:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010564:	bfba      	itte	lt
 8010566:	461c      	movlt	r4, r3
 8010568:	2501      	movlt	r5, #1
 801056a:	2500      	movge	r5, #0
 801056c:	f7ff fcfe 	bl	800ff6c <_Balloc>
 8010570:	4602      	mov	r2, r0
 8010572:	b918      	cbnz	r0, 801057c <__mdiff+0x60>
 8010574:	4b31      	ldr	r3, [pc, #196]	@ (801063c <__mdiff+0x120>)
 8010576:	f240 2145 	movw	r1, #581	@ 0x245
 801057a:	e7e3      	b.n	8010544 <__mdiff+0x28>
 801057c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010580:	6926      	ldr	r6, [r4, #16]
 8010582:	60c5      	str	r5, [r0, #12]
 8010584:	f109 0310 	add.w	r3, r9, #16
 8010588:	f109 0514 	add.w	r5, r9, #20
 801058c:	f104 0e14 	add.w	lr, r4, #20
 8010590:	f100 0b14 	add.w	fp, r0, #20
 8010594:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010598:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801059c:	9301      	str	r3, [sp, #4]
 801059e:	46d9      	mov	r9, fp
 80105a0:	f04f 0c00 	mov.w	ip, #0
 80105a4:	9b01      	ldr	r3, [sp, #4]
 80105a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80105aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80105ae:	9301      	str	r3, [sp, #4]
 80105b0:	fa1f f38a 	uxth.w	r3, sl
 80105b4:	4619      	mov	r1, r3
 80105b6:	b283      	uxth	r3, r0
 80105b8:	1acb      	subs	r3, r1, r3
 80105ba:	0c00      	lsrs	r0, r0, #16
 80105bc:	4463      	add	r3, ip
 80105be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80105c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80105c6:	b29b      	uxth	r3, r3
 80105c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80105cc:	4576      	cmp	r6, lr
 80105ce:	f849 3b04 	str.w	r3, [r9], #4
 80105d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80105d6:	d8e5      	bhi.n	80105a4 <__mdiff+0x88>
 80105d8:	1b33      	subs	r3, r6, r4
 80105da:	3b15      	subs	r3, #21
 80105dc:	f023 0303 	bic.w	r3, r3, #3
 80105e0:	3415      	adds	r4, #21
 80105e2:	3304      	adds	r3, #4
 80105e4:	42a6      	cmp	r6, r4
 80105e6:	bf38      	it	cc
 80105e8:	2304      	movcc	r3, #4
 80105ea:	441d      	add	r5, r3
 80105ec:	445b      	add	r3, fp
 80105ee:	461e      	mov	r6, r3
 80105f0:	462c      	mov	r4, r5
 80105f2:	4544      	cmp	r4, r8
 80105f4:	d30e      	bcc.n	8010614 <__mdiff+0xf8>
 80105f6:	f108 0103 	add.w	r1, r8, #3
 80105fa:	1b49      	subs	r1, r1, r5
 80105fc:	f021 0103 	bic.w	r1, r1, #3
 8010600:	3d03      	subs	r5, #3
 8010602:	45a8      	cmp	r8, r5
 8010604:	bf38      	it	cc
 8010606:	2100      	movcc	r1, #0
 8010608:	440b      	add	r3, r1
 801060a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801060e:	b191      	cbz	r1, 8010636 <__mdiff+0x11a>
 8010610:	6117      	str	r7, [r2, #16]
 8010612:	e79d      	b.n	8010550 <__mdiff+0x34>
 8010614:	f854 1b04 	ldr.w	r1, [r4], #4
 8010618:	46e6      	mov	lr, ip
 801061a:	0c08      	lsrs	r0, r1, #16
 801061c:	fa1c fc81 	uxtah	ip, ip, r1
 8010620:	4471      	add	r1, lr
 8010622:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010626:	b289      	uxth	r1, r1
 8010628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801062c:	f846 1b04 	str.w	r1, [r6], #4
 8010630:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010634:	e7dd      	b.n	80105f2 <__mdiff+0xd6>
 8010636:	3f01      	subs	r7, #1
 8010638:	e7e7      	b.n	801060a <__mdiff+0xee>
 801063a:	bf00      	nop
 801063c:	08012bf1 	.word	0x08012bf1
 8010640:	08012c02 	.word	0x08012c02

08010644 <__ulp>:
 8010644:	b082      	sub	sp, #8
 8010646:	ed8d 0b00 	vstr	d0, [sp]
 801064a:	9a01      	ldr	r2, [sp, #4]
 801064c:	4b0f      	ldr	r3, [pc, #60]	@ (801068c <__ulp+0x48>)
 801064e:	4013      	ands	r3, r2
 8010650:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010654:	2b00      	cmp	r3, #0
 8010656:	dc08      	bgt.n	801066a <__ulp+0x26>
 8010658:	425b      	negs	r3, r3
 801065a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801065e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010662:	da04      	bge.n	801066e <__ulp+0x2a>
 8010664:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010668:	4113      	asrs	r3, r2
 801066a:	2200      	movs	r2, #0
 801066c:	e008      	b.n	8010680 <__ulp+0x3c>
 801066e:	f1a2 0314 	sub.w	r3, r2, #20
 8010672:	2b1e      	cmp	r3, #30
 8010674:	bfda      	itte	le
 8010676:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801067a:	40da      	lsrle	r2, r3
 801067c:	2201      	movgt	r2, #1
 801067e:	2300      	movs	r3, #0
 8010680:	4619      	mov	r1, r3
 8010682:	4610      	mov	r0, r2
 8010684:	ec41 0b10 	vmov	d0, r0, r1
 8010688:	b002      	add	sp, #8
 801068a:	4770      	bx	lr
 801068c:	7ff00000 	.word	0x7ff00000

08010690 <__b2d>:
 8010690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010694:	6906      	ldr	r6, [r0, #16]
 8010696:	f100 0814 	add.w	r8, r0, #20
 801069a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801069e:	1f37      	subs	r7, r6, #4
 80106a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80106a4:	4610      	mov	r0, r2
 80106a6:	f7ff fd53 	bl	8010150 <__hi0bits>
 80106aa:	f1c0 0320 	rsb	r3, r0, #32
 80106ae:	280a      	cmp	r0, #10
 80106b0:	600b      	str	r3, [r1, #0]
 80106b2:	491b      	ldr	r1, [pc, #108]	@ (8010720 <__b2d+0x90>)
 80106b4:	dc15      	bgt.n	80106e2 <__b2d+0x52>
 80106b6:	f1c0 0c0b 	rsb	ip, r0, #11
 80106ba:	fa22 f30c 	lsr.w	r3, r2, ip
 80106be:	45b8      	cmp	r8, r7
 80106c0:	ea43 0501 	orr.w	r5, r3, r1
 80106c4:	bf34      	ite	cc
 80106c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80106ca:	2300      	movcs	r3, #0
 80106cc:	3015      	adds	r0, #21
 80106ce:	fa02 f000 	lsl.w	r0, r2, r0
 80106d2:	fa23 f30c 	lsr.w	r3, r3, ip
 80106d6:	4303      	orrs	r3, r0
 80106d8:	461c      	mov	r4, r3
 80106da:	ec45 4b10 	vmov	d0, r4, r5
 80106de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106e2:	45b8      	cmp	r8, r7
 80106e4:	bf3a      	itte	cc
 80106e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80106ea:	f1a6 0708 	subcc.w	r7, r6, #8
 80106ee:	2300      	movcs	r3, #0
 80106f0:	380b      	subs	r0, #11
 80106f2:	d012      	beq.n	801071a <__b2d+0x8a>
 80106f4:	f1c0 0120 	rsb	r1, r0, #32
 80106f8:	fa23 f401 	lsr.w	r4, r3, r1
 80106fc:	4082      	lsls	r2, r0
 80106fe:	4322      	orrs	r2, r4
 8010700:	4547      	cmp	r7, r8
 8010702:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010706:	bf8c      	ite	hi
 8010708:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801070c:	2200      	movls	r2, #0
 801070e:	4083      	lsls	r3, r0
 8010710:	40ca      	lsrs	r2, r1
 8010712:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010716:	4313      	orrs	r3, r2
 8010718:	e7de      	b.n	80106d8 <__b2d+0x48>
 801071a:	ea42 0501 	orr.w	r5, r2, r1
 801071e:	e7db      	b.n	80106d8 <__b2d+0x48>
 8010720:	3ff00000 	.word	0x3ff00000

08010724 <__d2b>:
 8010724:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010728:	460f      	mov	r7, r1
 801072a:	2101      	movs	r1, #1
 801072c:	ec59 8b10 	vmov	r8, r9, d0
 8010730:	4616      	mov	r6, r2
 8010732:	f7ff fc1b 	bl	800ff6c <_Balloc>
 8010736:	4604      	mov	r4, r0
 8010738:	b930      	cbnz	r0, 8010748 <__d2b+0x24>
 801073a:	4602      	mov	r2, r0
 801073c:	4b23      	ldr	r3, [pc, #140]	@ (80107cc <__d2b+0xa8>)
 801073e:	4824      	ldr	r0, [pc, #144]	@ (80107d0 <__d2b+0xac>)
 8010740:	f240 310f 	movw	r1, #783	@ 0x30f
 8010744:	f001 fb00 	bl	8011d48 <__assert_func>
 8010748:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801074c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010750:	b10d      	cbz	r5, 8010756 <__d2b+0x32>
 8010752:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010756:	9301      	str	r3, [sp, #4]
 8010758:	f1b8 0300 	subs.w	r3, r8, #0
 801075c:	d023      	beq.n	80107a6 <__d2b+0x82>
 801075e:	4668      	mov	r0, sp
 8010760:	9300      	str	r3, [sp, #0]
 8010762:	f7ff fd14 	bl	801018e <__lo0bits>
 8010766:	e9dd 1200 	ldrd	r1, r2, [sp]
 801076a:	b1d0      	cbz	r0, 80107a2 <__d2b+0x7e>
 801076c:	f1c0 0320 	rsb	r3, r0, #32
 8010770:	fa02 f303 	lsl.w	r3, r2, r3
 8010774:	430b      	orrs	r3, r1
 8010776:	40c2      	lsrs	r2, r0
 8010778:	6163      	str	r3, [r4, #20]
 801077a:	9201      	str	r2, [sp, #4]
 801077c:	9b01      	ldr	r3, [sp, #4]
 801077e:	61a3      	str	r3, [r4, #24]
 8010780:	2b00      	cmp	r3, #0
 8010782:	bf0c      	ite	eq
 8010784:	2201      	moveq	r2, #1
 8010786:	2202      	movne	r2, #2
 8010788:	6122      	str	r2, [r4, #16]
 801078a:	b1a5      	cbz	r5, 80107b6 <__d2b+0x92>
 801078c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010790:	4405      	add	r5, r0
 8010792:	603d      	str	r5, [r7, #0]
 8010794:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010798:	6030      	str	r0, [r6, #0]
 801079a:	4620      	mov	r0, r4
 801079c:	b003      	add	sp, #12
 801079e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107a2:	6161      	str	r1, [r4, #20]
 80107a4:	e7ea      	b.n	801077c <__d2b+0x58>
 80107a6:	a801      	add	r0, sp, #4
 80107a8:	f7ff fcf1 	bl	801018e <__lo0bits>
 80107ac:	9b01      	ldr	r3, [sp, #4]
 80107ae:	6163      	str	r3, [r4, #20]
 80107b0:	3020      	adds	r0, #32
 80107b2:	2201      	movs	r2, #1
 80107b4:	e7e8      	b.n	8010788 <__d2b+0x64>
 80107b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80107ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80107be:	6038      	str	r0, [r7, #0]
 80107c0:	6918      	ldr	r0, [r3, #16]
 80107c2:	f7ff fcc5 	bl	8010150 <__hi0bits>
 80107c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80107ca:	e7e5      	b.n	8010798 <__d2b+0x74>
 80107cc:	08012bf1 	.word	0x08012bf1
 80107d0:	08012c02 	.word	0x08012c02

080107d4 <__ratio>:
 80107d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107d8:	4688      	mov	r8, r1
 80107da:	4669      	mov	r1, sp
 80107dc:	4681      	mov	r9, r0
 80107de:	f7ff ff57 	bl	8010690 <__b2d>
 80107e2:	a901      	add	r1, sp, #4
 80107e4:	4640      	mov	r0, r8
 80107e6:	ec55 4b10 	vmov	r4, r5, d0
 80107ea:	f7ff ff51 	bl	8010690 <__b2d>
 80107ee:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80107f2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80107f6:	1ad2      	subs	r2, r2, r3
 80107f8:	e9dd 3100 	ldrd	r3, r1, [sp]
 80107fc:	1a5b      	subs	r3, r3, r1
 80107fe:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8010802:	ec57 6b10 	vmov	r6, r7, d0
 8010806:	2b00      	cmp	r3, #0
 8010808:	bfd6      	itet	le
 801080a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801080e:	462a      	movgt	r2, r5
 8010810:	463a      	movle	r2, r7
 8010812:	46ab      	mov	fp, r5
 8010814:	46a2      	mov	sl, r4
 8010816:	bfce      	itee	gt
 8010818:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801081c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8010820:	ee00 3a90 	vmovle	s1, r3
 8010824:	ec4b ab17 	vmov	d7, sl, fp
 8010828:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801082c:	b003      	add	sp, #12
 801082e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010832 <__copybits>:
 8010832:	3901      	subs	r1, #1
 8010834:	b570      	push	{r4, r5, r6, lr}
 8010836:	1149      	asrs	r1, r1, #5
 8010838:	6914      	ldr	r4, [r2, #16]
 801083a:	3101      	adds	r1, #1
 801083c:	f102 0314 	add.w	r3, r2, #20
 8010840:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010844:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010848:	1f05      	subs	r5, r0, #4
 801084a:	42a3      	cmp	r3, r4
 801084c:	d30c      	bcc.n	8010868 <__copybits+0x36>
 801084e:	1aa3      	subs	r3, r4, r2
 8010850:	3b11      	subs	r3, #17
 8010852:	f023 0303 	bic.w	r3, r3, #3
 8010856:	3211      	adds	r2, #17
 8010858:	42a2      	cmp	r2, r4
 801085a:	bf88      	it	hi
 801085c:	2300      	movhi	r3, #0
 801085e:	4418      	add	r0, r3
 8010860:	2300      	movs	r3, #0
 8010862:	4288      	cmp	r0, r1
 8010864:	d305      	bcc.n	8010872 <__copybits+0x40>
 8010866:	bd70      	pop	{r4, r5, r6, pc}
 8010868:	f853 6b04 	ldr.w	r6, [r3], #4
 801086c:	f845 6f04 	str.w	r6, [r5, #4]!
 8010870:	e7eb      	b.n	801084a <__copybits+0x18>
 8010872:	f840 3b04 	str.w	r3, [r0], #4
 8010876:	e7f4      	b.n	8010862 <__copybits+0x30>

08010878 <__any_on>:
 8010878:	f100 0214 	add.w	r2, r0, #20
 801087c:	6900      	ldr	r0, [r0, #16]
 801087e:	114b      	asrs	r3, r1, #5
 8010880:	4298      	cmp	r0, r3
 8010882:	b510      	push	{r4, lr}
 8010884:	db11      	blt.n	80108aa <__any_on+0x32>
 8010886:	dd0a      	ble.n	801089e <__any_on+0x26>
 8010888:	f011 011f 	ands.w	r1, r1, #31
 801088c:	d007      	beq.n	801089e <__any_on+0x26>
 801088e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010892:	fa24 f001 	lsr.w	r0, r4, r1
 8010896:	fa00 f101 	lsl.w	r1, r0, r1
 801089a:	428c      	cmp	r4, r1
 801089c:	d10b      	bne.n	80108b6 <__any_on+0x3e>
 801089e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80108a2:	4293      	cmp	r3, r2
 80108a4:	d803      	bhi.n	80108ae <__any_on+0x36>
 80108a6:	2000      	movs	r0, #0
 80108a8:	bd10      	pop	{r4, pc}
 80108aa:	4603      	mov	r3, r0
 80108ac:	e7f7      	b.n	801089e <__any_on+0x26>
 80108ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80108b2:	2900      	cmp	r1, #0
 80108b4:	d0f5      	beq.n	80108a2 <__any_on+0x2a>
 80108b6:	2001      	movs	r0, #1
 80108b8:	e7f6      	b.n	80108a8 <__any_on+0x30>

080108ba <sulp>:
 80108ba:	b570      	push	{r4, r5, r6, lr}
 80108bc:	4604      	mov	r4, r0
 80108be:	460d      	mov	r5, r1
 80108c0:	4616      	mov	r6, r2
 80108c2:	ec45 4b10 	vmov	d0, r4, r5
 80108c6:	f7ff febd 	bl	8010644 <__ulp>
 80108ca:	b17e      	cbz	r6, 80108ec <sulp+0x32>
 80108cc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80108d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	dd09      	ble.n	80108ec <sulp+0x32>
 80108d8:	051b      	lsls	r3, r3, #20
 80108da:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80108de:	2000      	movs	r0, #0
 80108e0:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80108e4:	ec41 0b17 	vmov	d7, r0, r1
 80108e8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80108ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080108f0 <_strtod_l>:
 80108f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108f4:	ed2d 8b0a 	vpush	{d8-d12}
 80108f8:	b097      	sub	sp, #92	@ 0x5c
 80108fa:	4688      	mov	r8, r1
 80108fc:	920e      	str	r2, [sp, #56]	@ 0x38
 80108fe:	2200      	movs	r2, #0
 8010900:	9212      	str	r2, [sp, #72]	@ 0x48
 8010902:	9005      	str	r0, [sp, #20]
 8010904:	f04f 0a00 	mov.w	sl, #0
 8010908:	f04f 0b00 	mov.w	fp, #0
 801090c:	460a      	mov	r2, r1
 801090e:	9211      	str	r2, [sp, #68]	@ 0x44
 8010910:	7811      	ldrb	r1, [r2, #0]
 8010912:	292b      	cmp	r1, #43	@ 0x2b
 8010914:	d04c      	beq.n	80109b0 <_strtod_l+0xc0>
 8010916:	d839      	bhi.n	801098c <_strtod_l+0x9c>
 8010918:	290d      	cmp	r1, #13
 801091a:	d833      	bhi.n	8010984 <_strtod_l+0x94>
 801091c:	2908      	cmp	r1, #8
 801091e:	d833      	bhi.n	8010988 <_strtod_l+0x98>
 8010920:	2900      	cmp	r1, #0
 8010922:	d03c      	beq.n	801099e <_strtod_l+0xae>
 8010924:	2200      	movs	r2, #0
 8010926:	9208      	str	r2, [sp, #32]
 8010928:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801092a:	782a      	ldrb	r2, [r5, #0]
 801092c:	2a30      	cmp	r2, #48	@ 0x30
 801092e:	f040 80b7 	bne.w	8010aa0 <_strtod_l+0x1b0>
 8010932:	786a      	ldrb	r2, [r5, #1]
 8010934:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010938:	2a58      	cmp	r2, #88	@ 0x58
 801093a:	d170      	bne.n	8010a1e <_strtod_l+0x12e>
 801093c:	9302      	str	r3, [sp, #8]
 801093e:	9b08      	ldr	r3, [sp, #32]
 8010940:	9301      	str	r3, [sp, #4]
 8010942:	ab12      	add	r3, sp, #72	@ 0x48
 8010944:	9300      	str	r3, [sp, #0]
 8010946:	4a90      	ldr	r2, [pc, #576]	@ (8010b88 <_strtod_l+0x298>)
 8010948:	9805      	ldr	r0, [sp, #20]
 801094a:	ab13      	add	r3, sp, #76	@ 0x4c
 801094c:	a911      	add	r1, sp, #68	@ 0x44
 801094e:	f001 fa95 	bl	8011e7c <__gethex>
 8010952:	f010 060f 	ands.w	r6, r0, #15
 8010956:	4604      	mov	r4, r0
 8010958:	d005      	beq.n	8010966 <_strtod_l+0x76>
 801095a:	2e06      	cmp	r6, #6
 801095c:	d12a      	bne.n	80109b4 <_strtod_l+0xc4>
 801095e:	3501      	adds	r5, #1
 8010960:	2300      	movs	r3, #0
 8010962:	9511      	str	r5, [sp, #68]	@ 0x44
 8010964:	9308      	str	r3, [sp, #32]
 8010966:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010968:	2b00      	cmp	r3, #0
 801096a:	f040 8537 	bne.w	80113dc <_strtod_l+0xaec>
 801096e:	9b08      	ldr	r3, [sp, #32]
 8010970:	ec4b ab10 	vmov	d0, sl, fp
 8010974:	b1cb      	cbz	r3, 80109aa <_strtod_l+0xba>
 8010976:	eeb1 0b40 	vneg.f64	d0, d0
 801097a:	b017      	add	sp, #92	@ 0x5c
 801097c:	ecbd 8b0a 	vpop	{d8-d12}
 8010980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010984:	2920      	cmp	r1, #32
 8010986:	d1cd      	bne.n	8010924 <_strtod_l+0x34>
 8010988:	3201      	adds	r2, #1
 801098a:	e7c0      	b.n	801090e <_strtod_l+0x1e>
 801098c:	292d      	cmp	r1, #45	@ 0x2d
 801098e:	d1c9      	bne.n	8010924 <_strtod_l+0x34>
 8010990:	2101      	movs	r1, #1
 8010992:	9108      	str	r1, [sp, #32]
 8010994:	1c51      	adds	r1, r2, #1
 8010996:	9111      	str	r1, [sp, #68]	@ 0x44
 8010998:	7852      	ldrb	r2, [r2, #1]
 801099a:	2a00      	cmp	r2, #0
 801099c:	d1c4      	bne.n	8010928 <_strtod_l+0x38>
 801099e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80109a0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	f040 8517 	bne.w	80113d8 <_strtod_l+0xae8>
 80109aa:	ec4b ab10 	vmov	d0, sl, fp
 80109ae:	e7e4      	b.n	801097a <_strtod_l+0x8a>
 80109b0:	2100      	movs	r1, #0
 80109b2:	e7ee      	b.n	8010992 <_strtod_l+0xa2>
 80109b4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80109b6:	b13a      	cbz	r2, 80109c8 <_strtod_l+0xd8>
 80109b8:	2135      	movs	r1, #53	@ 0x35
 80109ba:	a814      	add	r0, sp, #80	@ 0x50
 80109bc:	f7ff ff39 	bl	8010832 <__copybits>
 80109c0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80109c2:	9805      	ldr	r0, [sp, #20]
 80109c4:	f7ff fb12 	bl	800ffec <_Bfree>
 80109c8:	1e73      	subs	r3, r6, #1
 80109ca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80109cc:	2b04      	cmp	r3, #4
 80109ce:	d806      	bhi.n	80109de <_strtod_l+0xee>
 80109d0:	e8df f003 	tbb	[pc, r3]
 80109d4:	201d0314 	.word	0x201d0314
 80109d8:	14          	.byte	0x14
 80109d9:	00          	.byte	0x00
 80109da:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 80109de:	05e3      	lsls	r3, r4, #23
 80109e0:	bf48      	it	mi
 80109e2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80109e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80109ea:	0d1b      	lsrs	r3, r3, #20
 80109ec:	051b      	lsls	r3, r3, #20
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d1b9      	bne.n	8010966 <_strtod_l+0x76>
 80109f2:	f7fe fb91 	bl	800f118 <__errno>
 80109f6:	2322      	movs	r3, #34	@ 0x22
 80109f8:	6003      	str	r3, [r0, #0]
 80109fa:	e7b4      	b.n	8010966 <_strtod_l+0x76>
 80109fc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8010a00:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010a04:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010a08:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010a0c:	e7e7      	b.n	80109de <_strtod_l+0xee>
 8010a0e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8010b90 <_strtod_l+0x2a0>
 8010a12:	e7e4      	b.n	80109de <_strtod_l+0xee>
 8010a14:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010a18:	f04f 3aff 	mov.w	sl, #4294967295
 8010a1c:	e7df      	b.n	80109de <_strtod_l+0xee>
 8010a1e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010a20:	1c5a      	adds	r2, r3, #1
 8010a22:	9211      	str	r2, [sp, #68]	@ 0x44
 8010a24:	785b      	ldrb	r3, [r3, #1]
 8010a26:	2b30      	cmp	r3, #48	@ 0x30
 8010a28:	d0f9      	beq.n	8010a1e <_strtod_l+0x12e>
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d09b      	beq.n	8010966 <_strtod_l+0x76>
 8010a2e:	2301      	movs	r3, #1
 8010a30:	9307      	str	r3, [sp, #28]
 8010a32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010a34:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a36:	2300      	movs	r3, #0
 8010a38:	9306      	str	r3, [sp, #24]
 8010a3a:	4699      	mov	r9, r3
 8010a3c:	461d      	mov	r5, r3
 8010a3e:	220a      	movs	r2, #10
 8010a40:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8010a42:	7804      	ldrb	r4, [r0, #0]
 8010a44:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8010a48:	b2d9      	uxtb	r1, r3
 8010a4a:	2909      	cmp	r1, #9
 8010a4c:	d92a      	bls.n	8010aa4 <_strtod_l+0x1b4>
 8010a4e:	494f      	ldr	r1, [pc, #316]	@ (8010b8c <_strtod_l+0x29c>)
 8010a50:	2201      	movs	r2, #1
 8010a52:	f001 f92b 	bl	8011cac <strncmp>
 8010a56:	b398      	cbz	r0, 8010ac0 <_strtod_l+0x1d0>
 8010a58:	2000      	movs	r0, #0
 8010a5a:	4622      	mov	r2, r4
 8010a5c:	462b      	mov	r3, r5
 8010a5e:	4607      	mov	r7, r0
 8010a60:	4601      	mov	r1, r0
 8010a62:	2a65      	cmp	r2, #101	@ 0x65
 8010a64:	d001      	beq.n	8010a6a <_strtod_l+0x17a>
 8010a66:	2a45      	cmp	r2, #69	@ 0x45
 8010a68:	d118      	bne.n	8010a9c <_strtod_l+0x1ac>
 8010a6a:	b91b      	cbnz	r3, 8010a74 <_strtod_l+0x184>
 8010a6c:	9b07      	ldr	r3, [sp, #28]
 8010a6e:	4303      	orrs	r3, r0
 8010a70:	d095      	beq.n	801099e <_strtod_l+0xae>
 8010a72:	2300      	movs	r3, #0
 8010a74:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8010a78:	f108 0201 	add.w	r2, r8, #1
 8010a7c:	9211      	str	r2, [sp, #68]	@ 0x44
 8010a7e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8010a82:	2a2b      	cmp	r2, #43	@ 0x2b
 8010a84:	d074      	beq.n	8010b70 <_strtod_l+0x280>
 8010a86:	2a2d      	cmp	r2, #45	@ 0x2d
 8010a88:	d07a      	beq.n	8010b80 <_strtod_l+0x290>
 8010a8a:	f04f 0e00 	mov.w	lr, #0
 8010a8e:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8010a92:	2c09      	cmp	r4, #9
 8010a94:	f240 8082 	bls.w	8010b9c <_strtod_l+0x2ac>
 8010a98:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8010a9c:	2400      	movs	r4, #0
 8010a9e:	e09d      	b.n	8010bdc <_strtod_l+0x2ec>
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	e7c5      	b.n	8010a30 <_strtod_l+0x140>
 8010aa4:	2d08      	cmp	r5, #8
 8010aa6:	bfc8      	it	gt
 8010aa8:	9906      	ldrgt	r1, [sp, #24]
 8010aaa:	f100 0001 	add.w	r0, r0, #1
 8010aae:	bfca      	itet	gt
 8010ab0:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010ab4:	fb02 3909 	mlale	r9, r2, r9, r3
 8010ab8:	9306      	strgt	r3, [sp, #24]
 8010aba:	3501      	adds	r5, #1
 8010abc:	9011      	str	r0, [sp, #68]	@ 0x44
 8010abe:	e7bf      	b.n	8010a40 <_strtod_l+0x150>
 8010ac0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010ac2:	1c5a      	adds	r2, r3, #1
 8010ac4:	9211      	str	r2, [sp, #68]	@ 0x44
 8010ac6:	785a      	ldrb	r2, [r3, #1]
 8010ac8:	b3bd      	cbz	r5, 8010b3a <_strtod_l+0x24a>
 8010aca:	4607      	mov	r7, r0
 8010acc:	462b      	mov	r3, r5
 8010ace:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010ad2:	2909      	cmp	r1, #9
 8010ad4:	d912      	bls.n	8010afc <_strtod_l+0x20c>
 8010ad6:	2101      	movs	r1, #1
 8010ad8:	e7c3      	b.n	8010a62 <_strtod_l+0x172>
 8010ada:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010adc:	1c5a      	adds	r2, r3, #1
 8010ade:	9211      	str	r2, [sp, #68]	@ 0x44
 8010ae0:	785a      	ldrb	r2, [r3, #1]
 8010ae2:	3001      	adds	r0, #1
 8010ae4:	2a30      	cmp	r2, #48	@ 0x30
 8010ae6:	d0f8      	beq.n	8010ada <_strtod_l+0x1ea>
 8010ae8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010aec:	2b08      	cmp	r3, #8
 8010aee:	f200 847a 	bhi.w	80113e6 <_strtod_l+0xaf6>
 8010af2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010af4:	930a      	str	r3, [sp, #40]	@ 0x28
 8010af6:	4607      	mov	r7, r0
 8010af8:	2000      	movs	r0, #0
 8010afa:	4603      	mov	r3, r0
 8010afc:	3a30      	subs	r2, #48	@ 0x30
 8010afe:	f100 0101 	add.w	r1, r0, #1
 8010b02:	d014      	beq.n	8010b2e <_strtod_l+0x23e>
 8010b04:	440f      	add	r7, r1
 8010b06:	469c      	mov	ip, r3
 8010b08:	f04f 0e0a 	mov.w	lr, #10
 8010b0c:	f10c 0401 	add.w	r4, ip, #1
 8010b10:	1ae6      	subs	r6, r4, r3
 8010b12:	42b1      	cmp	r1, r6
 8010b14:	dc13      	bgt.n	8010b3e <_strtod_l+0x24e>
 8010b16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8010b1a:	1819      	adds	r1, r3, r0
 8010b1c:	2908      	cmp	r1, #8
 8010b1e:	f103 0301 	add.w	r3, r3, #1
 8010b22:	4403      	add	r3, r0
 8010b24:	dc19      	bgt.n	8010b5a <_strtod_l+0x26a>
 8010b26:	210a      	movs	r1, #10
 8010b28:	fb01 2909 	mla	r9, r1, r9, r2
 8010b2c:	2100      	movs	r1, #0
 8010b2e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010b30:	1c50      	adds	r0, r2, #1
 8010b32:	9011      	str	r0, [sp, #68]	@ 0x44
 8010b34:	7852      	ldrb	r2, [r2, #1]
 8010b36:	4608      	mov	r0, r1
 8010b38:	e7c9      	b.n	8010ace <_strtod_l+0x1de>
 8010b3a:	4628      	mov	r0, r5
 8010b3c:	e7d2      	b.n	8010ae4 <_strtod_l+0x1f4>
 8010b3e:	f1bc 0f08 	cmp.w	ip, #8
 8010b42:	dc03      	bgt.n	8010b4c <_strtod_l+0x25c>
 8010b44:	fb0e f909 	mul.w	r9, lr, r9
 8010b48:	46a4      	mov	ip, r4
 8010b4a:	e7df      	b.n	8010b0c <_strtod_l+0x21c>
 8010b4c:	2c10      	cmp	r4, #16
 8010b4e:	bfde      	ittt	le
 8010b50:	9e06      	ldrle	r6, [sp, #24]
 8010b52:	fb0e f606 	mulle.w	r6, lr, r6
 8010b56:	9606      	strle	r6, [sp, #24]
 8010b58:	e7f6      	b.n	8010b48 <_strtod_l+0x258>
 8010b5a:	290f      	cmp	r1, #15
 8010b5c:	bfdf      	itttt	le
 8010b5e:	9806      	ldrle	r0, [sp, #24]
 8010b60:	210a      	movle	r1, #10
 8010b62:	fb01 2200 	mlale	r2, r1, r0, r2
 8010b66:	9206      	strle	r2, [sp, #24]
 8010b68:	e7e0      	b.n	8010b2c <_strtod_l+0x23c>
 8010b6a:	2700      	movs	r7, #0
 8010b6c:	2101      	movs	r1, #1
 8010b6e:	e77d      	b.n	8010a6c <_strtod_l+0x17c>
 8010b70:	f04f 0e00 	mov.w	lr, #0
 8010b74:	f108 0202 	add.w	r2, r8, #2
 8010b78:	9211      	str	r2, [sp, #68]	@ 0x44
 8010b7a:	f898 2002 	ldrb.w	r2, [r8, #2]
 8010b7e:	e786      	b.n	8010a8e <_strtod_l+0x19e>
 8010b80:	f04f 0e01 	mov.w	lr, #1
 8010b84:	e7f6      	b.n	8010b74 <_strtod_l+0x284>
 8010b86:	bf00      	nop
 8010b88:	08012e24 	.word	0x08012e24
 8010b8c:	08012c5b 	.word	0x08012c5b
 8010b90:	7ff00000 	.word	0x7ff00000
 8010b94:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010b96:	1c54      	adds	r4, r2, #1
 8010b98:	9411      	str	r4, [sp, #68]	@ 0x44
 8010b9a:	7852      	ldrb	r2, [r2, #1]
 8010b9c:	2a30      	cmp	r2, #48	@ 0x30
 8010b9e:	d0f9      	beq.n	8010b94 <_strtod_l+0x2a4>
 8010ba0:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8010ba4:	2c08      	cmp	r4, #8
 8010ba6:	f63f af79 	bhi.w	8010a9c <_strtod_l+0x1ac>
 8010baa:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8010bae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010bb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8010bb2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010bb4:	1c54      	adds	r4, r2, #1
 8010bb6:	9411      	str	r4, [sp, #68]	@ 0x44
 8010bb8:	7852      	ldrb	r2, [r2, #1]
 8010bba:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8010bbe:	2e09      	cmp	r6, #9
 8010bc0:	d937      	bls.n	8010c32 <_strtod_l+0x342>
 8010bc2:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8010bc4:	1ba4      	subs	r4, r4, r6
 8010bc6:	2c08      	cmp	r4, #8
 8010bc8:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8010bcc:	dc02      	bgt.n	8010bd4 <_strtod_l+0x2e4>
 8010bce:	4564      	cmp	r4, ip
 8010bd0:	bfa8      	it	ge
 8010bd2:	4664      	movge	r4, ip
 8010bd4:	f1be 0f00 	cmp.w	lr, #0
 8010bd8:	d000      	beq.n	8010bdc <_strtod_l+0x2ec>
 8010bda:	4264      	negs	r4, r4
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d14d      	bne.n	8010c7c <_strtod_l+0x38c>
 8010be0:	9b07      	ldr	r3, [sp, #28]
 8010be2:	4318      	orrs	r0, r3
 8010be4:	f47f aebf 	bne.w	8010966 <_strtod_l+0x76>
 8010be8:	2900      	cmp	r1, #0
 8010bea:	f47f aed8 	bne.w	801099e <_strtod_l+0xae>
 8010bee:	2a69      	cmp	r2, #105	@ 0x69
 8010bf0:	d027      	beq.n	8010c42 <_strtod_l+0x352>
 8010bf2:	dc24      	bgt.n	8010c3e <_strtod_l+0x34e>
 8010bf4:	2a49      	cmp	r2, #73	@ 0x49
 8010bf6:	d024      	beq.n	8010c42 <_strtod_l+0x352>
 8010bf8:	2a4e      	cmp	r2, #78	@ 0x4e
 8010bfa:	f47f aed0 	bne.w	801099e <_strtod_l+0xae>
 8010bfe:	4997      	ldr	r1, [pc, #604]	@ (8010e5c <_strtod_l+0x56c>)
 8010c00:	a811      	add	r0, sp, #68	@ 0x44
 8010c02:	f001 fb5d 	bl	80122c0 <__match>
 8010c06:	2800      	cmp	r0, #0
 8010c08:	f43f aec9 	beq.w	801099e <_strtod_l+0xae>
 8010c0c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010c0e:	781b      	ldrb	r3, [r3, #0]
 8010c10:	2b28      	cmp	r3, #40	@ 0x28
 8010c12:	d12d      	bne.n	8010c70 <_strtod_l+0x380>
 8010c14:	4992      	ldr	r1, [pc, #584]	@ (8010e60 <_strtod_l+0x570>)
 8010c16:	aa14      	add	r2, sp, #80	@ 0x50
 8010c18:	a811      	add	r0, sp, #68	@ 0x44
 8010c1a:	f001 fb65 	bl	80122e8 <__hexnan>
 8010c1e:	2805      	cmp	r0, #5
 8010c20:	d126      	bne.n	8010c70 <_strtod_l+0x380>
 8010c22:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010c24:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8010c28:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010c2c:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8010c30:	e699      	b.n	8010966 <_strtod_l+0x76>
 8010c32:	240a      	movs	r4, #10
 8010c34:	fb04 2c0c 	mla	ip, r4, ip, r2
 8010c38:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8010c3c:	e7b9      	b.n	8010bb2 <_strtod_l+0x2c2>
 8010c3e:	2a6e      	cmp	r2, #110	@ 0x6e
 8010c40:	e7db      	b.n	8010bfa <_strtod_l+0x30a>
 8010c42:	4988      	ldr	r1, [pc, #544]	@ (8010e64 <_strtod_l+0x574>)
 8010c44:	a811      	add	r0, sp, #68	@ 0x44
 8010c46:	f001 fb3b 	bl	80122c0 <__match>
 8010c4a:	2800      	cmp	r0, #0
 8010c4c:	f43f aea7 	beq.w	801099e <_strtod_l+0xae>
 8010c50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010c52:	4985      	ldr	r1, [pc, #532]	@ (8010e68 <_strtod_l+0x578>)
 8010c54:	3b01      	subs	r3, #1
 8010c56:	a811      	add	r0, sp, #68	@ 0x44
 8010c58:	9311      	str	r3, [sp, #68]	@ 0x44
 8010c5a:	f001 fb31 	bl	80122c0 <__match>
 8010c5e:	b910      	cbnz	r0, 8010c66 <_strtod_l+0x376>
 8010c60:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010c62:	3301      	adds	r3, #1
 8010c64:	9311      	str	r3, [sp, #68]	@ 0x44
 8010c66:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8010e7c <_strtod_l+0x58c>
 8010c6a:	f04f 0a00 	mov.w	sl, #0
 8010c6e:	e67a      	b.n	8010966 <_strtod_l+0x76>
 8010c70:	487e      	ldr	r0, [pc, #504]	@ (8010e6c <_strtod_l+0x57c>)
 8010c72:	f001 f861 	bl	8011d38 <nan>
 8010c76:	ec5b ab10 	vmov	sl, fp, d0
 8010c7a:	e674      	b.n	8010966 <_strtod_l+0x76>
 8010c7c:	ee07 9a90 	vmov	s15, r9
 8010c80:	1be2      	subs	r2, r4, r7
 8010c82:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010c86:	2d00      	cmp	r5, #0
 8010c88:	bf08      	it	eq
 8010c8a:	461d      	moveq	r5, r3
 8010c8c:	2b10      	cmp	r3, #16
 8010c8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010c90:	461a      	mov	r2, r3
 8010c92:	bfa8      	it	ge
 8010c94:	2210      	movge	r2, #16
 8010c96:	2b09      	cmp	r3, #9
 8010c98:	ec5b ab17 	vmov	sl, fp, d7
 8010c9c:	dc15      	bgt.n	8010cca <_strtod_l+0x3da>
 8010c9e:	1be1      	subs	r1, r4, r7
 8010ca0:	2900      	cmp	r1, #0
 8010ca2:	f43f ae60 	beq.w	8010966 <_strtod_l+0x76>
 8010ca6:	eba4 0107 	sub.w	r1, r4, r7
 8010caa:	dd72      	ble.n	8010d92 <_strtod_l+0x4a2>
 8010cac:	2916      	cmp	r1, #22
 8010cae:	dc59      	bgt.n	8010d64 <_strtod_l+0x474>
 8010cb0:	4b6f      	ldr	r3, [pc, #444]	@ (8010e70 <_strtod_l+0x580>)
 8010cb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010cb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010cb8:	ed93 7b00 	vldr	d7, [r3]
 8010cbc:	ec4b ab16 	vmov	d6, sl, fp
 8010cc0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010cc4:	ec5b ab17 	vmov	sl, fp, d7
 8010cc8:	e64d      	b.n	8010966 <_strtod_l+0x76>
 8010cca:	4969      	ldr	r1, [pc, #420]	@ (8010e70 <_strtod_l+0x580>)
 8010ccc:	eddd 6a06 	vldr	s13, [sp, #24]
 8010cd0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010cd4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8010cd8:	2b0f      	cmp	r3, #15
 8010cda:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8010cde:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010ce2:	ec5b ab16 	vmov	sl, fp, d6
 8010ce6:	ddda      	ble.n	8010c9e <_strtod_l+0x3ae>
 8010ce8:	1a9a      	subs	r2, r3, r2
 8010cea:	1be1      	subs	r1, r4, r7
 8010cec:	440a      	add	r2, r1
 8010cee:	2a00      	cmp	r2, #0
 8010cf0:	f340 8094 	ble.w	8010e1c <_strtod_l+0x52c>
 8010cf4:	f012 000f 	ands.w	r0, r2, #15
 8010cf8:	d00a      	beq.n	8010d10 <_strtod_l+0x420>
 8010cfa:	495d      	ldr	r1, [pc, #372]	@ (8010e70 <_strtod_l+0x580>)
 8010cfc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010d00:	ed91 7b00 	vldr	d7, [r1]
 8010d04:	ec4b ab16 	vmov	d6, sl, fp
 8010d08:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010d0c:	ec5b ab17 	vmov	sl, fp, d7
 8010d10:	f032 020f 	bics.w	r2, r2, #15
 8010d14:	d073      	beq.n	8010dfe <_strtod_l+0x50e>
 8010d16:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8010d1a:	dd47      	ble.n	8010dac <_strtod_l+0x4bc>
 8010d1c:	2400      	movs	r4, #0
 8010d1e:	4625      	mov	r5, r4
 8010d20:	9407      	str	r4, [sp, #28]
 8010d22:	4626      	mov	r6, r4
 8010d24:	9a05      	ldr	r2, [sp, #20]
 8010d26:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010e7c <_strtod_l+0x58c>
 8010d2a:	2322      	movs	r3, #34	@ 0x22
 8010d2c:	6013      	str	r3, [r2, #0]
 8010d2e:	f04f 0a00 	mov.w	sl, #0
 8010d32:	9b07      	ldr	r3, [sp, #28]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	f43f ae16 	beq.w	8010966 <_strtod_l+0x76>
 8010d3a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010d3c:	9805      	ldr	r0, [sp, #20]
 8010d3e:	f7ff f955 	bl	800ffec <_Bfree>
 8010d42:	9805      	ldr	r0, [sp, #20]
 8010d44:	4631      	mov	r1, r6
 8010d46:	f7ff f951 	bl	800ffec <_Bfree>
 8010d4a:	9805      	ldr	r0, [sp, #20]
 8010d4c:	4629      	mov	r1, r5
 8010d4e:	f7ff f94d 	bl	800ffec <_Bfree>
 8010d52:	9907      	ldr	r1, [sp, #28]
 8010d54:	9805      	ldr	r0, [sp, #20]
 8010d56:	f7ff f949 	bl	800ffec <_Bfree>
 8010d5a:	9805      	ldr	r0, [sp, #20]
 8010d5c:	4621      	mov	r1, r4
 8010d5e:	f7ff f945 	bl	800ffec <_Bfree>
 8010d62:	e600      	b.n	8010966 <_strtod_l+0x76>
 8010d64:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8010d68:	1be0      	subs	r0, r4, r7
 8010d6a:	4281      	cmp	r1, r0
 8010d6c:	dbbc      	blt.n	8010ce8 <_strtod_l+0x3f8>
 8010d6e:	4a40      	ldr	r2, [pc, #256]	@ (8010e70 <_strtod_l+0x580>)
 8010d70:	f1c3 030f 	rsb	r3, r3, #15
 8010d74:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8010d78:	ed91 7b00 	vldr	d7, [r1]
 8010d7c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010d7e:	ec4b ab16 	vmov	d6, sl, fp
 8010d82:	1acb      	subs	r3, r1, r3
 8010d84:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010d88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010d8c:	ed92 6b00 	vldr	d6, [r2]
 8010d90:	e796      	b.n	8010cc0 <_strtod_l+0x3d0>
 8010d92:	3116      	adds	r1, #22
 8010d94:	dba8      	blt.n	8010ce8 <_strtod_l+0x3f8>
 8010d96:	4b36      	ldr	r3, [pc, #216]	@ (8010e70 <_strtod_l+0x580>)
 8010d98:	1b3c      	subs	r4, r7, r4
 8010d9a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010d9e:	ed94 7b00 	vldr	d7, [r4]
 8010da2:	ec4b ab16 	vmov	d6, sl, fp
 8010da6:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010daa:	e78b      	b.n	8010cc4 <_strtod_l+0x3d4>
 8010dac:	2000      	movs	r0, #0
 8010dae:	ec4b ab17 	vmov	d7, sl, fp
 8010db2:	4e30      	ldr	r6, [pc, #192]	@ (8010e74 <_strtod_l+0x584>)
 8010db4:	1112      	asrs	r2, r2, #4
 8010db6:	4601      	mov	r1, r0
 8010db8:	2a01      	cmp	r2, #1
 8010dba:	dc23      	bgt.n	8010e04 <_strtod_l+0x514>
 8010dbc:	b108      	cbz	r0, 8010dc2 <_strtod_l+0x4d2>
 8010dbe:	ec5b ab17 	vmov	sl, fp, d7
 8010dc2:	4a2c      	ldr	r2, [pc, #176]	@ (8010e74 <_strtod_l+0x584>)
 8010dc4:	482c      	ldr	r0, [pc, #176]	@ (8010e78 <_strtod_l+0x588>)
 8010dc6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010dca:	ed92 7b00 	vldr	d7, [r2]
 8010dce:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010dd2:	ec4b ab16 	vmov	d6, sl, fp
 8010dd6:	4a29      	ldr	r2, [pc, #164]	@ (8010e7c <_strtod_l+0x58c>)
 8010dd8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010ddc:	ee17 1a90 	vmov	r1, s15
 8010de0:	400a      	ands	r2, r1
 8010de2:	4282      	cmp	r2, r0
 8010de4:	ec5b ab17 	vmov	sl, fp, d7
 8010de8:	d898      	bhi.n	8010d1c <_strtod_l+0x42c>
 8010dea:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8010dee:	4282      	cmp	r2, r0
 8010df0:	bf86      	itte	hi
 8010df2:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8010e80 <_strtod_l+0x590>
 8010df6:	f04f 3aff 	movhi.w	sl, #4294967295
 8010dfa:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8010dfe:	2200      	movs	r2, #0
 8010e00:	9206      	str	r2, [sp, #24]
 8010e02:	e076      	b.n	8010ef2 <_strtod_l+0x602>
 8010e04:	f012 0f01 	tst.w	r2, #1
 8010e08:	d004      	beq.n	8010e14 <_strtod_l+0x524>
 8010e0a:	ed96 6b00 	vldr	d6, [r6]
 8010e0e:	2001      	movs	r0, #1
 8010e10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010e14:	3101      	adds	r1, #1
 8010e16:	1052      	asrs	r2, r2, #1
 8010e18:	3608      	adds	r6, #8
 8010e1a:	e7cd      	b.n	8010db8 <_strtod_l+0x4c8>
 8010e1c:	d0ef      	beq.n	8010dfe <_strtod_l+0x50e>
 8010e1e:	4252      	negs	r2, r2
 8010e20:	f012 000f 	ands.w	r0, r2, #15
 8010e24:	d00a      	beq.n	8010e3c <_strtod_l+0x54c>
 8010e26:	4912      	ldr	r1, [pc, #72]	@ (8010e70 <_strtod_l+0x580>)
 8010e28:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010e2c:	ed91 7b00 	vldr	d7, [r1]
 8010e30:	ec4b ab16 	vmov	d6, sl, fp
 8010e34:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010e38:	ec5b ab17 	vmov	sl, fp, d7
 8010e3c:	1112      	asrs	r2, r2, #4
 8010e3e:	d0de      	beq.n	8010dfe <_strtod_l+0x50e>
 8010e40:	2a1f      	cmp	r2, #31
 8010e42:	dd1f      	ble.n	8010e84 <_strtod_l+0x594>
 8010e44:	2400      	movs	r4, #0
 8010e46:	4625      	mov	r5, r4
 8010e48:	9407      	str	r4, [sp, #28]
 8010e4a:	4626      	mov	r6, r4
 8010e4c:	9a05      	ldr	r2, [sp, #20]
 8010e4e:	2322      	movs	r3, #34	@ 0x22
 8010e50:	f04f 0a00 	mov.w	sl, #0
 8010e54:	f04f 0b00 	mov.w	fp, #0
 8010e58:	6013      	str	r3, [r2, #0]
 8010e5a:	e76a      	b.n	8010d32 <_strtod_l+0x442>
 8010e5c:	08012b49 	.word	0x08012b49
 8010e60:	08012e10 	.word	0x08012e10
 8010e64:	08012b41 	.word	0x08012b41
 8010e68:	08012b78 	.word	0x08012b78
 8010e6c:	08012cb1 	.word	0x08012cb1
 8010e70:	08012d48 	.word	0x08012d48
 8010e74:	08012d20 	.word	0x08012d20
 8010e78:	7ca00000 	.word	0x7ca00000
 8010e7c:	7ff00000 	.word	0x7ff00000
 8010e80:	7fefffff 	.word	0x7fefffff
 8010e84:	f012 0110 	ands.w	r1, r2, #16
 8010e88:	bf18      	it	ne
 8010e8a:	216a      	movne	r1, #106	@ 0x6a
 8010e8c:	9106      	str	r1, [sp, #24]
 8010e8e:	ec4b ab17 	vmov	d7, sl, fp
 8010e92:	49af      	ldr	r1, [pc, #700]	@ (8011150 <_strtod_l+0x860>)
 8010e94:	2000      	movs	r0, #0
 8010e96:	07d6      	lsls	r6, r2, #31
 8010e98:	d504      	bpl.n	8010ea4 <_strtod_l+0x5b4>
 8010e9a:	ed91 6b00 	vldr	d6, [r1]
 8010e9e:	2001      	movs	r0, #1
 8010ea0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010ea4:	1052      	asrs	r2, r2, #1
 8010ea6:	f101 0108 	add.w	r1, r1, #8
 8010eaa:	d1f4      	bne.n	8010e96 <_strtod_l+0x5a6>
 8010eac:	b108      	cbz	r0, 8010eb2 <_strtod_l+0x5c2>
 8010eae:	ec5b ab17 	vmov	sl, fp, d7
 8010eb2:	9a06      	ldr	r2, [sp, #24]
 8010eb4:	b1b2      	cbz	r2, 8010ee4 <_strtod_l+0x5f4>
 8010eb6:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8010eba:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8010ebe:	2a00      	cmp	r2, #0
 8010ec0:	4658      	mov	r0, fp
 8010ec2:	dd0f      	ble.n	8010ee4 <_strtod_l+0x5f4>
 8010ec4:	2a1f      	cmp	r2, #31
 8010ec6:	dd55      	ble.n	8010f74 <_strtod_l+0x684>
 8010ec8:	2a34      	cmp	r2, #52	@ 0x34
 8010eca:	bfde      	ittt	le
 8010ecc:	f04f 32ff 	movle.w	r2, #4294967295
 8010ed0:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8010ed4:	408a      	lslle	r2, r1
 8010ed6:	f04f 0a00 	mov.w	sl, #0
 8010eda:	bfcc      	ite	gt
 8010edc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010ee0:	ea02 0b00 	andle.w	fp, r2, r0
 8010ee4:	ec4b ab17 	vmov	d7, sl, fp
 8010ee8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef0:	d0a8      	beq.n	8010e44 <_strtod_l+0x554>
 8010ef2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010ef4:	9805      	ldr	r0, [sp, #20]
 8010ef6:	f8cd 9000 	str.w	r9, [sp]
 8010efa:	462a      	mov	r2, r5
 8010efc:	f7ff f8de 	bl	80100bc <__s2b>
 8010f00:	9007      	str	r0, [sp, #28]
 8010f02:	2800      	cmp	r0, #0
 8010f04:	f43f af0a 	beq.w	8010d1c <_strtod_l+0x42c>
 8010f08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f0a:	1b3f      	subs	r7, r7, r4
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	bfb4      	ite	lt
 8010f10:	463b      	movlt	r3, r7
 8010f12:	2300      	movge	r3, #0
 8010f14:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f18:	ed9f bb89 	vldr	d11, [pc, #548]	@ 8011140 <_strtod_l+0x850>
 8010f1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010f20:	2400      	movs	r4, #0
 8010f22:	930d      	str	r3, [sp, #52]	@ 0x34
 8010f24:	4625      	mov	r5, r4
 8010f26:	9b07      	ldr	r3, [sp, #28]
 8010f28:	9805      	ldr	r0, [sp, #20]
 8010f2a:	6859      	ldr	r1, [r3, #4]
 8010f2c:	f7ff f81e 	bl	800ff6c <_Balloc>
 8010f30:	4606      	mov	r6, r0
 8010f32:	2800      	cmp	r0, #0
 8010f34:	f43f aef6 	beq.w	8010d24 <_strtod_l+0x434>
 8010f38:	9b07      	ldr	r3, [sp, #28]
 8010f3a:	691a      	ldr	r2, [r3, #16]
 8010f3c:	ec4b ab19 	vmov	d9, sl, fp
 8010f40:	3202      	adds	r2, #2
 8010f42:	f103 010c 	add.w	r1, r3, #12
 8010f46:	0092      	lsls	r2, r2, #2
 8010f48:	300c      	adds	r0, #12
 8010f4a:	f7fe f912 	bl	800f172 <memcpy>
 8010f4e:	eeb0 0b49 	vmov.f64	d0, d9
 8010f52:	9805      	ldr	r0, [sp, #20]
 8010f54:	aa14      	add	r2, sp, #80	@ 0x50
 8010f56:	a913      	add	r1, sp, #76	@ 0x4c
 8010f58:	f7ff fbe4 	bl	8010724 <__d2b>
 8010f5c:	9012      	str	r0, [sp, #72]	@ 0x48
 8010f5e:	2800      	cmp	r0, #0
 8010f60:	f43f aee0 	beq.w	8010d24 <_strtod_l+0x434>
 8010f64:	9805      	ldr	r0, [sp, #20]
 8010f66:	2101      	movs	r1, #1
 8010f68:	f7ff f93e 	bl	80101e8 <__i2b>
 8010f6c:	4605      	mov	r5, r0
 8010f6e:	b940      	cbnz	r0, 8010f82 <_strtod_l+0x692>
 8010f70:	2500      	movs	r5, #0
 8010f72:	e6d7      	b.n	8010d24 <_strtod_l+0x434>
 8010f74:	f04f 31ff 	mov.w	r1, #4294967295
 8010f78:	fa01 f202 	lsl.w	r2, r1, r2
 8010f7c:	ea02 0a0a 	and.w	sl, r2, sl
 8010f80:	e7b0      	b.n	8010ee4 <_strtod_l+0x5f4>
 8010f82:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8010f84:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010f86:	2f00      	cmp	r7, #0
 8010f88:	bfab      	itete	ge
 8010f8a:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8010f8c:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8010f8e:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8010f92:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8010f96:	bfac      	ite	ge
 8010f98:	eb07 0903 	addge.w	r9, r7, r3
 8010f9c:	eba3 0807 	sublt.w	r8, r3, r7
 8010fa0:	9b06      	ldr	r3, [sp, #24]
 8010fa2:	1aff      	subs	r7, r7, r3
 8010fa4:	4417      	add	r7, r2
 8010fa6:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8010faa:	4a6a      	ldr	r2, [pc, #424]	@ (8011154 <_strtod_l+0x864>)
 8010fac:	3f01      	subs	r7, #1
 8010fae:	4297      	cmp	r7, r2
 8010fb0:	da51      	bge.n	8011056 <_strtod_l+0x766>
 8010fb2:	1bd1      	subs	r1, r2, r7
 8010fb4:	291f      	cmp	r1, #31
 8010fb6:	eba3 0301 	sub.w	r3, r3, r1
 8010fba:	f04f 0201 	mov.w	r2, #1
 8010fbe:	dc3e      	bgt.n	801103e <_strtod_l+0x74e>
 8010fc0:	408a      	lsls	r2, r1
 8010fc2:	920c      	str	r2, [sp, #48]	@ 0x30
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010fc8:	eb09 0703 	add.w	r7, r9, r3
 8010fcc:	4498      	add	r8, r3
 8010fce:	9b06      	ldr	r3, [sp, #24]
 8010fd0:	45b9      	cmp	r9, r7
 8010fd2:	4498      	add	r8, r3
 8010fd4:	464b      	mov	r3, r9
 8010fd6:	bfa8      	it	ge
 8010fd8:	463b      	movge	r3, r7
 8010fda:	4543      	cmp	r3, r8
 8010fdc:	bfa8      	it	ge
 8010fde:	4643      	movge	r3, r8
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	bfc2      	ittt	gt
 8010fe4:	1aff      	subgt	r7, r7, r3
 8010fe6:	eba8 0803 	subgt.w	r8, r8, r3
 8010fea:	eba9 0903 	subgt.w	r9, r9, r3
 8010fee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	dd16      	ble.n	8011022 <_strtod_l+0x732>
 8010ff4:	4629      	mov	r1, r5
 8010ff6:	9805      	ldr	r0, [sp, #20]
 8010ff8:	461a      	mov	r2, r3
 8010ffa:	f7ff f9ad 	bl	8010358 <__pow5mult>
 8010ffe:	4605      	mov	r5, r0
 8011000:	2800      	cmp	r0, #0
 8011002:	d0b5      	beq.n	8010f70 <_strtod_l+0x680>
 8011004:	4601      	mov	r1, r0
 8011006:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011008:	9805      	ldr	r0, [sp, #20]
 801100a:	f7ff f903 	bl	8010214 <__multiply>
 801100e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8011010:	2800      	cmp	r0, #0
 8011012:	f43f ae87 	beq.w	8010d24 <_strtod_l+0x434>
 8011016:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011018:	9805      	ldr	r0, [sp, #20]
 801101a:	f7fe ffe7 	bl	800ffec <_Bfree>
 801101e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011020:	9312      	str	r3, [sp, #72]	@ 0x48
 8011022:	2f00      	cmp	r7, #0
 8011024:	dc1b      	bgt.n	801105e <_strtod_l+0x76e>
 8011026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011028:	2b00      	cmp	r3, #0
 801102a:	dd21      	ble.n	8011070 <_strtod_l+0x780>
 801102c:	4631      	mov	r1, r6
 801102e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011030:	9805      	ldr	r0, [sp, #20]
 8011032:	f7ff f991 	bl	8010358 <__pow5mult>
 8011036:	4606      	mov	r6, r0
 8011038:	b9d0      	cbnz	r0, 8011070 <_strtod_l+0x780>
 801103a:	2600      	movs	r6, #0
 801103c:	e672      	b.n	8010d24 <_strtod_l+0x434>
 801103e:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8011042:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8011046:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 801104a:	37e2      	adds	r7, #226	@ 0xe2
 801104c:	fa02 f107 	lsl.w	r1, r2, r7
 8011050:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011052:	920c      	str	r2, [sp, #48]	@ 0x30
 8011054:	e7b8      	b.n	8010fc8 <_strtod_l+0x6d8>
 8011056:	2200      	movs	r2, #0
 8011058:	920b      	str	r2, [sp, #44]	@ 0x2c
 801105a:	2201      	movs	r2, #1
 801105c:	e7f9      	b.n	8011052 <_strtod_l+0x762>
 801105e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011060:	9805      	ldr	r0, [sp, #20]
 8011062:	463a      	mov	r2, r7
 8011064:	f7ff f9d2 	bl	801040c <__lshift>
 8011068:	9012      	str	r0, [sp, #72]	@ 0x48
 801106a:	2800      	cmp	r0, #0
 801106c:	d1db      	bne.n	8011026 <_strtod_l+0x736>
 801106e:	e659      	b.n	8010d24 <_strtod_l+0x434>
 8011070:	f1b8 0f00 	cmp.w	r8, #0
 8011074:	dd07      	ble.n	8011086 <_strtod_l+0x796>
 8011076:	4631      	mov	r1, r6
 8011078:	9805      	ldr	r0, [sp, #20]
 801107a:	4642      	mov	r2, r8
 801107c:	f7ff f9c6 	bl	801040c <__lshift>
 8011080:	4606      	mov	r6, r0
 8011082:	2800      	cmp	r0, #0
 8011084:	d0d9      	beq.n	801103a <_strtod_l+0x74a>
 8011086:	f1b9 0f00 	cmp.w	r9, #0
 801108a:	dd08      	ble.n	801109e <_strtod_l+0x7ae>
 801108c:	4629      	mov	r1, r5
 801108e:	9805      	ldr	r0, [sp, #20]
 8011090:	464a      	mov	r2, r9
 8011092:	f7ff f9bb 	bl	801040c <__lshift>
 8011096:	4605      	mov	r5, r0
 8011098:	2800      	cmp	r0, #0
 801109a:	f43f ae43 	beq.w	8010d24 <_strtod_l+0x434>
 801109e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80110a0:	9805      	ldr	r0, [sp, #20]
 80110a2:	4632      	mov	r2, r6
 80110a4:	f7ff fa3a 	bl	801051c <__mdiff>
 80110a8:	4604      	mov	r4, r0
 80110aa:	2800      	cmp	r0, #0
 80110ac:	f43f ae3a 	beq.w	8010d24 <_strtod_l+0x434>
 80110b0:	2300      	movs	r3, #0
 80110b2:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80110b6:	60c3      	str	r3, [r0, #12]
 80110b8:	4629      	mov	r1, r5
 80110ba:	f7ff fa13 	bl	80104e4 <__mcmp>
 80110be:	2800      	cmp	r0, #0
 80110c0:	da4c      	bge.n	801115c <_strtod_l+0x86c>
 80110c2:	ea58 080a 	orrs.w	r8, r8, sl
 80110c6:	d172      	bne.n	80111ae <_strtod_l+0x8be>
 80110c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d16e      	bne.n	80111ae <_strtod_l+0x8be>
 80110d0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80110d4:	0d1b      	lsrs	r3, r3, #20
 80110d6:	051b      	lsls	r3, r3, #20
 80110d8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80110dc:	d967      	bls.n	80111ae <_strtod_l+0x8be>
 80110de:	6963      	ldr	r3, [r4, #20]
 80110e0:	b913      	cbnz	r3, 80110e8 <_strtod_l+0x7f8>
 80110e2:	6923      	ldr	r3, [r4, #16]
 80110e4:	2b01      	cmp	r3, #1
 80110e6:	dd62      	ble.n	80111ae <_strtod_l+0x8be>
 80110e8:	4621      	mov	r1, r4
 80110ea:	2201      	movs	r2, #1
 80110ec:	9805      	ldr	r0, [sp, #20]
 80110ee:	f7ff f98d 	bl	801040c <__lshift>
 80110f2:	4629      	mov	r1, r5
 80110f4:	4604      	mov	r4, r0
 80110f6:	f7ff f9f5 	bl	80104e4 <__mcmp>
 80110fa:	2800      	cmp	r0, #0
 80110fc:	dd57      	ble.n	80111ae <_strtod_l+0x8be>
 80110fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011102:	9a06      	ldr	r2, [sp, #24]
 8011104:	0d1b      	lsrs	r3, r3, #20
 8011106:	051b      	lsls	r3, r3, #20
 8011108:	2a00      	cmp	r2, #0
 801110a:	d06e      	beq.n	80111ea <_strtod_l+0x8fa>
 801110c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011110:	d86b      	bhi.n	80111ea <_strtod_l+0x8fa>
 8011112:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8011116:	f67f ae99 	bls.w	8010e4c <_strtod_l+0x55c>
 801111a:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8011148 <_strtod_l+0x858>
 801111e:	ec4b ab16 	vmov	d6, sl, fp
 8011122:	4b0d      	ldr	r3, [pc, #52]	@ (8011158 <_strtod_l+0x868>)
 8011124:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011128:	ee17 2a90 	vmov	r2, s15
 801112c:	4013      	ands	r3, r2
 801112e:	ec5b ab17 	vmov	sl, fp, d7
 8011132:	2b00      	cmp	r3, #0
 8011134:	f47f ae01 	bne.w	8010d3a <_strtod_l+0x44a>
 8011138:	9a05      	ldr	r2, [sp, #20]
 801113a:	2322      	movs	r3, #34	@ 0x22
 801113c:	6013      	str	r3, [r2, #0]
 801113e:	e5fc      	b.n	8010d3a <_strtod_l+0x44a>
 8011140:	ffc00000 	.word	0xffc00000
 8011144:	41dfffff 	.word	0x41dfffff
 8011148:	00000000 	.word	0x00000000
 801114c:	39500000 	.word	0x39500000
 8011150:	08012e38 	.word	0x08012e38
 8011154:	fffffc02 	.word	0xfffffc02
 8011158:	7ff00000 	.word	0x7ff00000
 801115c:	46d9      	mov	r9, fp
 801115e:	d15d      	bne.n	801121c <_strtod_l+0x92c>
 8011160:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011164:	f1b8 0f00 	cmp.w	r8, #0
 8011168:	d02a      	beq.n	80111c0 <_strtod_l+0x8d0>
 801116a:	4aa9      	ldr	r2, [pc, #676]	@ (8011410 <_strtod_l+0xb20>)
 801116c:	4293      	cmp	r3, r2
 801116e:	d12a      	bne.n	80111c6 <_strtod_l+0x8d6>
 8011170:	9b06      	ldr	r3, [sp, #24]
 8011172:	4652      	mov	r2, sl
 8011174:	b1fb      	cbz	r3, 80111b6 <_strtod_l+0x8c6>
 8011176:	4ba7      	ldr	r3, [pc, #668]	@ (8011414 <_strtod_l+0xb24>)
 8011178:	ea0b 0303 	and.w	r3, fp, r3
 801117c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011180:	f04f 31ff 	mov.w	r1, #4294967295
 8011184:	d81a      	bhi.n	80111bc <_strtod_l+0x8cc>
 8011186:	0d1b      	lsrs	r3, r3, #20
 8011188:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801118c:	fa01 f303 	lsl.w	r3, r1, r3
 8011190:	429a      	cmp	r2, r3
 8011192:	d118      	bne.n	80111c6 <_strtod_l+0x8d6>
 8011194:	4ba0      	ldr	r3, [pc, #640]	@ (8011418 <_strtod_l+0xb28>)
 8011196:	4599      	cmp	r9, r3
 8011198:	d102      	bne.n	80111a0 <_strtod_l+0x8b0>
 801119a:	3201      	adds	r2, #1
 801119c:	f43f adc2 	beq.w	8010d24 <_strtod_l+0x434>
 80111a0:	4b9c      	ldr	r3, [pc, #624]	@ (8011414 <_strtod_l+0xb24>)
 80111a2:	ea09 0303 	and.w	r3, r9, r3
 80111a6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80111aa:	f04f 0a00 	mov.w	sl, #0
 80111ae:	9b06      	ldr	r3, [sp, #24]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d1b2      	bne.n	801111a <_strtod_l+0x82a>
 80111b4:	e5c1      	b.n	8010d3a <_strtod_l+0x44a>
 80111b6:	f04f 33ff 	mov.w	r3, #4294967295
 80111ba:	e7e9      	b.n	8011190 <_strtod_l+0x8a0>
 80111bc:	460b      	mov	r3, r1
 80111be:	e7e7      	b.n	8011190 <_strtod_l+0x8a0>
 80111c0:	ea53 030a 	orrs.w	r3, r3, sl
 80111c4:	d09b      	beq.n	80110fe <_strtod_l+0x80e>
 80111c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80111c8:	b1c3      	cbz	r3, 80111fc <_strtod_l+0x90c>
 80111ca:	ea13 0f09 	tst.w	r3, r9
 80111ce:	d0ee      	beq.n	80111ae <_strtod_l+0x8be>
 80111d0:	9a06      	ldr	r2, [sp, #24]
 80111d2:	4650      	mov	r0, sl
 80111d4:	4659      	mov	r1, fp
 80111d6:	f1b8 0f00 	cmp.w	r8, #0
 80111da:	d013      	beq.n	8011204 <_strtod_l+0x914>
 80111dc:	f7ff fb6d 	bl	80108ba <sulp>
 80111e0:	ee39 7b00 	vadd.f64	d7, d9, d0
 80111e4:	ec5b ab17 	vmov	sl, fp, d7
 80111e8:	e7e1      	b.n	80111ae <_strtod_l+0x8be>
 80111ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80111ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80111f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80111f6:	f04f 3aff 	mov.w	sl, #4294967295
 80111fa:	e7d8      	b.n	80111ae <_strtod_l+0x8be>
 80111fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80111fe:	ea13 0f0a 	tst.w	r3, sl
 8011202:	e7e4      	b.n	80111ce <_strtod_l+0x8de>
 8011204:	f7ff fb59 	bl	80108ba <sulp>
 8011208:	ee39 0b40 	vsub.f64	d0, d9, d0
 801120c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011214:	ec5b ab10 	vmov	sl, fp, d0
 8011218:	d1c9      	bne.n	80111ae <_strtod_l+0x8be>
 801121a:	e617      	b.n	8010e4c <_strtod_l+0x55c>
 801121c:	4629      	mov	r1, r5
 801121e:	4620      	mov	r0, r4
 8011220:	f7ff fad8 	bl	80107d4 <__ratio>
 8011224:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8011228:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801122c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011230:	d85d      	bhi.n	80112ee <_strtod_l+0x9fe>
 8011232:	f1b8 0f00 	cmp.w	r8, #0
 8011236:	d164      	bne.n	8011302 <_strtod_l+0xa12>
 8011238:	f1ba 0f00 	cmp.w	sl, #0
 801123c:	d14b      	bne.n	80112d6 <_strtod_l+0x9e6>
 801123e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011242:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8011246:	2b00      	cmp	r3, #0
 8011248:	d160      	bne.n	801130c <_strtod_l+0xa1c>
 801124a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 801124e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8011252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011256:	d401      	bmi.n	801125c <_strtod_l+0x96c>
 8011258:	ee20 8b08 	vmul.f64	d8, d0, d8
 801125c:	eeb1 ab48 	vneg.f64	d10, d8
 8011260:	486c      	ldr	r0, [pc, #432]	@ (8011414 <_strtod_l+0xb24>)
 8011262:	496e      	ldr	r1, [pc, #440]	@ (801141c <_strtod_l+0xb2c>)
 8011264:	ea09 0700 	and.w	r7, r9, r0
 8011268:	428f      	cmp	r7, r1
 801126a:	ec53 2b1a 	vmov	r2, r3, d10
 801126e:	d17d      	bne.n	801136c <_strtod_l+0xa7c>
 8011270:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8011274:	ec4b ab1c 	vmov	d12, sl, fp
 8011278:	eeb0 0b4c 	vmov.f64	d0, d12
 801127c:	f7ff f9e2 	bl	8010644 <__ulp>
 8011280:	4864      	ldr	r0, [pc, #400]	@ (8011414 <_strtod_l+0xb24>)
 8011282:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8011286:	ee1c 3a90 	vmov	r3, s25
 801128a:	4a65      	ldr	r2, [pc, #404]	@ (8011420 <_strtod_l+0xb30>)
 801128c:	ea03 0100 	and.w	r1, r3, r0
 8011290:	4291      	cmp	r1, r2
 8011292:	ec5b ab1c 	vmov	sl, fp, d12
 8011296:	d93c      	bls.n	8011312 <_strtod_l+0xa22>
 8011298:	ee19 2a90 	vmov	r2, s19
 801129c:	4b5e      	ldr	r3, [pc, #376]	@ (8011418 <_strtod_l+0xb28>)
 801129e:	429a      	cmp	r2, r3
 80112a0:	d104      	bne.n	80112ac <_strtod_l+0x9bc>
 80112a2:	ee19 3a10 	vmov	r3, s18
 80112a6:	3301      	adds	r3, #1
 80112a8:	f43f ad3c 	beq.w	8010d24 <_strtod_l+0x434>
 80112ac:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8011418 <_strtod_l+0xb28>
 80112b0:	f04f 3aff 	mov.w	sl, #4294967295
 80112b4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80112b6:	9805      	ldr	r0, [sp, #20]
 80112b8:	f7fe fe98 	bl	800ffec <_Bfree>
 80112bc:	9805      	ldr	r0, [sp, #20]
 80112be:	4631      	mov	r1, r6
 80112c0:	f7fe fe94 	bl	800ffec <_Bfree>
 80112c4:	9805      	ldr	r0, [sp, #20]
 80112c6:	4629      	mov	r1, r5
 80112c8:	f7fe fe90 	bl	800ffec <_Bfree>
 80112cc:	9805      	ldr	r0, [sp, #20]
 80112ce:	4621      	mov	r1, r4
 80112d0:	f7fe fe8c 	bl	800ffec <_Bfree>
 80112d4:	e627      	b.n	8010f26 <_strtod_l+0x636>
 80112d6:	f1ba 0f01 	cmp.w	sl, #1
 80112da:	d103      	bne.n	80112e4 <_strtod_l+0x9f4>
 80112dc:	f1bb 0f00 	cmp.w	fp, #0
 80112e0:	f43f adb4 	beq.w	8010e4c <_strtod_l+0x55c>
 80112e4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80112e8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80112ec:	e7b8      	b.n	8011260 <_strtod_l+0x970>
 80112ee:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80112f2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80112f6:	f1b8 0f00 	cmp.w	r8, #0
 80112fa:	d0af      	beq.n	801125c <_strtod_l+0x96c>
 80112fc:	eeb0 ab48 	vmov.f64	d10, d8
 8011300:	e7ae      	b.n	8011260 <_strtod_l+0x970>
 8011302:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8011306:	eeb0 8b4a 	vmov.f64	d8, d10
 801130a:	e7a9      	b.n	8011260 <_strtod_l+0x970>
 801130c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8011310:	e7a6      	b.n	8011260 <_strtod_l+0x970>
 8011312:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8011316:	9b06      	ldr	r3, [sp, #24]
 8011318:	46d9      	mov	r9, fp
 801131a:	2b00      	cmp	r3, #0
 801131c:	d1ca      	bne.n	80112b4 <_strtod_l+0x9c4>
 801131e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011322:	0d1b      	lsrs	r3, r3, #20
 8011324:	051b      	lsls	r3, r3, #20
 8011326:	429f      	cmp	r7, r3
 8011328:	d1c4      	bne.n	80112b4 <_strtod_l+0x9c4>
 801132a:	ec51 0b18 	vmov	r0, r1, d8
 801132e:	f7ef f9b3 	bl	8000698 <__aeabi_d2lz>
 8011332:	f7ef f96b 	bl	800060c <__aeabi_l2d>
 8011336:	f3cb 0913 	ubfx	r9, fp, #0, #20
 801133a:	ec41 0b17 	vmov	d7, r0, r1
 801133e:	ea49 090a 	orr.w	r9, r9, sl
 8011342:	ea59 0908 	orrs.w	r9, r9, r8
 8011346:	ee38 8b47 	vsub.f64	d8, d8, d7
 801134a:	d03c      	beq.n	80113c6 <_strtod_l+0xad6>
 801134c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80113f8 <_strtod_l+0xb08>
 8011350:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011358:	f53f acef 	bmi.w	8010d3a <_strtod_l+0x44a>
 801135c:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8011400 <_strtod_l+0xb10>
 8011360:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011368:	dda4      	ble.n	80112b4 <_strtod_l+0x9c4>
 801136a:	e4e6      	b.n	8010d3a <_strtod_l+0x44a>
 801136c:	9906      	ldr	r1, [sp, #24]
 801136e:	b1e1      	cbz	r1, 80113aa <_strtod_l+0xaba>
 8011370:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8011374:	d819      	bhi.n	80113aa <_strtod_l+0xaba>
 8011376:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801137a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801137e:	d811      	bhi.n	80113a4 <_strtod_l+0xab4>
 8011380:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8011384:	ee18 3a10 	vmov	r3, s16
 8011388:	2b01      	cmp	r3, #1
 801138a:	bf38      	it	cc
 801138c:	2301      	movcc	r3, #1
 801138e:	ee08 3a10 	vmov	s16, r3
 8011392:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8011396:	f1b8 0f00 	cmp.w	r8, #0
 801139a:	d111      	bne.n	80113c0 <_strtod_l+0xad0>
 801139c:	eeb1 7b48 	vneg.f64	d7, d8
 80113a0:	ec53 2b17 	vmov	r2, r3, d7
 80113a4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80113a8:	1bcb      	subs	r3, r1, r7
 80113aa:	eeb0 0b49 	vmov.f64	d0, d9
 80113ae:	ec43 2b1a 	vmov	d10, r2, r3
 80113b2:	f7ff f947 	bl	8010644 <__ulp>
 80113b6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80113ba:	ec5b ab19 	vmov	sl, fp, d9
 80113be:	e7aa      	b.n	8011316 <_strtod_l+0xa26>
 80113c0:	eeb0 7b48 	vmov.f64	d7, d8
 80113c4:	e7ec      	b.n	80113a0 <_strtod_l+0xab0>
 80113c6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8011408 <_strtod_l+0xb18>
 80113ca:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80113ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113d2:	f57f af6f 	bpl.w	80112b4 <_strtod_l+0x9c4>
 80113d6:	e4b0      	b.n	8010d3a <_strtod_l+0x44a>
 80113d8:	2300      	movs	r3, #0
 80113da:	9308      	str	r3, [sp, #32]
 80113dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80113de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80113e0:	6013      	str	r3, [r2, #0]
 80113e2:	f7ff bac4 	b.w	801096e <_strtod_l+0x7e>
 80113e6:	2a65      	cmp	r2, #101	@ 0x65
 80113e8:	f43f abbf 	beq.w	8010b6a <_strtod_l+0x27a>
 80113ec:	2a45      	cmp	r2, #69	@ 0x45
 80113ee:	f43f abbc 	beq.w	8010b6a <_strtod_l+0x27a>
 80113f2:	2101      	movs	r1, #1
 80113f4:	f7ff bbf4 	b.w	8010be0 <_strtod_l+0x2f0>
 80113f8:	94a03595 	.word	0x94a03595
 80113fc:	3fdfffff 	.word	0x3fdfffff
 8011400:	35afe535 	.word	0x35afe535
 8011404:	3fe00000 	.word	0x3fe00000
 8011408:	94a03595 	.word	0x94a03595
 801140c:	3fcfffff 	.word	0x3fcfffff
 8011410:	000fffff 	.word	0x000fffff
 8011414:	7ff00000 	.word	0x7ff00000
 8011418:	7fefffff 	.word	0x7fefffff
 801141c:	7fe00000 	.word	0x7fe00000
 8011420:	7c9fffff 	.word	0x7c9fffff

08011424 <_strtod_r>:
 8011424:	4b01      	ldr	r3, [pc, #4]	@ (801142c <_strtod_r+0x8>)
 8011426:	f7ff ba63 	b.w	80108f0 <_strtod_l>
 801142a:	bf00      	nop
 801142c:	20000080 	.word	0x20000080

08011430 <_strtol_l.isra.0>:
 8011430:	2b24      	cmp	r3, #36	@ 0x24
 8011432:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011436:	4686      	mov	lr, r0
 8011438:	4690      	mov	r8, r2
 801143a:	d801      	bhi.n	8011440 <_strtol_l.isra.0+0x10>
 801143c:	2b01      	cmp	r3, #1
 801143e:	d106      	bne.n	801144e <_strtol_l.isra.0+0x1e>
 8011440:	f7fd fe6a 	bl	800f118 <__errno>
 8011444:	2316      	movs	r3, #22
 8011446:	6003      	str	r3, [r0, #0]
 8011448:	2000      	movs	r0, #0
 801144a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801144e:	4834      	ldr	r0, [pc, #208]	@ (8011520 <_strtol_l.isra.0+0xf0>)
 8011450:	460d      	mov	r5, r1
 8011452:	462a      	mov	r2, r5
 8011454:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011458:	5d06      	ldrb	r6, [r0, r4]
 801145a:	f016 0608 	ands.w	r6, r6, #8
 801145e:	d1f8      	bne.n	8011452 <_strtol_l.isra.0+0x22>
 8011460:	2c2d      	cmp	r4, #45	@ 0x2d
 8011462:	d110      	bne.n	8011486 <_strtol_l.isra.0+0x56>
 8011464:	782c      	ldrb	r4, [r5, #0]
 8011466:	2601      	movs	r6, #1
 8011468:	1c95      	adds	r5, r2, #2
 801146a:	f033 0210 	bics.w	r2, r3, #16
 801146e:	d115      	bne.n	801149c <_strtol_l.isra.0+0x6c>
 8011470:	2c30      	cmp	r4, #48	@ 0x30
 8011472:	d10d      	bne.n	8011490 <_strtol_l.isra.0+0x60>
 8011474:	782a      	ldrb	r2, [r5, #0]
 8011476:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801147a:	2a58      	cmp	r2, #88	@ 0x58
 801147c:	d108      	bne.n	8011490 <_strtol_l.isra.0+0x60>
 801147e:	786c      	ldrb	r4, [r5, #1]
 8011480:	3502      	adds	r5, #2
 8011482:	2310      	movs	r3, #16
 8011484:	e00a      	b.n	801149c <_strtol_l.isra.0+0x6c>
 8011486:	2c2b      	cmp	r4, #43	@ 0x2b
 8011488:	bf04      	itt	eq
 801148a:	782c      	ldrbeq	r4, [r5, #0]
 801148c:	1c95      	addeq	r5, r2, #2
 801148e:	e7ec      	b.n	801146a <_strtol_l.isra.0+0x3a>
 8011490:	2b00      	cmp	r3, #0
 8011492:	d1f6      	bne.n	8011482 <_strtol_l.isra.0+0x52>
 8011494:	2c30      	cmp	r4, #48	@ 0x30
 8011496:	bf14      	ite	ne
 8011498:	230a      	movne	r3, #10
 801149a:	2308      	moveq	r3, #8
 801149c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80114a0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80114a4:	2200      	movs	r2, #0
 80114a6:	fbbc f9f3 	udiv	r9, ip, r3
 80114aa:	4610      	mov	r0, r2
 80114ac:	fb03 ca19 	mls	sl, r3, r9, ip
 80114b0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80114b4:	2f09      	cmp	r7, #9
 80114b6:	d80f      	bhi.n	80114d8 <_strtol_l.isra.0+0xa8>
 80114b8:	463c      	mov	r4, r7
 80114ba:	42a3      	cmp	r3, r4
 80114bc:	dd1b      	ble.n	80114f6 <_strtol_l.isra.0+0xc6>
 80114be:	1c57      	adds	r7, r2, #1
 80114c0:	d007      	beq.n	80114d2 <_strtol_l.isra.0+0xa2>
 80114c2:	4581      	cmp	r9, r0
 80114c4:	d314      	bcc.n	80114f0 <_strtol_l.isra.0+0xc0>
 80114c6:	d101      	bne.n	80114cc <_strtol_l.isra.0+0x9c>
 80114c8:	45a2      	cmp	sl, r4
 80114ca:	db11      	blt.n	80114f0 <_strtol_l.isra.0+0xc0>
 80114cc:	fb00 4003 	mla	r0, r0, r3, r4
 80114d0:	2201      	movs	r2, #1
 80114d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80114d6:	e7eb      	b.n	80114b0 <_strtol_l.isra.0+0x80>
 80114d8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80114dc:	2f19      	cmp	r7, #25
 80114de:	d801      	bhi.n	80114e4 <_strtol_l.isra.0+0xb4>
 80114e0:	3c37      	subs	r4, #55	@ 0x37
 80114e2:	e7ea      	b.n	80114ba <_strtol_l.isra.0+0x8a>
 80114e4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80114e8:	2f19      	cmp	r7, #25
 80114ea:	d804      	bhi.n	80114f6 <_strtol_l.isra.0+0xc6>
 80114ec:	3c57      	subs	r4, #87	@ 0x57
 80114ee:	e7e4      	b.n	80114ba <_strtol_l.isra.0+0x8a>
 80114f0:	f04f 32ff 	mov.w	r2, #4294967295
 80114f4:	e7ed      	b.n	80114d2 <_strtol_l.isra.0+0xa2>
 80114f6:	1c53      	adds	r3, r2, #1
 80114f8:	d108      	bne.n	801150c <_strtol_l.isra.0+0xdc>
 80114fa:	2322      	movs	r3, #34	@ 0x22
 80114fc:	f8ce 3000 	str.w	r3, [lr]
 8011500:	4660      	mov	r0, ip
 8011502:	f1b8 0f00 	cmp.w	r8, #0
 8011506:	d0a0      	beq.n	801144a <_strtol_l.isra.0+0x1a>
 8011508:	1e69      	subs	r1, r5, #1
 801150a:	e006      	b.n	801151a <_strtol_l.isra.0+0xea>
 801150c:	b106      	cbz	r6, 8011510 <_strtol_l.isra.0+0xe0>
 801150e:	4240      	negs	r0, r0
 8011510:	f1b8 0f00 	cmp.w	r8, #0
 8011514:	d099      	beq.n	801144a <_strtol_l.isra.0+0x1a>
 8011516:	2a00      	cmp	r2, #0
 8011518:	d1f6      	bne.n	8011508 <_strtol_l.isra.0+0xd8>
 801151a:	f8c8 1000 	str.w	r1, [r8]
 801151e:	e794      	b.n	801144a <_strtol_l.isra.0+0x1a>
 8011520:	08012e61 	.word	0x08012e61

08011524 <_strtol_r>:
 8011524:	f7ff bf84 	b.w	8011430 <_strtol_l.isra.0>

08011528 <__ssputs_r>:
 8011528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801152c:	688e      	ldr	r6, [r1, #8]
 801152e:	461f      	mov	r7, r3
 8011530:	42be      	cmp	r6, r7
 8011532:	680b      	ldr	r3, [r1, #0]
 8011534:	4682      	mov	sl, r0
 8011536:	460c      	mov	r4, r1
 8011538:	4690      	mov	r8, r2
 801153a:	d82d      	bhi.n	8011598 <__ssputs_r+0x70>
 801153c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011540:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011544:	d026      	beq.n	8011594 <__ssputs_r+0x6c>
 8011546:	6965      	ldr	r5, [r4, #20]
 8011548:	6909      	ldr	r1, [r1, #16]
 801154a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801154e:	eba3 0901 	sub.w	r9, r3, r1
 8011552:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011556:	1c7b      	adds	r3, r7, #1
 8011558:	444b      	add	r3, r9
 801155a:	106d      	asrs	r5, r5, #1
 801155c:	429d      	cmp	r5, r3
 801155e:	bf38      	it	cc
 8011560:	461d      	movcc	r5, r3
 8011562:	0553      	lsls	r3, r2, #21
 8011564:	d527      	bpl.n	80115b6 <__ssputs_r+0x8e>
 8011566:	4629      	mov	r1, r5
 8011568:	f7fe fc74 	bl	800fe54 <_malloc_r>
 801156c:	4606      	mov	r6, r0
 801156e:	b360      	cbz	r0, 80115ca <__ssputs_r+0xa2>
 8011570:	6921      	ldr	r1, [r4, #16]
 8011572:	464a      	mov	r2, r9
 8011574:	f7fd fdfd 	bl	800f172 <memcpy>
 8011578:	89a3      	ldrh	r3, [r4, #12]
 801157a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801157e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011582:	81a3      	strh	r3, [r4, #12]
 8011584:	6126      	str	r6, [r4, #16]
 8011586:	6165      	str	r5, [r4, #20]
 8011588:	444e      	add	r6, r9
 801158a:	eba5 0509 	sub.w	r5, r5, r9
 801158e:	6026      	str	r6, [r4, #0]
 8011590:	60a5      	str	r5, [r4, #8]
 8011592:	463e      	mov	r6, r7
 8011594:	42be      	cmp	r6, r7
 8011596:	d900      	bls.n	801159a <__ssputs_r+0x72>
 8011598:	463e      	mov	r6, r7
 801159a:	6820      	ldr	r0, [r4, #0]
 801159c:	4632      	mov	r2, r6
 801159e:	4641      	mov	r1, r8
 80115a0:	f000 fb6a 	bl	8011c78 <memmove>
 80115a4:	68a3      	ldr	r3, [r4, #8]
 80115a6:	1b9b      	subs	r3, r3, r6
 80115a8:	60a3      	str	r3, [r4, #8]
 80115aa:	6823      	ldr	r3, [r4, #0]
 80115ac:	4433      	add	r3, r6
 80115ae:	6023      	str	r3, [r4, #0]
 80115b0:	2000      	movs	r0, #0
 80115b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115b6:	462a      	mov	r2, r5
 80115b8:	f000 ff43 	bl	8012442 <_realloc_r>
 80115bc:	4606      	mov	r6, r0
 80115be:	2800      	cmp	r0, #0
 80115c0:	d1e0      	bne.n	8011584 <__ssputs_r+0x5c>
 80115c2:	6921      	ldr	r1, [r4, #16]
 80115c4:	4650      	mov	r0, sl
 80115c6:	f7fe fbd1 	bl	800fd6c <_free_r>
 80115ca:	230c      	movs	r3, #12
 80115cc:	f8ca 3000 	str.w	r3, [sl]
 80115d0:	89a3      	ldrh	r3, [r4, #12]
 80115d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80115d6:	81a3      	strh	r3, [r4, #12]
 80115d8:	f04f 30ff 	mov.w	r0, #4294967295
 80115dc:	e7e9      	b.n	80115b2 <__ssputs_r+0x8a>
	...

080115e0 <_svfiprintf_r>:
 80115e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115e4:	4698      	mov	r8, r3
 80115e6:	898b      	ldrh	r3, [r1, #12]
 80115e8:	061b      	lsls	r3, r3, #24
 80115ea:	b09d      	sub	sp, #116	@ 0x74
 80115ec:	4607      	mov	r7, r0
 80115ee:	460d      	mov	r5, r1
 80115f0:	4614      	mov	r4, r2
 80115f2:	d510      	bpl.n	8011616 <_svfiprintf_r+0x36>
 80115f4:	690b      	ldr	r3, [r1, #16]
 80115f6:	b973      	cbnz	r3, 8011616 <_svfiprintf_r+0x36>
 80115f8:	2140      	movs	r1, #64	@ 0x40
 80115fa:	f7fe fc2b 	bl	800fe54 <_malloc_r>
 80115fe:	6028      	str	r0, [r5, #0]
 8011600:	6128      	str	r0, [r5, #16]
 8011602:	b930      	cbnz	r0, 8011612 <_svfiprintf_r+0x32>
 8011604:	230c      	movs	r3, #12
 8011606:	603b      	str	r3, [r7, #0]
 8011608:	f04f 30ff 	mov.w	r0, #4294967295
 801160c:	b01d      	add	sp, #116	@ 0x74
 801160e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011612:	2340      	movs	r3, #64	@ 0x40
 8011614:	616b      	str	r3, [r5, #20]
 8011616:	2300      	movs	r3, #0
 8011618:	9309      	str	r3, [sp, #36]	@ 0x24
 801161a:	2320      	movs	r3, #32
 801161c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011620:	f8cd 800c 	str.w	r8, [sp, #12]
 8011624:	2330      	movs	r3, #48	@ 0x30
 8011626:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80117c4 <_svfiprintf_r+0x1e4>
 801162a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801162e:	f04f 0901 	mov.w	r9, #1
 8011632:	4623      	mov	r3, r4
 8011634:	469a      	mov	sl, r3
 8011636:	f813 2b01 	ldrb.w	r2, [r3], #1
 801163a:	b10a      	cbz	r2, 8011640 <_svfiprintf_r+0x60>
 801163c:	2a25      	cmp	r2, #37	@ 0x25
 801163e:	d1f9      	bne.n	8011634 <_svfiprintf_r+0x54>
 8011640:	ebba 0b04 	subs.w	fp, sl, r4
 8011644:	d00b      	beq.n	801165e <_svfiprintf_r+0x7e>
 8011646:	465b      	mov	r3, fp
 8011648:	4622      	mov	r2, r4
 801164a:	4629      	mov	r1, r5
 801164c:	4638      	mov	r0, r7
 801164e:	f7ff ff6b 	bl	8011528 <__ssputs_r>
 8011652:	3001      	adds	r0, #1
 8011654:	f000 80a7 	beq.w	80117a6 <_svfiprintf_r+0x1c6>
 8011658:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801165a:	445a      	add	r2, fp
 801165c:	9209      	str	r2, [sp, #36]	@ 0x24
 801165e:	f89a 3000 	ldrb.w	r3, [sl]
 8011662:	2b00      	cmp	r3, #0
 8011664:	f000 809f 	beq.w	80117a6 <_svfiprintf_r+0x1c6>
 8011668:	2300      	movs	r3, #0
 801166a:	f04f 32ff 	mov.w	r2, #4294967295
 801166e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011672:	f10a 0a01 	add.w	sl, sl, #1
 8011676:	9304      	str	r3, [sp, #16]
 8011678:	9307      	str	r3, [sp, #28]
 801167a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801167e:	931a      	str	r3, [sp, #104]	@ 0x68
 8011680:	4654      	mov	r4, sl
 8011682:	2205      	movs	r2, #5
 8011684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011688:	484e      	ldr	r0, [pc, #312]	@ (80117c4 <_svfiprintf_r+0x1e4>)
 801168a:	f7ee fdd9 	bl	8000240 <memchr>
 801168e:	9a04      	ldr	r2, [sp, #16]
 8011690:	b9d8      	cbnz	r0, 80116ca <_svfiprintf_r+0xea>
 8011692:	06d0      	lsls	r0, r2, #27
 8011694:	bf44      	itt	mi
 8011696:	2320      	movmi	r3, #32
 8011698:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801169c:	0711      	lsls	r1, r2, #28
 801169e:	bf44      	itt	mi
 80116a0:	232b      	movmi	r3, #43	@ 0x2b
 80116a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80116a6:	f89a 3000 	ldrb.w	r3, [sl]
 80116aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80116ac:	d015      	beq.n	80116da <_svfiprintf_r+0xfa>
 80116ae:	9a07      	ldr	r2, [sp, #28]
 80116b0:	4654      	mov	r4, sl
 80116b2:	2000      	movs	r0, #0
 80116b4:	f04f 0c0a 	mov.w	ip, #10
 80116b8:	4621      	mov	r1, r4
 80116ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80116be:	3b30      	subs	r3, #48	@ 0x30
 80116c0:	2b09      	cmp	r3, #9
 80116c2:	d94b      	bls.n	801175c <_svfiprintf_r+0x17c>
 80116c4:	b1b0      	cbz	r0, 80116f4 <_svfiprintf_r+0x114>
 80116c6:	9207      	str	r2, [sp, #28]
 80116c8:	e014      	b.n	80116f4 <_svfiprintf_r+0x114>
 80116ca:	eba0 0308 	sub.w	r3, r0, r8
 80116ce:	fa09 f303 	lsl.w	r3, r9, r3
 80116d2:	4313      	orrs	r3, r2
 80116d4:	9304      	str	r3, [sp, #16]
 80116d6:	46a2      	mov	sl, r4
 80116d8:	e7d2      	b.n	8011680 <_svfiprintf_r+0xa0>
 80116da:	9b03      	ldr	r3, [sp, #12]
 80116dc:	1d19      	adds	r1, r3, #4
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	9103      	str	r1, [sp, #12]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	bfbb      	ittet	lt
 80116e6:	425b      	neglt	r3, r3
 80116e8:	f042 0202 	orrlt.w	r2, r2, #2
 80116ec:	9307      	strge	r3, [sp, #28]
 80116ee:	9307      	strlt	r3, [sp, #28]
 80116f0:	bfb8      	it	lt
 80116f2:	9204      	strlt	r2, [sp, #16]
 80116f4:	7823      	ldrb	r3, [r4, #0]
 80116f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80116f8:	d10a      	bne.n	8011710 <_svfiprintf_r+0x130>
 80116fa:	7863      	ldrb	r3, [r4, #1]
 80116fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80116fe:	d132      	bne.n	8011766 <_svfiprintf_r+0x186>
 8011700:	9b03      	ldr	r3, [sp, #12]
 8011702:	1d1a      	adds	r2, r3, #4
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	9203      	str	r2, [sp, #12]
 8011708:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801170c:	3402      	adds	r4, #2
 801170e:	9305      	str	r3, [sp, #20]
 8011710:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80117d4 <_svfiprintf_r+0x1f4>
 8011714:	7821      	ldrb	r1, [r4, #0]
 8011716:	2203      	movs	r2, #3
 8011718:	4650      	mov	r0, sl
 801171a:	f7ee fd91 	bl	8000240 <memchr>
 801171e:	b138      	cbz	r0, 8011730 <_svfiprintf_r+0x150>
 8011720:	9b04      	ldr	r3, [sp, #16]
 8011722:	eba0 000a 	sub.w	r0, r0, sl
 8011726:	2240      	movs	r2, #64	@ 0x40
 8011728:	4082      	lsls	r2, r0
 801172a:	4313      	orrs	r3, r2
 801172c:	3401      	adds	r4, #1
 801172e:	9304      	str	r3, [sp, #16]
 8011730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011734:	4824      	ldr	r0, [pc, #144]	@ (80117c8 <_svfiprintf_r+0x1e8>)
 8011736:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801173a:	2206      	movs	r2, #6
 801173c:	f7ee fd80 	bl	8000240 <memchr>
 8011740:	2800      	cmp	r0, #0
 8011742:	d036      	beq.n	80117b2 <_svfiprintf_r+0x1d2>
 8011744:	4b21      	ldr	r3, [pc, #132]	@ (80117cc <_svfiprintf_r+0x1ec>)
 8011746:	bb1b      	cbnz	r3, 8011790 <_svfiprintf_r+0x1b0>
 8011748:	9b03      	ldr	r3, [sp, #12]
 801174a:	3307      	adds	r3, #7
 801174c:	f023 0307 	bic.w	r3, r3, #7
 8011750:	3308      	adds	r3, #8
 8011752:	9303      	str	r3, [sp, #12]
 8011754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011756:	4433      	add	r3, r6
 8011758:	9309      	str	r3, [sp, #36]	@ 0x24
 801175a:	e76a      	b.n	8011632 <_svfiprintf_r+0x52>
 801175c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011760:	460c      	mov	r4, r1
 8011762:	2001      	movs	r0, #1
 8011764:	e7a8      	b.n	80116b8 <_svfiprintf_r+0xd8>
 8011766:	2300      	movs	r3, #0
 8011768:	3401      	adds	r4, #1
 801176a:	9305      	str	r3, [sp, #20]
 801176c:	4619      	mov	r1, r3
 801176e:	f04f 0c0a 	mov.w	ip, #10
 8011772:	4620      	mov	r0, r4
 8011774:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011778:	3a30      	subs	r2, #48	@ 0x30
 801177a:	2a09      	cmp	r2, #9
 801177c:	d903      	bls.n	8011786 <_svfiprintf_r+0x1a6>
 801177e:	2b00      	cmp	r3, #0
 8011780:	d0c6      	beq.n	8011710 <_svfiprintf_r+0x130>
 8011782:	9105      	str	r1, [sp, #20]
 8011784:	e7c4      	b.n	8011710 <_svfiprintf_r+0x130>
 8011786:	fb0c 2101 	mla	r1, ip, r1, r2
 801178a:	4604      	mov	r4, r0
 801178c:	2301      	movs	r3, #1
 801178e:	e7f0      	b.n	8011772 <_svfiprintf_r+0x192>
 8011790:	ab03      	add	r3, sp, #12
 8011792:	9300      	str	r3, [sp, #0]
 8011794:	462a      	mov	r2, r5
 8011796:	4b0e      	ldr	r3, [pc, #56]	@ (80117d0 <_svfiprintf_r+0x1f0>)
 8011798:	a904      	add	r1, sp, #16
 801179a:	4638      	mov	r0, r7
 801179c:	f7fc fc5c 	bl	800e058 <_printf_float>
 80117a0:	1c42      	adds	r2, r0, #1
 80117a2:	4606      	mov	r6, r0
 80117a4:	d1d6      	bne.n	8011754 <_svfiprintf_r+0x174>
 80117a6:	89ab      	ldrh	r3, [r5, #12]
 80117a8:	065b      	lsls	r3, r3, #25
 80117aa:	f53f af2d 	bmi.w	8011608 <_svfiprintf_r+0x28>
 80117ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80117b0:	e72c      	b.n	801160c <_svfiprintf_r+0x2c>
 80117b2:	ab03      	add	r3, sp, #12
 80117b4:	9300      	str	r3, [sp, #0]
 80117b6:	462a      	mov	r2, r5
 80117b8:	4b05      	ldr	r3, [pc, #20]	@ (80117d0 <_svfiprintf_r+0x1f0>)
 80117ba:	a904      	add	r1, sp, #16
 80117bc:	4638      	mov	r0, r7
 80117be:	f7fc fed3 	bl	800e568 <_printf_i>
 80117c2:	e7ed      	b.n	80117a0 <_svfiprintf_r+0x1c0>
 80117c4:	08012c5d 	.word	0x08012c5d
 80117c8:	08012c67 	.word	0x08012c67
 80117cc:	0800e059 	.word	0x0800e059
 80117d0:	08011529 	.word	0x08011529
 80117d4:	08012c63 	.word	0x08012c63

080117d8 <__sfputc_r>:
 80117d8:	6893      	ldr	r3, [r2, #8]
 80117da:	3b01      	subs	r3, #1
 80117dc:	2b00      	cmp	r3, #0
 80117de:	b410      	push	{r4}
 80117e0:	6093      	str	r3, [r2, #8]
 80117e2:	da08      	bge.n	80117f6 <__sfputc_r+0x1e>
 80117e4:	6994      	ldr	r4, [r2, #24]
 80117e6:	42a3      	cmp	r3, r4
 80117e8:	db01      	blt.n	80117ee <__sfputc_r+0x16>
 80117ea:	290a      	cmp	r1, #10
 80117ec:	d103      	bne.n	80117f6 <__sfputc_r+0x1e>
 80117ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80117f2:	f7fd bbaa 	b.w	800ef4a <__swbuf_r>
 80117f6:	6813      	ldr	r3, [r2, #0]
 80117f8:	1c58      	adds	r0, r3, #1
 80117fa:	6010      	str	r0, [r2, #0]
 80117fc:	7019      	strb	r1, [r3, #0]
 80117fe:	4608      	mov	r0, r1
 8011800:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011804:	4770      	bx	lr

08011806 <__sfputs_r>:
 8011806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011808:	4606      	mov	r6, r0
 801180a:	460f      	mov	r7, r1
 801180c:	4614      	mov	r4, r2
 801180e:	18d5      	adds	r5, r2, r3
 8011810:	42ac      	cmp	r4, r5
 8011812:	d101      	bne.n	8011818 <__sfputs_r+0x12>
 8011814:	2000      	movs	r0, #0
 8011816:	e007      	b.n	8011828 <__sfputs_r+0x22>
 8011818:	f814 1b01 	ldrb.w	r1, [r4], #1
 801181c:	463a      	mov	r2, r7
 801181e:	4630      	mov	r0, r6
 8011820:	f7ff ffda 	bl	80117d8 <__sfputc_r>
 8011824:	1c43      	adds	r3, r0, #1
 8011826:	d1f3      	bne.n	8011810 <__sfputs_r+0xa>
 8011828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801182c <_vfiprintf_r>:
 801182c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011830:	460d      	mov	r5, r1
 8011832:	b09d      	sub	sp, #116	@ 0x74
 8011834:	4614      	mov	r4, r2
 8011836:	4698      	mov	r8, r3
 8011838:	4606      	mov	r6, r0
 801183a:	b118      	cbz	r0, 8011844 <_vfiprintf_r+0x18>
 801183c:	6a03      	ldr	r3, [r0, #32]
 801183e:	b90b      	cbnz	r3, 8011844 <_vfiprintf_r+0x18>
 8011840:	f7fd fa42 	bl	800ecc8 <__sinit>
 8011844:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011846:	07d9      	lsls	r1, r3, #31
 8011848:	d405      	bmi.n	8011856 <_vfiprintf_r+0x2a>
 801184a:	89ab      	ldrh	r3, [r5, #12]
 801184c:	059a      	lsls	r2, r3, #22
 801184e:	d402      	bmi.n	8011856 <_vfiprintf_r+0x2a>
 8011850:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011852:	f7fd fc8c 	bl	800f16e <__retarget_lock_acquire_recursive>
 8011856:	89ab      	ldrh	r3, [r5, #12]
 8011858:	071b      	lsls	r3, r3, #28
 801185a:	d501      	bpl.n	8011860 <_vfiprintf_r+0x34>
 801185c:	692b      	ldr	r3, [r5, #16]
 801185e:	b99b      	cbnz	r3, 8011888 <_vfiprintf_r+0x5c>
 8011860:	4629      	mov	r1, r5
 8011862:	4630      	mov	r0, r6
 8011864:	f7fd fbb0 	bl	800efc8 <__swsetup_r>
 8011868:	b170      	cbz	r0, 8011888 <_vfiprintf_r+0x5c>
 801186a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801186c:	07dc      	lsls	r4, r3, #31
 801186e:	d504      	bpl.n	801187a <_vfiprintf_r+0x4e>
 8011870:	f04f 30ff 	mov.w	r0, #4294967295
 8011874:	b01d      	add	sp, #116	@ 0x74
 8011876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801187a:	89ab      	ldrh	r3, [r5, #12]
 801187c:	0598      	lsls	r0, r3, #22
 801187e:	d4f7      	bmi.n	8011870 <_vfiprintf_r+0x44>
 8011880:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011882:	f7fd fc75 	bl	800f170 <__retarget_lock_release_recursive>
 8011886:	e7f3      	b.n	8011870 <_vfiprintf_r+0x44>
 8011888:	2300      	movs	r3, #0
 801188a:	9309      	str	r3, [sp, #36]	@ 0x24
 801188c:	2320      	movs	r3, #32
 801188e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011892:	f8cd 800c 	str.w	r8, [sp, #12]
 8011896:	2330      	movs	r3, #48	@ 0x30
 8011898:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011a48 <_vfiprintf_r+0x21c>
 801189c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80118a0:	f04f 0901 	mov.w	r9, #1
 80118a4:	4623      	mov	r3, r4
 80118a6:	469a      	mov	sl, r3
 80118a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80118ac:	b10a      	cbz	r2, 80118b2 <_vfiprintf_r+0x86>
 80118ae:	2a25      	cmp	r2, #37	@ 0x25
 80118b0:	d1f9      	bne.n	80118a6 <_vfiprintf_r+0x7a>
 80118b2:	ebba 0b04 	subs.w	fp, sl, r4
 80118b6:	d00b      	beq.n	80118d0 <_vfiprintf_r+0xa4>
 80118b8:	465b      	mov	r3, fp
 80118ba:	4622      	mov	r2, r4
 80118bc:	4629      	mov	r1, r5
 80118be:	4630      	mov	r0, r6
 80118c0:	f7ff ffa1 	bl	8011806 <__sfputs_r>
 80118c4:	3001      	adds	r0, #1
 80118c6:	f000 80a7 	beq.w	8011a18 <_vfiprintf_r+0x1ec>
 80118ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80118cc:	445a      	add	r2, fp
 80118ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80118d0:	f89a 3000 	ldrb.w	r3, [sl]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	f000 809f 	beq.w	8011a18 <_vfiprintf_r+0x1ec>
 80118da:	2300      	movs	r3, #0
 80118dc:	f04f 32ff 	mov.w	r2, #4294967295
 80118e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80118e4:	f10a 0a01 	add.w	sl, sl, #1
 80118e8:	9304      	str	r3, [sp, #16]
 80118ea:	9307      	str	r3, [sp, #28]
 80118ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80118f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80118f2:	4654      	mov	r4, sl
 80118f4:	2205      	movs	r2, #5
 80118f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118fa:	4853      	ldr	r0, [pc, #332]	@ (8011a48 <_vfiprintf_r+0x21c>)
 80118fc:	f7ee fca0 	bl	8000240 <memchr>
 8011900:	9a04      	ldr	r2, [sp, #16]
 8011902:	b9d8      	cbnz	r0, 801193c <_vfiprintf_r+0x110>
 8011904:	06d1      	lsls	r1, r2, #27
 8011906:	bf44      	itt	mi
 8011908:	2320      	movmi	r3, #32
 801190a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801190e:	0713      	lsls	r3, r2, #28
 8011910:	bf44      	itt	mi
 8011912:	232b      	movmi	r3, #43	@ 0x2b
 8011914:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011918:	f89a 3000 	ldrb.w	r3, [sl]
 801191c:	2b2a      	cmp	r3, #42	@ 0x2a
 801191e:	d015      	beq.n	801194c <_vfiprintf_r+0x120>
 8011920:	9a07      	ldr	r2, [sp, #28]
 8011922:	4654      	mov	r4, sl
 8011924:	2000      	movs	r0, #0
 8011926:	f04f 0c0a 	mov.w	ip, #10
 801192a:	4621      	mov	r1, r4
 801192c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011930:	3b30      	subs	r3, #48	@ 0x30
 8011932:	2b09      	cmp	r3, #9
 8011934:	d94b      	bls.n	80119ce <_vfiprintf_r+0x1a2>
 8011936:	b1b0      	cbz	r0, 8011966 <_vfiprintf_r+0x13a>
 8011938:	9207      	str	r2, [sp, #28]
 801193a:	e014      	b.n	8011966 <_vfiprintf_r+0x13a>
 801193c:	eba0 0308 	sub.w	r3, r0, r8
 8011940:	fa09 f303 	lsl.w	r3, r9, r3
 8011944:	4313      	orrs	r3, r2
 8011946:	9304      	str	r3, [sp, #16]
 8011948:	46a2      	mov	sl, r4
 801194a:	e7d2      	b.n	80118f2 <_vfiprintf_r+0xc6>
 801194c:	9b03      	ldr	r3, [sp, #12]
 801194e:	1d19      	adds	r1, r3, #4
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	9103      	str	r1, [sp, #12]
 8011954:	2b00      	cmp	r3, #0
 8011956:	bfbb      	ittet	lt
 8011958:	425b      	neglt	r3, r3
 801195a:	f042 0202 	orrlt.w	r2, r2, #2
 801195e:	9307      	strge	r3, [sp, #28]
 8011960:	9307      	strlt	r3, [sp, #28]
 8011962:	bfb8      	it	lt
 8011964:	9204      	strlt	r2, [sp, #16]
 8011966:	7823      	ldrb	r3, [r4, #0]
 8011968:	2b2e      	cmp	r3, #46	@ 0x2e
 801196a:	d10a      	bne.n	8011982 <_vfiprintf_r+0x156>
 801196c:	7863      	ldrb	r3, [r4, #1]
 801196e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011970:	d132      	bne.n	80119d8 <_vfiprintf_r+0x1ac>
 8011972:	9b03      	ldr	r3, [sp, #12]
 8011974:	1d1a      	adds	r2, r3, #4
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	9203      	str	r2, [sp, #12]
 801197a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801197e:	3402      	adds	r4, #2
 8011980:	9305      	str	r3, [sp, #20]
 8011982:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011a58 <_vfiprintf_r+0x22c>
 8011986:	7821      	ldrb	r1, [r4, #0]
 8011988:	2203      	movs	r2, #3
 801198a:	4650      	mov	r0, sl
 801198c:	f7ee fc58 	bl	8000240 <memchr>
 8011990:	b138      	cbz	r0, 80119a2 <_vfiprintf_r+0x176>
 8011992:	9b04      	ldr	r3, [sp, #16]
 8011994:	eba0 000a 	sub.w	r0, r0, sl
 8011998:	2240      	movs	r2, #64	@ 0x40
 801199a:	4082      	lsls	r2, r0
 801199c:	4313      	orrs	r3, r2
 801199e:	3401      	adds	r4, #1
 80119a0:	9304      	str	r3, [sp, #16]
 80119a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119a6:	4829      	ldr	r0, [pc, #164]	@ (8011a4c <_vfiprintf_r+0x220>)
 80119a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80119ac:	2206      	movs	r2, #6
 80119ae:	f7ee fc47 	bl	8000240 <memchr>
 80119b2:	2800      	cmp	r0, #0
 80119b4:	d03f      	beq.n	8011a36 <_vfiprintf_r+0x20a>
 80119b6:	4b26      	ldr	r3, [pc, #152]	@ (8011a50 <_vfiprintf_r+0x224>)
 80119b8:	bb1b      	cbnz	r3, 8011a02 <_vfiprintf_r+0x1d6>
 80119ba:	9b03      	ldr	r3, [sp, #12]
 80119bc:	3307      	adds	r3, #7
 80119be:	f023 0307 	bic.w	r3, r3, #7
 80119c2:	3308      	adds	r3, #8
 80119c4:	9303      	str	r3, [sp, #12]
 80119c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119c8:	443b      	add	r3, r7
 80119ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80119cc:	e76a      	b.n	80118a4 <_vfiprintf_r+0x78>
 80119ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80119d2:	460c      	mov	r4, r1
 80119d4:	2001      	movs	r0, #1
 80119d6:	e7a8      	b.n	801192a <_vfiprintf_r+0xfe>
 80119d8:	2300      	movs	r3, #0
 80119da:	3401      	adds	r4, #1
 80119dc:	9305      	str	r3, [sp, #20]
 80119de:	4619      	mov	r1, r3
 80119e0:	f04f 0c0a 	mov.w	ip, #10
 80119e4:	4620      	mov	r0, r4
 80119e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80119ea:	3a30      	subs	r2, #48	@ 0x30
 80119ec:	2a09      	cmp	r2, #9
 80119ee:	d903      	bls.n	80119f8 <_vfiprintf_r+0x1cc>
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d0c6      	beq.n	8011982 <_vfiprintf_r+0x156>
 80119f4:	9105      	str	r1, [sp, #20]
 80119f6:	e7c4      	b.n	8011982 <_vfiprintf_r+0x156>
 80119f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80119fc:	4604      	mov	r4, r0
 80119fe:	2301      	movs	r3, #1
 8011a00:	e7f0      	b.n	80119e4 <_vfiprintf_r+0x1b8>
 8011a02:	ab03      	add	r3, sp, #12
 8011a04:	9300      	str	r3, [sp, #0]
 8011a06:	462a      	mov	r2, r5
 8011a08:	4b12      	ldr	r3, [pc, #72]	@ (8011a54 <_vfiprintf_r+0x228>)
 8011a0a:	a904      	add	r1, sp, #16
 8011a0c:	4630      	mov	r0, r6
 8011a0e:	f7fc fb23 	bl	800e058 <_printf_float>
 8011a12:	4607      	mov	r7, r0
 8011a14:	1c78      	adds	r0, r7, #1
 8011a16:	d1d6      	bne.n	80119c6 <_vfiprintf_r+0x19a>
 8011a18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011a1a:	07d9      	lsls	r1, r3, #31
 8011a1c:	d405      	bmi.n	8011a2a <_vfiprintf_r+0x1fe>
 8011a1e:	89ab      	ldrh	r3, [r5, #12]
 8011a20:	059a      	lsls	r2, r3, #22
 8011a22:	d402      	bmi.n	8011a2a <_vfiprintf_r+0x1fe>
 8011a24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011a26:	f7fd fba3 	bl	800f170 <__retarget_lock_release_recursive>
 8011a2a:	89ab      	ldrh	r3, [r5, #12]
 8011a2c:	065b      	lsls	r3, r3, #25
 8011a2e:	f53f af1f 	bmi.w	8011870 <_vfiprintf_r+0x44>
 8011a32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011a34:	e71e      	b.n	8011874 <_vfiprintf_r+0x48>
 8011a36:	ab03      	add	r3, sp, #12
 8011a38:	9300      	str	r3, [sp, #0]
 8011a3a:	462a      	mov	r2, r5
 8011a3c:	4b05      	ldr	r3, [pc, #20]	@ (8011a54 <_vfiprintf_r+0x228>)
 8011a3e:	a904      	add	r1, sp, #16
 8011a40:	4630      	mov	r0, r6
 8011a42:	f7fc fd91 	bl	800e568 <_printf_i>
 8011a46:	e7e4      	b.n	8011a12 <_vfiprintf_r+0x1e6>
 8011a48:	08012c5d 	.word	0x08012c5d
 8011a4c:	08012c67 	.word	0x08012c67
 8011a50:	0800e059 	.word	0x0800e059
 8011a54:	08011807 	.word	0x08011807
 8011a58:	08012c63 	.word	0x08012c63

08011a5c <__sflush_r>:
 8011a5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a64:	0716      	lsls	r6, r2, #28
 8011a66:	4605      	mov	r5, r0
 8011a68:	460c      	mov	r4, r1
 8011a6a:	d454      	bmi.n	8011b16 <__sflush_r+0xba>
 8011a6c:	684b      	ldr	r3, [r1, #4]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	dc02      	bgt.n	8011a78 <__sflush_r+0x1c>
 8011a72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	dd48      	ble.n	8011b0a <__sflush_r+0xae>
 8011a78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011a7a:	2e00      	cmp	r6, #0
 8011a7c:	d045      	beq.n	8011b0a <__sflush_r+0xae>
 8011a7e:	2300      	movs	r3, #0
 8011a80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011a84:	682f      	ldr	r7, [r5, #0]
 8011a86:	6a21      	ldr	r1, [r4, #32]
 8011a88:	602b      	str	r3, [r5, #0]
 8011a8a:	d030      	beq.n	8011aee <__sflush_r+0x92>
 8011a8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011a8e:	89a3      	ldrh	r3, [r4, #12]
 8011a90:	0759      	lsls	r1, r3, #29
 8011a92:	d505      	bpl.n	8011aa0 <__sflush_r+0x44>
 8011a94:	6863      	ldr	r3, [r4, #4]
 8011a96:	1ad2      	subs	r2, r2, r3
 8011a98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011a9a:	b10b      	cbz	r3, 8011aa0 <__sflush_r+0x44>
 8011a9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011a9e:	1ad2      	subs	r2, r2, r3
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011aa4:	6a21      	ldr	r1, [r4, #32]
 8011aa6:	4628      	mov	r0, r5
 8011aa8:	47b0      	blx	r6
 8011aaa:	1c43      	adds	r3, r0, #1
 8011aac:	89a3      	ldrh	r3, [r4, #12]
 8011aae:	d106      	bne.n	8011abe <__sflush_r+0x62>
 8011ab0:	6829      	ldr	r1, [r5, #0]
 8011ab2:	291d      	cmp	r1, #29
 8011ab4:	d82b      	bhi.n	8011b0e <__sflush_r+0xb2>
 8011ab6:	4a2a      	ldr	r2, [pc, #168]	@ (8011b60 <__sflush_r+0x104>)
 8011ab8:	40ca      	lsrs	r2, r1
 8011aba:	07d6      	lsls	r6, r2, #31
 8011abc:	d527      	bpl.n	8011b0e <__sflush_r+0xb2>
 8011abe:	2200      	movs	r2, #0
 8011ac0:	6062      	str	r2, [r4, #4]
 8011ac2:	04d9      	lsls	r1, r3, #19
 8011ac4:	6922      	ldr	r2, [r4, #16]
 8011ac6:	6022      	str	r2, [r4, #0]
 8011ac8:	d504      	bpl.n	8011ad4 <__sflush_r+0x78>
 8011aca:	1c42      	adds	r2, r0, #1
 8011acc:	d101      	bne.n	8011ad2 <__sflush_r+0x76>
 8011ace:	682b      	ldr	r3, [r5, #0]
 8011ad0:	b903      	cbnz	r3, 8011ad4 <__sflush_r+0x78>
 8011ad2:	6560      	str	r0, [r4, #84]	@ 0x54
 8011ad4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011ad6:	602f      	str	r7, [r5, #0]
 8011ad8:	b1b9      	cbz	r1, 8011b0a <__sflush_r+0xae>
 8011ada:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011ade:	4299      	cmp	r1, r3
 8011ae0:	d002      	beq.n	8011ae8 <__sflush_r+0x8c>
 8011ae2:	4628      	mov	r0, r5
 8011ae4:	f7fe f942 	bl	800fd6c <_free_r>
 8011ae8:	2300      	movs	r3, #0
 8011aea:	6363      	str	r3, [r4, #52]	@ 0x34
 8011aec:	e00d      	b.n	8011b0a <__sflush_r+0xae>
 8011aee:	2301      	movs	r3, #1
 8011af0:	4628      	mov	r0, r5
 8011af2:	47b0      	blx	r6
 8011af4:	4602      	mov	r2, r0
 8011af6:	1c50      	adds	r0, r2, #1
 8011af8:	d1c9      	bne.n	8011a8e <__sflush_r+0x32>
 8011afa:	682b      	ldr	r3, [r5, #0]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d0c6      	beq.n	8011a8e <__sflush_r+0x32>
 8011b00:	2b1d      	cmp	r3, #29
 8011b02:	d001      	beq.n	8011b08 <__sflush_r+0xac>
 8011b04:	2b16      	cmp	r3, #22
 8011b06:	d11e      	bne.n	8011b46 <__sflush_r+0xea>
 8011b08:	602f      	str	r7, [r5, #0]
 8011b0a:	2000      	movs	r0, #0
 8011b0c:	e022      	b.n	8011b54 <__sflush_r+0xf8>
 8011b0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b12:	b21b      	sxth	r3, r3
 8011b14:	e01b      	b.n	8011b4e <__sflush_r+0xf2>
 8011b16:	690f      	ldr	r7, [r1, #16]
 8011b18:	2f00      	cmp	r7, #0
 8011b1a:	d0f6      	beq.n	8011b0a <__sflush_r+0xae>
 8011b1c:	0793      	lsls	r3, r2, #30
 8011b1e:	680e      	ldr	r6, [r1, #0]
 8011b20:	bf08      	it	eq
 8011b22:	694b      	ldreq	r3, [r1, #20]
 8011b24:	600f      	str	r7, [r1, #0]
 8011b26:	bf18      	it	ne
 8011b28:	2300      	movne	r3, #0
 8011b2a:	eba6 0807 	sub.w	r8, r6, r7
 8011b2e:	608b      	str	r3, [r1, #8]
 8011b30:	f1b8 0f00 	cmp.w	r8, #0
 8011b34:	dde9      	ble.n	8011b0a <__sflush_r+0xae>
 8011b36:	6a21      	ldr	r1, [r4, #32]
 8011b38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011b3a:	4643      	mov	r3, r8
 8011b3c:	463a      	mov	r2, r7
 8011b3e:	4628      	mov	r0, r5
 8011b40:	47b0      	blx	r6
 8011b42:	2800      	cmp	r0, #0
 8011b44:	dc08      	bgt.n	8011b58 <__sflush_r+0xfc>
 8011b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b4e:	81a3      	strh	r3, [r4, #12]
 8011b50:	f04f 30ff 	mov.w	r0, #4294967295
 8011b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b58:	4407      	add	r7, r0
 8011b5a:	eba8 0800 	sub.w	r8, r8, r0
 8011b5e:	e7e7      	b.n	8011b30 <__sflush_r+0xd4>
 8011b60:	20400001 	.word	0x20400001

08011b64 <_fflush_r>:
 8011b64:	b538      	push	{r3, r4, r5, lr}
 8011b66:	690b      	ldr	r3, [r1, #16]
 8011b68:	4605      	mov	r5, r0
 8011b6a:	460c      	mov	r4, r1
 8011b6c:	b913      	cbnz	r3, 8011b74 <_fflush_r+0x10>
 8011b6e:	2500      	movs	r5, #0
 8011b70:	4628      	mov	r0, r5
 8011b72:	bd38      	pop	{r3, r4, r5, pc}
 8011b74:	b118      	cbz	r0, 8011b7e <_fflush_r+0x1a>
 8011b76:	6a03      	ldr	r3, [r0, #32]
 8011b78:	b90b      	cbnz	r3, 8011b7e <_fflush_r+0x1a>
 8011b7a:	f7fd f8a5 	bl	800ecc8 <__sinit>
 8011b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d0f3      	beq.n	8011b6e <_fflush_r+0xa>
 8011b86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011b88:	07d0      	lsls	r0, r2, #31
 8011b8a:	d404      	bmi.n	8011b96 <_fflush_r+0x32>
 8011b8c:	0599      	lsls	r1, r3, #22
 8011b8e:	d402      	bmi.n	8011b96 <_fflush_r+0x32>
 8011b90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b92:	f7fd faec 	bl	800f16e <__retarget_lock_acquire_recursive>
 8011b96:	4628      	mov	r0, r5
 8011b98:	4621      	mov	r1, r4
 8011b9a:	f7ff ff5f 	bl	8011a5c <__sflush_r>
 8011b9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011ba0:	07da      	lsls	r2, r3, #31
 8011ba2:	4605      	mov	r5, r0
 8011ba4:	d4e4      	bmi.n	8011b70 <_fflush_r+0xc>
 8011ba6:	89a3      	ldrh	r3, [r4, #12]
 8011ba8:	059b      	lsls	r3, r3, #22
 8011baa:	d4e1      	bmi.n	8011b70 <_fflush_r+0xc>
 8011bac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011bae:	f7fd fadf 	bl	800f170 <__retarget_lock_release_recursive>
 8011bb2:	e7dd      	b.n	8011b70 <_fflush_r+0xc>

08011bb4 <__swhatbuf_r>:
 8011bb4:	b570      	push	{r4, r5, r6, lr}
 8011bb6:	460c      	mov	r4, r1
 8011bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bbc:	2900      	cmp	r1, #0
 8011bbe:	b096      	sub	sp, #88	@ 0x58
 8011bc0:	4615      	mov	r5, r2
 8011bc2:	461e      	mov	r6, r3
 8011bc4:	da0d      	bge.n	8011be2 <__swhatbuf_r+0x2e>
 8011bc6:	89a3      	ldrh	r3, [r4, #12]
 8011bc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011bcc:	f04f 0100 	mov.w	r1, #0
 8011bd0:	bf14      	ite	ne
 8011bd2:	2340      	movne	r3, #64	@ 0x40
 8011bd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011bd8:	2000      	movs	r0, #0
 8011bda:	6031      	str	r1, [r6, #0]
 8011bdc:	602b      	str	r3, [r5, #0]
 8011bde:	b016      	add	sp, #88	@ 0x58
 8011be0:	bd70      	pop	{r4, r5, r6, pc}
 8011be2:	466a      	mov	r2, sp
 8011be4:	f000 f874 	bl	8011cd0 <_fstat_r>
 8011be8:	2800      	cmp	r0, #0
 8011bea:	dbec      	blt.n	8011bc6 <__swhatbuf_r+0x12>
 8011bec:	9901      	ldr	r1, [sp, #4]
 8011bee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011bf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011bf6:	4259      	negs	r1, r3
 8011bf8:	4159      	adcs	r1, r3
 8011bfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011bfe:	e7eb      	b.n	8011bd8 <__swhatbuf_r+0x24>

08011c00 <__smakebuf_r>:
 8011c00:	898b      	ldrh	r3, [r1, #12]
 8011c02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c04:	079d      	lsls	r5, r3, #30
 8011c06:	4606      	mov	r6, r0
 8011c08:	460c      	mov	r4, r1
 8011c0a:	d507      	bpl.n	8011c1c <__smakebuf_r+0x1c>
 8011c0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011c10:	6023      	str	r3, [r4, #0]
 8011c12:	6123      	str	r3, [r4, #16]
 8011c14:	2301      	movs	r3, #1
 8011c16:	6163      	str	r3, [r4, #20]
 8011c18:	b003      	add	sp, #12
 8011c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c1c:	ab01      	add	r3, sp, #4
 8011c1e:	466a      	mov	r2, sp
 8011c20:	f7ff ffc8 	bl	8011bb4 <__swhatbuf_r>
 8011c24:	9f00      	ldr	r7, [sp, #0]
 8011c26:	4605      	mov	r5, r0
 8011c28:	4639      	mov	r1, r7
 8011c2a:	4630      	mov	r0, r6
 8011c2c:	f7fe f912 	bl	800fe54 <_malloc_r>
 8011c30:	b948      	cbnz	r0, 8011c46 <__smakebuf_r+0x46>
 8011c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c36:	059a      	lsls	r2, r3, #22
 8011c38:	d4ee      	bmi.n	8011c18 <__smakebuf_r+0x18>
 8011c3a:	f023 0303 	bic.w	r3, r3, #3
 8011c3e:	f043 0302 	orr.w	r3, r3, #2
 8011c42:	81a3      	strh	r3, [r4, #12]
 8011c44:	e7e2      	b.n	8011c0c <__smakebuf_r+0xc>
 8011c46:	89a3      	ldrh	r3, [r4, #12]
 8011c48:	6020      	str	r0, [r4, #0]
 8011c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c4e:	81a3      	strh	r3, [r4, #12]
 8011c50:	9b01      	ldr	r3, [sp, #4]
 8011c52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011c56:	b15b      	cbz	r3, 8011c70 <__smakebuf_r+0x70>
 8011c58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c5c:	4630      	mov	r0, r6
 8011c5e:	f000 f849 	bl	8011cf4 <_isatty_r>
 8011c62:	b128      	cbz	r0, 8011c70 <__smakebuf_r+0x70>
 8011c64:	89a3      	ldrh	r3, [r4, #12]
 8011c66:	f023 0303 	bic.w	r3, r3, #3
 8011c6a:	f043 0301 	orr.w	r3, r3, #1
 8011c6e:	81a3      	strh	r3, [r4, #12]
 8011c70:	89a3      	ldrh	r3, [r4, #12]
 8011c72:	431d      	orrs	r5, r3
 8011c74:	81a5      	strh	r5, [r4, #12]
 8011c76:	e7cf      	b.n	8011c18 <__smakebuf_r+0x18>

08011c78 <memmove>:
 8011c78:	4288      	cmp	r0, r1
 8011c7a:	b510      	push	{r4, lr}
 8011c7c:	eb01 0402 	add.w	r4, r1, r2
 8011c80:	d902      	bls.n	8011c88 <memmove+0x10>
 8011c82:	4284      	cmp	r4, r0
 8011c84:	4623      	mov	r3, r4
 8011c86:	d807      	bhi.n	8011c98 <memmove+0x20>
 8011c88:	1e43      	subs	r3, r0, #1
 8011c8a:	42a1      	cmp	r1, r4
 8011c8c:	d008      	beq.n	8011ca0 <memmove+0x28>
 8011c8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011c96:	e7f8      	b.n	8011c8a <memmove+0x12>
 8011c98:	4402      	add	r2, r0
 8011c9a:	4601      	mov	r1, r0
 8011c9c:	428a      	cmp	r2, r1
 8011c9e:	d100      	bne.n	8011ca2 <memmove+0x2a>
 8011ca0:	bd10      	pop	{r4, pc}
 8011ca2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011ca6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011caa:	e7f7      	b.n	8011c9c <memmove+0x24>

08011cac <strncmp>:
 8011cac:	b510      	push	{r4, lr}
 8011cae:	b16a      	cbz	r2, 8011ccc <strncmp+0x20>
 8011cb0:	3901      	subs	r1, #1
 8011cb2:	1884      	adds	r4, r0, r2
 8011cb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011cb8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011cbc:	429a      	cmp	r2, r3
 8011cbe:	d103      	bne.n	8011cc8 <strncmp+0x1c>
 8011cc0:	42a0      	cmp	r0, r4
 8011cc2:	d001      	beq.n	8011cc8 <strncmp+0x1c>
 8011cc4:	2a00      	cmp	r2, #0
 8011cc6:	d1f5      	bne.n	8011cb4 <strncmp+0x8>
 8011cc8:	1ad0      	subs	r0, r2, r3
 8011cca:	bd10      	pop	{r4, pc}
 8011ccc:	4610      	mov	r0, r2
 8011cce:	e7fc      	b.n	8011cca <strncmp+0x1e>

08011cd0 <_fstat_r>:
 8011cd0:	b538      	push	{r3, r4, r5, lr}
 8011cd2:	4d07      	ldr	r5, [pc, #28]	@ (8011cf0 <_fstat_r+0x20>)
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	4604      	mov	r4, r0
 8011cd8:	4608      	mov	r0, r1
 8011cda:	4611      	mov	r1, r2
 8011cdc:	602b      	str	r3, [r5, #0]
 8011cde:	f7f1 f98d 	bl	8002ffc <_fstat>
 8011ce2:	1c43      	adds	r3, r0, #1
 8011ce4:	d102      	bne.n	8011cec <_fstat_r+0x1c>
 8011ce6:	682b      	ldr	r3, [r5, #0]
 8011ce8:	b103      	cbz	r3, 8011cec <_fstat_r+0x1c>
 8011cea:	6023      	str	r3, [r4, #0]
 8011cec:	bd38      	pop	{r3, r4, r5, pc}
 8011cee:	bf00      	nop
 8011cf0:	20005b78 	.word	0x20005b78

08011cf4 <_isatty_r>:
 8011cf4:	b538      	push	{r3, r4, r5, lr}
 8011cf6:	4d06      	ldr	r5, [pc, #24]	@ (8011d10 <_isatty_r+0x1c>)
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	4604      	mov	r4, r0
 8011cfc:	4608      	mov	r0, r1
 8011cfe:	602b      	str	r3, [r5, #0]
 8011d00:	f7f1 f98c 	bl	800301c <_isatty>
 8011d04:	1c43      	adds	r3, r0, #1
 8011d06:	d102      	bne.n	8011d0e <_isatty_r+0x1a>
 8011d08:	682b      	ldr	r3, [r5, #0]
 8011d0a:	b103      	cbz	r3, 8011d0e <_isatty_r+0x1a>
 8011d0c:	6023      	str	r3, [r4, #0]
 8011d0e:	bd38      	pop	{r3, r4, r5, pc}
 8011d10:	20005b78 	.word	0x20005b78

08011d14 <_sbrk_r>:
 8011d14:	b538      	push	{r3, r4, r5, lr}
 8011d16:	4d06      	ldr	r5, [pc, #24]	@ (8011d30 <_sbrk_r+0x1c>)
 8011d18:	2300      	movs	r3, #0
 8011d1a:	4604      	mov	r4, r0
 8011d1c:	4608      	mov	r0, r1
 8011d1e:	602b      	str	r3, [r5, #0]
 8011d20:	f7f1 f994 	bl	800304c <_sbrk>
 8011d24:	1c43      	adds	r3, r0, #1
 8011d26:	d102      	bne.n	8011d2e <_sbrk_r+0x1a>
 8011d28:	682b      	ldr	r3, [r5, #0]
 8011d2a:	b103      	cbz	r3, 8011d2e <_sbrk_r+0x1a>
 8011d2c:	6023      	str	r3, [r4, #0]
 8011d2e:	bd38      	pop	{r3, r4, r5, pc}
 8011d30:	20005b78 	.word	0x20005b78
 8011d34:	00000000 	.word	0x00000000

08011d38 <nan>:
 8011d38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011d40 <nan+0x8>
 8011d3c:	4770      	bx	lr
 8011d3e:	bf00      	nop
 8011d40:	00000000 	.word	0x00000000
 8011d44:	7ff80000 	.word	0x7ff80000

08011d48 <__assert_func>:
 8011d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011d4a:	4614      	mov	r4, r2
 8011d4c:	461a      	mov	r2, r3
 8011d4e:	4b09      	ldr	r3, [pc, #36]	@ (8011d74 <__assert_func+0x2c>)
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	4605      	mov	r5, r0
 8011d54:	68d8      	ldr	r0, [r3, #12]
 8011d56:	b14c      	cbz	r4, 8011d6c <__assert_func+0x24>
 8011d58:	4b07      	ldr	r3, [pc, #28]	@ (8011d78 <__assert_func+0x30>)
 8011d5a:	9100      	str	r1, [sp, #0]
 8011d5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011d60:	4906      	ldr	r1, [pc, #24]	@ (8011d7c <__assert_func+0x34>)
 8011d62:	462b      	mov	r3, r5
 8011d64:	f000 fba8 	bl	80124b8 <fiprintf>
 8011d68:	f000 fbb8 	bl	80124dc <abort>
 8011d6c:	4b04      	ldr	r3, [pc, #16]	@ (8011d80 <__assert_func+0x38>)
 8011d6e:	461c      	mov	r4, r3
 8011d70:	e7f3      	b.n	8011d5a <__assert_func+0x12>
 8011d72:	bf00      	nop
 8011d74:	20000030 	.word	0x20000030
 8011d78:	08012c76 	.word	0x08012c76
 8011d7c:	08012c83 	.word	0x08012c83
 8011d80:	08012cb1 	.word	0x08012cb1

08011d84 <_calloc_r>:
 8011d84:	b570      	push	{r4, r5, r6, lr}
 8011d86:	fba1 5402 	umull	r5, r4, r1, r2
 8011d8a:	b934      	cbnz	r4, 8011d9a <_calloc_r+0x16>
 8011d8c:	4629      	mov	r1, r5
 8011d8e:	f7fe f861 	bl	800fe54 <_malloc_r>
 8011d92:	4606      	mov	r6, r0
 8011d94:	b928      	cbnz	r0, 8011da2 <_calloc_r+0x1e>
 8011d96:	4630      	mov	r0, r6
 8011d98:	bd70      	pop	{r4, r5, r6, pc}
 8011d9a:	220c      	movs	r2, #12
 8011d9c:	6002      	str	r2, [r0, #0]
 8011d9e:	2600      	movs	r6, #0
 8011da0:	e7f9      	b.n	8011d96 <_calloc_r+0x12>
 8011da2:	462a      	mov	r2, r5
 8011da4:	4621      	mov	r1, r4
 8011da6:	f7fd f965 	bl	800f074 <memset>
 8011daa:	e7f4      	b.n	8011d96 <_calloc_r+0x12>

08011dac <rshift>:
 8011dac:	6903      	ldr	r3, [r0, #16]
 8011dae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011db2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011db6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011dba:	f100 0414 	add.w	r4, r0, #20
 8011dbe:	dd45      	ble.n	8011e4c <rshift+0xa0>
 8011dc0:	f011 011f 	ands.w	r1, r1, #31
 8011dc4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011dc8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011dcc:	d10c      	bne.n	8011de8 <rshift+0x3c>
 8011dce:	f100 0710 	add.w	r7, r0, #16
 8011dd2:	4629      	mov	r1, r5
 8011dd4:	42b1      	cmp	r1, r6
 8011dd6:	d334      	bcc.n	8011e42 <rshift+0x96>
 8011dd8:	1a9b      	subs	r3, r3, r2
 8011dda:	009b      	lsls	r3, r3, #2
 8011ddc:	1eea      	subs	r2, r5, #3
 8011dde:	4296      	cmp	r6, r2
 8011de0:	bf38      	it	cc
 8011de2:	2300      	movcc	r3, #0
 8011de4:	4423      	add	r3, r4
 8011de6:	e015      	b.n	8011e14 <rshift+0x68>
 8011de8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011dec:	f1c1 0820 	rsb	r8, r1, #32
 8011df0:	40cf      	lsrs	r7, r1
 8011df2:	f105 0e04 	add.w	lr, r5, #4
 8011df6:	46a1      	mov	r9, r4
 8011df8:	4576      	cmp	r6, lr
 8011dfa:	46f4      	mov	ip, lr
 8011dfc:	d815      	bhi.n	8011e2a <rshift+0x7e>
 8011dfe:	1a9a      	subs	r2, r3, r2
 8011e00:	0092      	lsls	r2, r2, #2
 8011e02:	3a04      	subs	r2, #4
 8011e04:	3501      	adds	r5, #1
 8011e06:	42ae      	cmp	r6, r5
 8011e08:	bf38      	it	cc
 8011e0a:	2200      	movcc	r2, #0
 8011e0c:	18a3      	adds	r3, r4, r2
 8011e0e:	50a7      	str	r7, [r4, r2]
 8011e10:	b107      	cbz	r7, 8011e14 <rshift+0x68>
 8011e12:	3304      	adds	r3, #4
 8011e14:	1b1a      	subs	r2, r3, r4
 8011e16:	42a3      	cmp	r3, r4
 8011e18:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011e1c:	bf08      	it	eq
 8011e1e:	2300      	moveq	r3, #0
 8011e20:	6102      	str	r2, [r0, #16]
 8011e22:	bf08      	it	eq
 8011e24:	6143      	streq	r3, [r0, #20]
 8011e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e2a:	f8dc c000 	ldr.w	ip, [ip]
 8011e2e:	fa0c fc08 	lsl.w	ip, ip, r8
 8011e32:	ea4c 0707 	orr.w	r7, ip, r7
 8011e36:	f849 7b04 	str.w	r7, [r9], #4
 8011e3a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011e3e:	40cf      	lsrs	r7, r1
 8011e40:	e7da      	b.n	8011df8 <rshift+0x4c>
 8011e42:	f851 cb04 	ldr.w	ip, [r1], #4
 8011e46:	f847 cf04 	str.w	ip, [r7, #4]!
 8011e4a:	e7c3      	b.n	8011dd4 <rshift+0x28>
 8011e4c:	4623      	mov	r3, r4
 8011e4e:	e7e1      	b.n	8011e14 <rshift+0x68>

08011e50 <__hexdig_fun>:
 8011e50:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011e54:	2b09      	cmp	r3, #9
 8011e56:	d802      	bhi.n	8011e5e <__hexdig_fun+0xe>
 8011e58:	3820      	subs	r0, #32
 8011e5a:	b2c0      	uxtb	r0, r0
 8011e5c:	4770      	bx	lr
 8011e5e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011e62:	2b05      	cmp	r3, #5
 8011e64:	d801      	bhi.n	8011e6a <__hexdig_fun+0x1a>
 8011e66:	3847      	subs	r0, #71	@ 0x47
 8011e68:	e7f7      	b.n	8011e5a <__hexdig_fun+0xa>
 8011e6a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011e6e:	2b05      	cmp	r3, #5
 8011e70:	d801      	bhi.n	8011e76 <__hexdig_fun+0x26>
 8011e72:	3827      	subs	r0, #39	@ 0x27
 8011e74:	e7f1      	b.n	8011e5a <__hexdig_fun+0xa>
 8011e76:	2000      	movs	r0, #0
 8011e78:	4770      	bx	lr
	...

08011e7c <__gethex>:
 8011e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e80:	b085      	sub	sp, #20
 8011e82:	468a      	mov	sl, r1
 8011e84:	9302      	str	r3, [sp, #8]
 8011e86:	680b      	ldr	r3, [r1, #0]
 8011e88:	9001      	str	r0, [sp, #4]
 8011e8a:	4690      	mov	r8, r2
 8011e8c:	1c9c      	adds	r4, r3, #2
 8011e8e:	46a1      	mov	r9, r4
 8011e90:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011e94:	2830      	cmp	r0, #48	@ 0x30
 8011e96:	d0fa      	beq.n	8011e8e <__gethex+0x12>
 8011e98:	eba9 0303 	sub.w	r3, r9, r3
 8011e9c:	f1a3 0b02 	sub.w	fp, r3, #2
 8011ea0:	f7ff ffd6 	bl	8011e50 <__hexdig_fun>
 8011ea4:	4605      	mov	r5, r0
 8011ea6:	2800      	cmp	r0, #0
 8011ea8:	d168      	bne.n	8011f7c <__gethex+0x100>
 8011eaa:	49a0      	ldr	r1, [pc, #640]	@ (801212c <__gethex+0x2b0>)
 8011eac:	2201      	movs	r2, #1
 8011eae:	4648      	mov	r0, r9
 8011eb0:	f7ff fefc 	bl	8011cac <strncmp>
 8011eb4:	4607      	mov	r7, r0
 8011eb6:	2800      	cmp	r0, #0
 8011eb8:	d167      	bne.n	8011f8a <__gethex+0x10e>
 8011eba:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011ebe:	4626      	mov	r6, r4
 8011ec0:	f7ff ffc6 	bl	8011e50 <__hexdig_fun>
 8011ec4:	2800      	cmp	r0, #0
 8011ec6:	d062      	beq.n	8011f8e <__gethex+0x112>
 8011ec8:	4623      	mov	r3, r4
 8011eca:	7818      	ldrb	r0, [r3, #0]
 8011ecc:	2830      	cmp	r0, #48	@ 0x30
 8011ece:	4699      	mov	r9, r3
 8011ed0:	f103 0301 	add.w	r3, r3, #1
 8011ed4:	d0f9      	beq.n	8011eca <__gethex+0x4e>
 8011ed6:	f7ff ffbb 	bl	8011e50 <__hexdig_fun>
 8011eda:	fab0 f580 	clz	r5, r0
 8011ede:	096d      	lsrs	r5, r5, #5
 8011ee0:	f04f 0b01 	mov.w	fp, #1
 8011ee4:	464a      	mov	r2, r9
 8011ee6:	4616      	mov	r6, r2
 8011ee8:	3201      	adds	r2, #1
 8011eea:	7830      	ldrb	r0, [r6, #0]
 8011eec:	f7ff ffb0 	bl	8011e50 <__hexdig_fun>
 8011ef0:	2800      	cmp	r0, #0
 8011ef2:	d1f8      	bne.n	8011ee6 <__gethex+0x6a>
 8011ef4:	498d      	ldr	r1, [pc, #564]	@ (801212c <__gethex+0x2b0>)
 8011ef6:	2201      	movs	r2, #1
 8011ef8:	4630      	mov	r0, r6
 8011efa:	f7ff fed7 	bl	8011cac <strncmp>
 8011efe:	2800      	cmp	r0, #0
 8011f00:	d13f      	bne.n	8011f82 <__gethex+0x106>
 8011f02:	b944      	cbnz	r4, 8011f16 <__gethex+0x9a>
 8011f04:	1c74      	adds	r4, r6, #1
 8011f06:	4622      	mov	r2, r4
 8011f08:	4616      	mov	r6, r2
 8011f0a:	3201      	adds	r2, #1
 8011f0c:	7830      	ldrb	r0, [r6, #0]
 8011f0e:	f7ff ff9f 	bl	8011e50 <__hexdig_fun>
 8011f12:	2800      	cmp	r0, #0
 8011f14:	d1f8      	bne.n	8011f08 <__gethex+0x8c>
 8011f16:	1ba4      	subs	r4, r4, r6
 8011f18:	00a7      	lsls	r7, r4, #2
 8011f1a:	7833      	ldrb	r3, [r6, #0]
 8011f1c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011f20:	2b50      	cmp	r3, #80	@ 0x50
 8011f22:	d13e      	bne.n	8011fa2 <__gethex+0x126>
 8011f24:	7873      	ldrb	r3, [r6, #1]
 8011f26:	2b2b      	cmp	r3, #43	@ 0x2b
 8011f28:	d033      	beq.n	8011f92 <__gethex+0x116>
 8011f2a:	2b2d      	cmp	r3, #45	@ 0x2d
 8011f2c:	d034      	beq.n	8011f98 <__gethex+0x11c>
 8011f2e:	1c71      	adds	r1, r6, #1
 8011f30:	2400      	movs	r4, #0
 8011f32:	7808      	ldrb	r0, [r1, #0]
 8011f34:	f7ff ff8c 	bl	8011e50 <__hexdig_fun>
 8011f38:	1e43      	subs	r3, r0, #1
 8011f3a:	b2db      	uxtb	r3, r3
 8011f3c:	2b18      	cmp	r3, #24
 8011f3e:	d830      	bhi.n	8011fa2 <__gethex+0x126>
 8011f40:	f1a0 0210 	sub.w	r2, r0, #16
 8011f44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011f48:	f7ff ff82 	bl	8011e50 <__hexdig_fun>
 8011f4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8011f50:	fa5f fc8c 	uxtb.w	ip, ip
 8011f54:	f1bc 0f18 	cmp.w	ip, #24
 8011f58:	f04f 030a 	mov.w	r3, #10
 8011f5c:	d91e      	bls.n	8011f9c <__gethex+0x120>
 8011f5e:	b104      	cbz	r4, 8011f62 <__gethex+0xe6>
 8011f60:	4252      	negs	r2, r2
 8011f62:	4417      	add	r7, r2
 8011f64:	f8ca 1000 	str.w	r1, [sl]
 8011f68:	b1ed      	cbz	r5, 8011fa6 <__gethex+0x12a>
 8011f6a:	f1bb 0f00 	cmp.w	fp, #0
 8011f6e:	bf0c      	ite	eq
 8011f70:	2506      	moveq	r5, #6
 8011f72:	2500      	movne	r5, #0
 8011f74:	4628      	mov	r0, r5
 8011f76:	b005      	add	sp, #20
 8011f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f7c:	2500      	movs	r5, #0
 8011f7e:	462c      	mov	r4, r5
 8011f80:	e7b0      	b.n	8011ee4 <__gethex+0x68>
 8011f82:	2c00      	cmp	r4, #0
 8011f84:	d1c7      	bne.n	8011f16 <__gethex+0x9a>
 8011f86:	4627      	mov	r7, r4
 8011f88:	e7c7      	b.n	8011f1a <__gethex+0x9e>
 8011f8a:	464e      	mov	r6, r9
 8011f8c:	462f      	mov	r7, r5
 8011f8e:	2501      	movs	r5, #1
 8011f90:	e7c3      	b.n	8011f1a <__gethex+0x9e>
 8011f92:	2400      	movs	r4, #0
 8011f94:	1cb1      	adds	r1, r6, #2
 8011f96:	e7cc      	b.n	8011f32 <__gethex+0xb6>
 8011f98:	2401      	movs	r4, #1
 8011f9a:	e7fb      	b.n	8011f94 <__gethex+0x118>
 8011f9c:	fb03 0002 	mla	r0, r3, r2, r0
 8011fa0:	e7ce      	b.n	8011f40 <__gethex+0xc4>
 8011fa2:	4631      	mov	r1, r6
 8011fa4:	e7de      	b.n	8011f64 <__gethex+0xe8>
 8011fa6:	eba6 0309 	sub.w	r3, r6, r9
 8011faa:	3b01      	subs	r3, #1
 8011fac:	4629      	mov	r1, r5
 8011fae:	2b07      	cmp	r3, #7
 8011fb0:	dc0a      	bgt.n	8011fc8 <__gethex+0x14c>
 8011fb2:	9801      	ldr	r0, [sp, #4]
 8011fb4:	f7fd ffda 	bl	800ff6c <_Balloc>
 8011fb8:	4604      	mov	r4, r0
 8011fba:	b940      	cbnz	r0, 8011fce <__gethex+0x152>
 8011fbc:	4b5c      	ldr	r3, [pc, #368]	@ (8012130 <__gethex+0x2b4>)
 8011fbe:	4602      	mov	r2, r0
 8011fc0:	21e4      	movs	r1, #228	@ 0xe4
 8011fc2:	485c      	ldr	r0, [pc, #368]	@ (8012134 <__gethex+0x2b8>)
 8011fc4:	f7ff fec0 	bl	8011d48 <__assert_func>
 8011fc8:	3101      	adds	r1, #1
 8011fca:	105b      	asrs	r3, r3, #1
 8011fcc:	e7ef      	b.n	8011fae <__gethex+0x132>
 8011fce:	f100 0a14 	add.w	sl, r0, #20
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	4655      	mov	r5, sl
 8011fd6:	469b      	mov	fp, r3
 8011fd8:	45b1      	cmp	r9, r6
 8011fda:	d337      	bcc.n	801204c <__gethex+0x1d0>
 8011fdc:	f845 bb04 	str.w	fp, [r5], #4
 8011fe0:	eba5 050a 	sub.w	r5, r5, sl
 8011fe4:	10ad      	asrs	r5, r5, #2
 8011fe6:	6125      	str	r5, [r4, #16]
 8011fe8:	4658      	mov	r0, fp
 8011fea:	f7fe f8b1 	bl	8010150 <__hi0bits>
 8011fee:	016d      	lsls	r5, r5, #5
 8011ff0:	f8d8 6000 	ldr.w	r6, [r8]
 8011ff4:	1a2d      	subs	r5, r5, r0
 8011ff6:	42b5      	cmp	r5, r6
 8011ff8:	dd54      	ble.n	80120a4 <__gethex+0x228>
 8011ffa:	1bad      	subs	r5, r5, r6
 8011ffc:	4629      	mov	r1, r5
 8011ffe:	4620      	mov	r0, r4
 8012000:	f7fe fc3a 	bl	8010878 <__any_on>
 8012004:	4681      	mov	r9, r0
 8012006:	b178      	cbz	r0, 8012028 <__gethex+0x1ac>
 8012008:	1e6b      	subs	r3, r5, #1
 801200a:	1159      	asrs	r1, r3, #5
 801200c:	f003 021f 	and.w	r2, r3, #31
 8012010:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012014:	f04f 0901 	mov.w	r9, #1
 8012018:	fa09 f202 	lsl.w	r2, r9, r2
 801201c:	420a      	tst	r2, r1
 801201e:	d003      	beq.n	8012028 <__gethex+0x1ac>
 8012020:	454b      	cmp	r3, r9
 8012022:	dc36      	bgt.n	8012092 <__gethex+0x216>
 8012024:	f04f 0902 	mov.w	r9, #2
 8012028:	4629      	mov	r1, r5
 801202a:	4620      	mov	r0, r4
 801202c:	f7ff febe 	bl	8011dac <rshift>
 8012030:	442f      	add	r7, r5
 8012032:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012036:	42bb      	cmp	r3, r7
 8012038:	da42      	bge.n	80120c0 <__gethex+0x244>
 801203a:	9801      	ldr	r0, [sp, #4]
 801203c:	4621      	mov	r1, r4
 801203e:	f7fd ffd5 	bl	800ffec <_Bfree>
 8012042:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012044:	2300      	movs	r3, #0
 8012046:	6013      	str	r3, [r2, #0]
 8012048:	25a3      	movs	r5, #163	@ 0xa3
 801204a:	e793      	b.n	8011f74 <__gethex+0xf8>
 801204c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012050:	2a2e      	cmp	r2, #46	@ 0x2e
 8012052:	d012      	beq.n	801207a <__gethex+0x1fe>
 8012054:	2b20      	cmp	r3, #32
 8012056:	d104      	bne.n	8012062 <__gethex+0x1e6>
 8012058:	f845 bb04 	str.w	fp, [r5], #4
 801205c:	f04f 0b00 	mov.w	fp, #0
 8012060:	465b      	mov	r3, fp
 8012062:	7830      	ldrb	r0, [r6, #0]
 8012064:	9303      	str	r3, [sp, #12]
 8012066:	f7ff fef3 	bl	8011e50 <__hexdig_fun>
 801206a:	9b03      	ldr	r3, [sp, #12]
 801206c:	f000 000f 	and.w	r0, r0, #15
 8012070:	4098      	lsls	r0, r3
 8012072:	ea4b 0b00 	orr.w	fp, fp, r0
 8012076:	3304      	adds	r3, #4
 8012078:	e7ae      	b.n	8011fd8 <__gethex+0x15c>
 801207a:	45b1      	cmp	r9, r6
 801207c:	d8ea      	bhi.n	8012054 <__gethex+0x1d8>
 801207e:	492b      	ldr	r1, [pc, #172]	@ (801212c <__gethex+0x2b0>)
 8012080:	9303      	str	r3, [sp, #12]
 8012082:	2201      	movs	r2, #1
 8012084:	4630      	mov	r0, r6
 8012086:	f7ff fe11 	bl	8011cac <strncmp>
 801208a:	9b03      	ldr	r3, [sp, #12]
 801208c:	2800      	cmp	r0, #0
 801208e:	d1e1      	bne.n	8012054 <__gethex+0x1d8>
 8012090:	e7a2      	b.n	8011fd8 <__gethex+0x15c>
 8012092:	1ea9      	subs	r1, r5, #2
 8012094:	4620      	mov	r0, r4
 8012096:	f7fe fbef 	bl	8010878 <__any_on>
 801209a:	2800      	cmp	r0, #0
 801209c:	d0c2      	beq.n	8012024 <__gethex+0x1a8>
 801209e:	f04f 0903 	mov.w	r9, #3
 80120a2:	e7c1      	b.n	8012028 <__gethex+0x1ac>
 80120a4:	da09      	bge.n	80120ba <__gethex+0x23e>
 80120a6:	1b75      	subs	r5, r6, r5
 80120a8:	4621      	mov	r1, r4
 80120aa:	9801      	ldr	r0, [sp, #4]
 80120ac:	462a      	mov	r2, r5
 80120ae:	f7fe f9ad 	bl	801040c <__lshift>
 80120b2:	1b7f      	subs	r7, r7, r5
 80120b4:	4604      	mov	r4, r0
 80120b6:	f100 0a14 	add.w	sl, r0, #20
 80120ba:	f04f 0900 	mov.w	r9, #0
 80120be:	e7b8      	b.n	8012032 <__gethex+0x1b6>
 80120c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80120c4:	42bd      	cmp	r5, r7
 80120c6:	dd6f      	ble.n	80121a8 <__gethex+0x32c>
 80120c8:	1bed      	subs	r5, r5, r7
 80120ca:	42ae      	cmp	r6, r5
 80120cc:	dc34      	bgt.n	8012138 <__gethex+0x2bc>
 80120ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80120d2:	2b02      	cmp	r3, #2
 80120d4:	d022      	beq.n	801211c <__gethex+0x2a0>
 80120d6:	2b03      	cmp	r3, #3
 80120d8:	d024      	beq.n	8012124 <__gethex+0x2a8>
 80120da:	2b01      	cmp	r3, #1
 80120dc:	d115      	bne.n	801210a <__gethex+0x28e>
 80120de:	42ae      	cmp	r6, r5
 80120e0:	d113      	bne.n	801210a <__gethex+0x28e>
 80120e2:	2e01      	cmp	r6, #1
 80120e4:	d10b      	bne.n	80120fe <__gethex+0x282>
 80120e6:	9a02      	ldr	r2, [sp, #8]
 80120e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80120ec:	6013      	str	r3, [r2, #0]
 80120ee:	2301      	movs	r3, #1
 80120f0:	6123      	str	r3, [r4, #16]
 80120f2:	f8ca 3000 	str.w	r3, [sl]
 80120f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80120f8:	2562      	movs	r5, #98	@ 0x62
 80120fa:	601c      	str	r4, [r3, #0]
 80120fc:	e73a      	b.n	8011f74 <__gethex+0xf8>
 80120fe:	1e71      	subs	r1, r6, #1
 8012100:	4620      	mov	r0, r4
 8012102:	f7fe fbb9 	bl	8010878 <__any_on>
 8012106:	2800      	cmp	r0, #0
 8012108:	d1ed      	bne.n	80120e6 <__gethex+0x26a>
 801210a:	9801      	ldr	r0, [sp, #4]
 801210c:	4621      	mov	r1, r4
 801210e:	f7fd ff6d 	bl	800ffec <_Bfree>
 8012112:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012114:	2300      	movs	r3, #0
 8012116:	6013      	str	r3, [r2, #0]
 8012118:	2550      	movs	r5, #80	@ 0x50
 801211a:	e72b      	b.n	8011f74 <__gethex+0xf8>
 801211c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801211e:	2b00      	cmp	r3, #0
 8012120:	d1f3      	bne.n	801210a <__gethex+0x28e>
 8012122:	e7e0      	b.n	80120e6 <__gethex+0x26a>
 8012124:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012126:	2b00      	cmp	r3, #0
 8012128:	d1dd      	bne.n	80120e6 <__gethex+0x26a>
 801212a:	e7ee      	b.n	801210a <__gethex+0x28e>
 801212c:	08012c5b 	.word	0x08012c5b
 8012130:	08012bf1 	.word	0x08012bf1
 8012134:	08012cb2 	.word	0x08012cb2
 8012138:	1e6f      	subs	r7, r5, #1
 801213a:	f1b9 0f00 	cmp.w	r9, #0
 801213e:	d130      	bne.n	80121a2 <__gethex+0x326>
 8012140:	b127      	cbz	r7, 801214c <__gethex+0x2d0>
 8012142:	4639      	mov	r1, r7
 8012144:	4620      	mov	r0, r4
 8012146:	f7fe fb97 	bl	8010878 <__any_on>
 801214a:	4681      	mov	r9, r0
 801214c:	117a      	asrs	r2, r7, #5
 801214e:	2301      	movs	r3, #1
 8012150:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012154:	f007 071f 	and.w	r7, r7, #31
 8012158:	40bb      	lsls	r3, r7
 801215a:	4213      	tst	r3, r2
 801215c:	4629      	mov	r1, r5
 801215e:	4620      	mov	r0, r4
 8012160:	bf18      	it	ne
 8012162:	f049 0902 	orrne.w	r9, r9, #2
 8012166:	f7ff fe21 	bl	8011dac <rshift>
 801216a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801216e:	1b76      	subs	r6, r6, r5
 8012170:	2502      	movs	r5, #2
 8012172:	f1b9 0f00 	cmp.w	r9, #0
 8012176:	d047      	beq.n	8012208 <__gethex+0x38c>
 8012178:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801217c:	2b02      	cmp	r3, #2
 801217e:	d015      	beq.n	80121ac <__gethex+0x330>
 8012180:	2b03      	cmp	r3, #3
 8012182:	d017      	beq.n	80121b4 <__gethex+0x338>
 8012184:	2b01      	cmp	r3, #1
 8012186:	d109      	bne.n	801219c <__gethex+0x320>
 8012188:	f019 0f02 	tst.w	r9, #2
 801218c:	d006      	beq.n	801219c <__gethex+0x320>
 801218e:	f8da 3000 	ldr.w	r3, [sl]
 8012192:	ea49 0903 	orr.w	r9, r9, r3
 8012196:	f019 0f01 	tst.w	r9, #1
 801219a:	d10e      	bne.n	80121ba <__gethex+0x33e>
 801219c:	f045 0510 	orr.w	r5, r5, #16
 80121a0:	e032      	b.n	8012208 <__gethex+0x38c>
 80121a2:	f04f 0901 	mov.w	r9, #1
 80121a6:	e7d1      	b.n	801214c <__gethex+0x2d0>
 80121a8:	2501      	movs	r5, #1
 80121aa:	e7e2      	b.n	8012172 <__gethex+0x2f6>
 80121ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80121ae:	f1c3 0301 	rsb	r3, r3, #1
 80121b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80121b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d0f0      	beq.n	801219c <__gethex+0x320>
 80121ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80121be:	f104 0314 	add.w	r3, r4, #20
 80121c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80121c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80121ca:	f04f 0c00 	mov.w	ip, #0
 80121ce:	4618      	mov	r0, r3
 80121d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80121d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80121d8:	d01b      	beq.n	8012212 <__gethex+0x396>
 80121da:	3201      	adds	r2, #1
 80121dc:	6002      	str	r2, [r0, #0]
 80121de:	2d02      	cmp	r5, #2
 80121e0:	f104 0314 	add.w	r3, r4, #20
 80121e4:	d13c      	bne.n	8012260 <__gethex+0x3e4>
 80121e6:	f8d8 2000 	ldr.w	r2, [r8]
 80121ea:	3a01      	subs	r2, #1
 80121ec:	42b2      	cmp	r2, r6
 80121ee:	d109      	bne.n	8012204 <__gethex+0x388>
 80121f0:	1171      	asrs	r1, r6, #5
 80121f2:	2201      	movs	r2, #1
 80121f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80121f8:	f006 061f 	and.w	r6, r6, #31
 80121fc:	fa02 f606 	lsl.w	r6, r2, r6
 8012200:	421e      	tst	r6, r3
 8012202:	d13a      	bne.n	801227a <__gethex+0x3fe>
 8012204:	f045 0520 	orr.w	r5, r5, #32
 8012208:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801220a:	601c      	str	r4, [r3, #0]
 801220c:	9b02      	ldr	r3, [sp, #8]
 801220e:	601f      	str	r7, [r3, #0]
 8012210:	e6b0      	b.n	8011f74 <__gethex+0xf8>
 8012212:	4299      	cmp	r1, r3
 8012214:	f843 cc04 	str.w	ip, [r3, #-4]
 8012218:	d8d9      	bhi.n	80121ce <__gethex+0x352>
 801221a:	68a3      	ldr	r3, [r4, #8]
 801221c:	459b      	cmp	fp, r3
 801221e:	db17      	blt.n	8012250 <__gethex+0x3d4>
 8012220:	6861      	ldr	r1, [r4, #4]
 8012222:	9801      	ldr	r0, [sp, #4]
 8012224:	3101      	adds	r1, #1
 8012226:	f7fd fea1 	bl	800ff6c <_Balloc>
 801222a:	4681      	mov	r9, r0
 801222c:	b918      	cbnz	r0, 8012236 <__gethex+0x3ba>
 801222e:	4b1a      	ldr	r3, [pc, #104]	@ (8012298 <__gethex+0x41c>)
 8012230:	4602      	mov	r2, r0
 8012232:	2184      	movs	r1, #132	@ 0x84
 8012234:	e6c5      	b.n	8011fc2 <__gethex+0x146>
 8012236:	6922      	ldr	r2, [r4, #16]
 8012238:	3202      	adds	r2, #2
 801223a:	f104 010c 	add.w	r1, r4, #12
 801223e:	0092      	lsls	r2, r2, #2
 8012240:	300c      	adds	r0, #12
 8012242:	f7fc ff96 	bl	800f172 <memcpy>
 8012246:	4621      	mov	r1, r4
 8012248:	9801      	ldr	r0, [sp, #4]
 801224a:	f7fd fecf 	bl	800ffec <_Bfree>
 801224e:	464c      	mov	r4, r9
 8012250:	6923      	ldr	r3, [r4, #16]
 8012252:	1c5a      	adds	r2, r3, #1
 8012254:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012258:	6122      	str	r2, [r4, #16]
 801225a:	2201      	movs	r2, #1
 801225c:	615a      	str	r2, [r3, #20]
 801225e:	e7be      	b.n	80121de <__gethex+0x362>
 8012260:	6922      	ldr	r2, [r4, #16]
 8012262:	455a      	cmp	r2, fp
 8012264:	dd0b      	ble.n	801227e <__gethex+0x402>
 8012266:	2101      	movs	r1, #1
 8012268:	4620      	mov	r0, r4
 801226a:	f7ff fd9f 	bl	8011dac <rshift>
 801226e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012272:	3701      	adds	r7, #1
 8012274:	42bb      	cmp	r3, r7
 8012276:	f6ff aee0 	blt.w	801203a <__gethex+0x1be>
 801227a:	2501      	movs	r5, #1
 801227c:	e7c2      	b.n	8012204 <__gethex+0x388>
 801227e:	f016 061f 	ands.w	r6, r6, #31
 8012282:	d0fa      	beq.n	801227a <__gethex+0x3fe>
 8012284:	4453      	add	r3, sl
 8012286:	f1c6 0620 	rsb	r6, r6, #32
 801228a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801228e:	f7fd ff5f 	bl	8010150 <__hi0bits>
 8012292:	42b0      	cmp	r0, r6
 8012294:	dbe7      	blt.n	8012266 <__gethex+0x3ea>
 8012296:	e7f0      	b.n	801227a <__gethex+0x3fe>
 8012298:	08012bf1 	.word	0x08012bf1

0801229c <L_shift>:
 801229c:	f1c2 0208 	rsb	r2, r2, #8
 80122a0:	0092      	lsls	r2, r2, #2
 80122a2:	b570      	push	{r4, r5, r6, lr}
 80122a4:	f1c2 0620 	rsb	r6, r2, #32
 80122a8:	6843      	ldr	r3, [r0, #4]
 80122aa:	6804      	ldr	r4, [r0, #0]
 80122ac:	fa03 f506 	lsl.w	r5, r3, r6
 80122b0:	432c      	orrs	r4, r5
 80122b2:	40d3      	lsrs	r3, r2
 80122b4:	6004      	str	r4, [r0, #0]
 80122b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80122ba:	4288      	cmp	r0, r1
 80122bc:	d3f4      	bcc.n	80122a8 <L_shift+0xc>
 80122be:	bd70      	pop	{r4, r5, r6, pc}

080122c0 <__match>:
 80122c0:	b530      	push	{r4, r5, lr}
 80122c2:	6803      	ldr	r3, [r0, #0]
 80122c4:	3301      	adds	r3, #1
 80122c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80122ca:	b914      	cbnz	r4, 80122d2 <__match+0x12>
 80122cc:	6003      	str	r3, [r0, #0]
 80122ce:	2001      	movs	r0, #1
 80122d0:	bd30      	pop	{r4, r5, pc}
 80122d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80122da:	2d19      	cmp	r5, #25
 80122dc:	bf98      	it	ls
 80122de:	3220      	addls	r2, #32
 80122e0:	42a2      	cmp	r2, r4
 80122e2:	d0f0      	beq.n	80122c6 <__match+0x6>
 80122e4:	2000      	movs	r0, #0
 80122e6:	e7f3      	b.n	80122d0 <__match+0x10>

080122e8 <__hexnan>:
 80122e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122ec:	680b      	ldr	r3, [r1, #0]
 80122ee:	6801      	ldr	r1, [r0, #0]
 80122f0:	115e      	asrs	r6, r3, #5
 80122f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80122f6:	f013 031f 	ands.w	r3, r3, #31
 80122fa:	b087      	sub	sp, #28
 80122fc:	bf18      	it	ne
 80122fe:	3604      	addne	r6, #4
 8012300:	2500      	movs	r5, #0
 8012302:	1f37      	subs	r7, r6, #4
 8012304:	4682      	mov	sl, r0
 8012306:	4690      	mov	r8, r2
 8012308:	9301      	str	r3, [sp, #4]
 801230a:	f846 5c04 	str.w	r5, [r6, #-4]
 801230e:	46b9      	mov	r9, r7
 8012310:	463c      	mov	r4, r7
 8012312:	9502      	str	r5, [sp, #8]
 8012314:	46ab      	mov	fp, r5
 8012316:	784a      	ldrb	r2, [r1, #1]
 8012318:	1c4b      	adds	r3, r1, #1
 801231a:	9303      	str	r3, [sp, #12]
 801231c:	b342      	cbz	r2, 8012370 <__hexnan+0x88>
 801231e:	4610      	mov	r0, r2
 8012320:	9105      	str	r1, [sp, #20]
 8012322:	9204      	str	r2, [sp, #16]
 8012324:	f7ff fd94 	bl	8011e50 <__hexdig_fun>
 8012328:	2800      	cmp	r0, #0
 801232a:	d151      	bne.n	80123d0 <__hexnan+0xe8>
 801232c:	9a04      	ldr	r2, [sp, #16]
 801232e:	9905      	ldr	r1, [sp, #20]
 8012330:	2a20      	cmp	r2, #32
 8012332:	d818      	bhi.n	8012366 <__hexnan+0x7e>
 8012334:	9b02      	ldr	r3, [sp, #8]
 8012336:	459b      	cmp	fp, r3
 8012338:	dd13      	ble.n	8012362 <__hexnan+0x7a>
 801233a:	454c      	cmp	r4, r9
 801233c:	d206      	bcs.n	801234c <__hexnan+0x64>
 801233e:	2d07      	cmp	r5, #7
 8012340:	dc04      	bgt.n	801234c <__hexnan+0x64>
 8012342:	462a      	mov	r2, r5
 8012344:	4649      	mov	r1, r9
 8012346:	4620      	mov	r0, r4
 8012348:	f7ff ffa8 	bl	801229c <L_shift>
 801234c:	4544      	cmp	r4, r8
 801234e:	d952      	bls.n	80123f6 <__hexnan+0x10e>
 8012350:	2300      	movs	r3, #0
 8012352:	f1a4 0904 	sub.w	r9, r4, #4
 8012356:	f844 3c04 	str.w	r3, [r4, #-4]
 801235a:	f8cd b008 	str.w	fp, [sp, #8]
 801235e:	464c      	mov	r4, r9
 8012360:	461d      	mov	r5, r3
 8012362:	9903      	ldr	r1, [sp, #12]
 8012364:	e7d7      	b.n	8012316 <__hexnan+0x2e>
 8012366:	2a29      	cmp	r2, #41	@ 0x29
 8012368:	d157      	bne.n	801241a <__hexnan+0x132>
 801236a:	3102      	adds	r1, #2
 801236c:	f8ca 1000 	str.w	r1, [sl]
 8012370:	f1bb 0f00 	cmp.w	fp, #0
 8012374:	d051      	beq.n	801241a <__hexnan+0x132>
 8012376:	454c      	cmp	r4, r9
 8012378:	d206      	bcs.n	8012388 <__hexnan+0xa0>
 801237a:	2d07      	cmp	r5, #7
 801237c:	dc04      	bgt.n	8012388 <__hexnan+0xa0>
 801237e:	462a      	mov	r2, r5
 8012380:	4649      	mov	r1, r9
 8012382:	4620      	mov	r0, r4
 8012384:	f7ff ff8a 	bl	801229c <L_shift>
 8012388:	4544      	cmp	r4, r8
 801238a:	d936      	bls.n	80123fa <__hexnan+0x112>
 801238c:	f1a8 0204 	sub.w	r2, r8, #4
 8012390:	4623      	mov	r3, r4
 8012392:	f853 1b04 	ldr.w	r1, [r3], #4
 8012396:	f842 1f04 	str.w	r1, [r2, #4]!
 801239a:	429f      	cmp	r7, r3
 801239c:	d2f9      	bcs.n	8012392 <__hexnan+0xaa>
 801239e:	1b3b      	subs	r3, r7, r4
 80123a0:	f023 0303 	bic.w	r3, r3, #3
 80123a4:	3304      	adds	r3, #4
 80123a6:	3401      	adds	r4, #1
 80123a8:	3e03      	subs	r6, #3
 80123aa:	42b4      	cmp	r4, r6
 80123ac:	bf88      	it	hi
 80123ae:	2304      	movhi	r3, #4
 80123b0:	4443      	add	r3, r8
 80123b2:	2200      	movs	r2, #0
 80123b4:	f843 2b04 	str.w	r2, [r3], #4
 80123b8:	429f      	cmp	r7, r3
 80123ba:	d2fb      	bcs.n	80123b4 <__hexnan+0xcc>
 80123bc:	683b      	ldr	r3, [r7, #0]
 80123be:	b91b      	cbnz	r3, 80123c8 <__hexnan+0xe0>
 80123c0:	4547      	cmp	r7, r8
 80123c2:	d128      	bne.n	8012416 <__hexnan+0x12e>
 80123c4:	2301      	movs	r3, #1
 80123c6:	603b      	str	r3, [r7, #0]
 80123c8:	2005      	movs	r0, #5
 80123ca:	b007      	add	sp, #28
 80123cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123d0:	3501      	adds	r5, #1
 80123d2:	2d08      	cmp	r5, #8
 80123d4:	f10b 0b01 	add.w	fp, fp, #1
 80123d8:	dd06      	ble.n	80123e8 <__hexnan+0x100>
 80123da:	4544      	cmp	r4, r8
 80123dc:	d9c1      	bls.n	8012362 <__hexnan+0x7a>
 80123de:	2300      	movs	r3, #0
 80123e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80123e4:	2501      	movs	r5, #1
 80123e6:	3c04      	subs	r4, #4
 80123e8:	6822      	ldr	r2, [r4, #0]
 80123ea:	f000 000f 	and.w	r0, r0, #15
 80123ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80123f2:	6020      	str	r0, [r4, #0]
 80123f4:	e7b5      	b.n	8012362 <__hexnan+0x7a>
 80123f6:	2508      	movs	r5, #8
 80123f8:	e7b3      	b.n	8012362 <__hexnan+0x7a>
 80123fa:	9b01      	ldr	r3, [sp, #4]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d0dd      	beq.n	80123bc <__hexnan+0xd4>
 8012400:	f1c3 0320 	rsb	r3, r3, #32
 8012404:	f04f 32ff 	mov.w	r2, #4294967295
 8012408:	40da      	lsrs	r2, r3
 801240a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801240e:	4013      	ands	r3, r2
 8012410:	f846 3c04 	str.w	r3, [r6, #-4]
 8012414:	e7d2      	b.n	80123bc <__hexnan+0xd4>
 8012416:	3f04      	subs	r7, #4
 8012418:	e7d0      	b.n	80123bc <__hexnan+0xd4>
 801241a:	2004      	movs	r0, #4
 801241c:	e7d5      	b.n	80123ca <__hexnan+0xe2>

0801241e <__ascii_mbtowc>:
 801241e:	b082      	sub	sp, #8
 8012420:	b901      	cbnz	r1, 8012424 <__ascii_mbtowc+0x6>
 8012422:	a901      	add	r1, sp, #4
 8012424:	b142      	cbz	r2, 8012438 <__ascii_mbtowc+0x1a>
 8012426:	b14b      	cbz	r3, 801243c <__ascii_mbtowc+0x1e>
 8012428:	7813      	ldrb	r3, [r2, #0]
 801242a:	600b      	str	r3, [r1, #0]
 801242c:	7812      	ldrb	r2, [r2, #0]
 801242e:	1e10      	subs	r0, r2, #0
 8012430:	bf18      	it	ne
 8012432:	2001      	movne	r0, #1
 8012434:	b002      	add	sp, #8
 8012436:	4770      	bx	lr
 8012438:	4610      	mov	r0, r2
 801243a:	e7fb      	b.n	8012434 <__ascii_mbtowc+0x16>
 801243c:	f06f 0001 	mvn.w	r0, #1
 8012440:	e7f8      	b.n	8012434 <__ascii_mbtowc+0x16>

08012442 <_realloc_r>:
 8012442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012446:	4607      	mov	r7, r0
 8012448:	4614      	mov	r4, r2
 801244a:	460d      	mov	r5, r1
 801244c:	b921      	cbnz	r1, 8012458 <_realloc_r+0x16>
 801244e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012452:	4611      	mov	r1, r2
 8012454:	f7fd bcfe 	b.w	800fe54 <_malloc_r>
 8012458:	b92a      	cbnz	r2, 8012466 <_realloc_r+0x24>
 801245a:	f7fd fc87 	bl	800fd6c <_free_r>
 801245e:	4625      	mov	r5, r4
 8012460:	4628      	mov	r0, r5
 8012462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012466:	f000 f840 	bl	80124ea <_malloc_usable_size_r>
 801246a:	4284      	cmp	r4, r0
 801246c:	4606      	mov	r6, r0
 801246e:	d802      	bhi.n	8012476 <_realloc_r+0x34>
 8012470:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012474:	d8f4      	bhi.n	8012460 <_realloc_r+0x1e>
 8012476:	4621      	mov	r1, r4
 8012478:	4638      	mov	r0, r7
 801247a:	f7fd fceb 	bl	800fe54 <_malloc_r>
 801247e:	4680      	mov	r8, r0
 8012480:	b908      	cbnz	r0, 8012486 <_realloc_r+0x44>
 8012482:	4645      	mov	r5, r8
 8012484:	e7ec      	b.n	8012460 <_realloc_r+0x1e>
 8012486:	42b4      	cmp	r4, r6
 8012488:	4622      	mov	r2, r4
 801248a:	4629      	mov	r1, r5
 801248c:	bf28      	it	cs
 801248e:	4632      	movcs	r2, r6
 8012490:	f7fc fe6f 	bl	800f172 <memcpy>
 8012494:	4629      	mov	r1, r5
 8012496:	4638      	mov	r0, r7
 8012498:	f7fd fc68 	bl	800fd6c <_free_r>
 801249c:	e7f1      	b.n	8012482 <_realloc_r+0x40>

0801249e <__ascii_wctomb>:
 801249e:	4603      	mov	r3, r0
 80124a0:	4608      	mov	r0, r1
 80124a2:	b141      	cbz	r1, 80124b6 <__ascii_wctomb+0x18>
 80124a4:	2aff      	cmp	r2, #255	@ 0xff
 80124a6:	d904      	bls.n	80124b2 <__ascii_wctomb+0x14>
 80124a8:	228a      	movs	r2, #138	@ 0x8a
 80124aa:	601a      	str	r2, [r3, #0]
 80124ac:	f04f 30ff 	mov.w	r0, #4294967295
 80124b0:	4770      	bx	lr
 80124b2:	700a      	strb	r2, [r1, #0]
 80124b4:	2001      	movs	r0, #1
 80124b6:	4770      	bx	lr

080124b8 <fiprintf>:
 80124b8:	b40e      	push	{r1, r2, r3}
 80124ba:	b503      	push	{r0, r1, lr}
 80124bc:	4601      	mov	r1, r0
 80124be:	ab03      	add	r3, sp, #12
 80124c0:	4805      	ldr	r0, [pc, #20]	@ (80124d8 <fiprintf+0x20>)
 80124c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80124c6:	6800      	ldr	r0, [r0, #0]
 80124c8:	9301      	str	r3, [sp, #4]
 80124ca:	f7ff f9af 	bl	801182c <_vfiprintf_r>
 80124ce:	b002      	add	sp, #8
 80124d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80124d4:	b003      	add	sp, #12
 80124d6:	4770      	bx	lr
 80124d8:	20000030 	.word	0x20000030

080124dc <abort>:
 80124dc:	b508      	push	{r3, lr}
 80124de:	2006      	movs	r0, #6
 80124e0:	f000 f834 	bl	801254c <raise>
 80124e4:	2001      	movs	r0, #1
 80124e6:	f7f0 fd55 	bl	8002f94 <_exit>

080124ea <_malloc_usable_size_r>:
 80124ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80124ee:	1f18      	subs	r0, r3, #4
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	bfbc      	itt	lt
 80124f4:	580b      	ldrlt	r3, [r1, r0]
 80124f6:	18c0      	addlt	r0, r0, r3
 80124f8:	4770      	bx	lr

080124fa <_raise_r>:
 80124fa:	291f      	cmp	r1, #31
 80124fc:	b538      	push	{r3, r4, r5, lr}
 80124fe:	4605      	mov	r5, r0
 8012500:	460c      	mov	r4, r1
 8012502:	d904      	bls.n	801250e <_raise_r+0x14>
 8012504:	2316      	movs	r3, #22
 8012506:	6003      	str	r3, [r0, #0]
 8012508:	f04f 30ff 	mov.w	r0, #4294967295
 801250c:	bd38      	pop	{r3, r4, r5, pc}
 801250e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012510:	b112      	cbz	r2, 8012518 <_raise_r+0x1e>
 8012512:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012516:	b94b      	cbnz	r3, 801252c <_raise_r+0x32>
 8012518:	4628      	mov	r0, r5
 801251a:	f000 f831 	bl	8012580 <_getpid_r>
 801251e:	4622      	mov	r2, r4
 8012520:	4601      	mov	r1, r0
 8012522:	4628      	mov	r0, r5
 8012524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012528:	f000 b818 	b.w	801255c <_kill_r>
 801252c:	2b01      	cmp	r3, #1
 801252e:	d00a      	beq.n	8012546 <_raise_r+0x4c>
 8012530:	1c59      	adds	r1, r3, #1
 8012532:	d103      	bne.n	801253c <_raise_r+0x42>
 8012534:	2316      	movs	r3, #22
 8012536:	6003      	str	r3, [r0, #0]
 8012538:	2001      	movs	r0, #1
 801253a:	e7e7      	b.n	801250c <_raise_r+0x12>
 801253c:	2100      	movs	r1, #0
 801253e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012542:	4620      	mov	r0, r4
 8012544:	4798      	blx	r3
 8012546:	2000      	movs	r0, #0
 8012548:	e7e0      	b.n	801250c <_raise_r+0x12>
	...

0801254c <raise>:
 801254c:	4b02      	ldr	r3, [pc, #8]	@ (8012558 <raise+0xc>)
 801254e:	4601      	mov	r1, r0
 8012550:	6818      	ldr	r0, [r3, #0]
 8012552:	f7ff bfd2 	b.w	80124fa <_raise_r>
 8012556:	bf00      	nop
 8012558:	20000030 	.word	0x20000030

0801255c <_kill_r>:
 801255c:	b538      	push	{r3, r4, r5, lr}
 801255e:	4d07      	ldr	r5, [pc, #28]	@ (801257c <_kill_r+0x20>)
 8012560:	2300      	movs	r3, #0
 8012562:	4604      	mov	r4, r0
 8012564:	4608      	mov	r0, r1
 8012566:	4611      	mov	r1, r2
 8012568:	602b      	str	r3, [r5, #0]
 801256a:	f7f0 fd03 	bl	8002f74 <_kill>
 801256e:	1c43      	adds	r3, r0, #1
 8012570:	d102      	bne.n	8012578 <_kill_r+0x1c>
 8012572:	682b      	ldr	r3, [r5, #0]
 8012574:	b103      	cbz	r3, 8012578 <_kill_r+0x1c>
 8012576:	6023      	str	r3, [r4, #0]
 8012578:	bd38      	pop	{r3, r4, r5, pc}
 801257a:	bf00      	nop
 801257c:	20005b78 	.word	0x20005b78

08012580 <_getpid_r>:
 8012580:	f7f0 bcf0 	b.w	8002f64 <_getpid>

08012584 <_init>:
 8012584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012586:	bf00      	nop
 8012588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801258a:	bc08      	pop	{r3}
 801258c:	469e      	mov	lr, r3
 801258e:	4770      	bx	lr

08012590 <_fini>:
 8012590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012592:	bf00      	nop
 8012594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012596:	bc08      	pop	{r3}
 8012598:	469e      	mov	lr, r3
 801259a:	4770      	bx	lr
